Chunks Details
Statistics of the tokens for all the chunks:
- Count : 236009
- Mean : 47.051
- Min : 1
- Max : 157

Chunk id: 205
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
are considered implementation detail and may vary between Python
implementations.  When in doubt, consult the module reference at the
location listed above.

Chunk id: 3708
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
haut, celui-ci va indiquer à *NumPy* si on veut concaténer le long de l'axe 0 (les lignes) ou le long de l'axe 1 (les colonnes). Voyons un exemple :

Chunk id: 2025
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
adults here* », nous sommes ici entre adultes, autrement dit nous savons ce que nous faisons !

Chunk id: 627
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
il faut éviter d'utiliser les *underscores* en début et/ou en fin de nom de variable (par exemple : `_var`, `var_`, `__var`, `__var__`). On verra au chapitre 19 *Avoir la classe avec les objets* que

Chunk id: 3242
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#17-commentaires
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.7 Commentaires
Content:
## 1.7 Commentaires  
Dans un script, tout ce qui suit le caractère `#` est ignoré par Python
jusqu'à la fin de la ligne et est considéré comme un commentaire.

Chunk id: 4953
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#application-tkinter-avec-plusieurs-pages
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.7 Application *Tkinter* avec plusieurs pages
Content:
[pythonprogramming](https://pythonprogramming.net/change-show-new-frame-tkinter/) sont des bonnes sources pour commencer et voir concrètement comment faire cela.

Chunk id: 3111
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
entre crochets sont optionnels. Pour obtenir une liste de nombres entiers, il faut l'utiliser systématiquement avec la fonction `list()`.

Chunk id: 2367
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```bash
$ python script_quality_ok.py
2 x 3 = 6
4 x 5 = 20
```  
On va tout d'abord vérifier la conformité avec la PEP 8 avec l'outil `pycodestyle` :  
```bash
$ pycodestyle script_quality_not_ok.py

Chunk id: 765
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
>>>
>>> animaux = (("singe", 3), ("girafe", 1), ("rhinocéros", 1), ("gazelle", 4))
>>> {ani:nb for ani, nb in animaux}
{'singe': 3, 'girafe': 1, 'rhinocéros': 1, 'gazelle': 4}
```

Chunk id: 772
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
Il est également possible de générer des *sets* de compréhension sur le même modèle que les listes de compréhension :  
```python
>>> {i for i in range(10)}
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

Chunk id: 1668
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
```python
class Citronnier:
def __init__(self, nb_citrons, age):
self.nb_citrons, self.age = nb_citrons, age

Chunk id: 691
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Nous avons dit plus haut que les *sets* ne sont pas ordonnés ni indexables, il est donc impossible de récupérer un élément par sa position. Il est également impossible de modifier un de ses éléments

Chunk id: 3769
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
plus fort, il est possible de combiner plusieurs conditions avec les opérateurs logiques `&` et `|` (respectivement **ET** et **OU**) :

Chunk id: 3394
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
'__str__', '__subclasshook__', 'capitalize', 'casefold', 'center',
'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'for

Chunk id: 4101
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
```python
>>> df.dtypes
Source                  object
Deposit Date    datetime64[ns]
Length                   int64
MW                     float64
dtype: object
```

Chunk id: 792
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1381-composition-en-acides-amines
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.1 Composition en acides aminés
Content:
### 13.8.1 Composition en acides aminés

Chunk id: 643
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
```python
>>> l1 = [1, 2, 3]
>>> t = (l1, "Plouf")
>>> t
([1, 2, 3], 'Plouf')
>>> id(l1)
139971081980816
>>> id(t[0])
139971081980816
```

Chunk id: 42
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
ce qui se passe dans la figure @fig:fct-recursive-factorielle (nous vous conseillons bien sûr de tester vous-même cet exemple) :

Chunk id: 4281
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
qui aura pour clé les années (oui, une clé de dictionnaire peut aussi être un entier) et pour valeur le nombre de publications associées à une année donnée.

Chunk id: 1775
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
```python
class Fruit:
def __init__(self, taille=None, masse=None, saveur=None, forme=None):
print("(2) Je suis dans le constructeur de la classe Fruit")
self.taille = taille
self.masse = masse

Chunk id: 3423
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1083-frequence-des-bases-dans-une-sequence-dadn
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.3 Fréquence des bases dans une séquence d'ADN
Content:
Créez pour cela une fonction `calc_composition()` à laquelle vous passez en argument votre séquence d'ADN sous forme d'une chaîne de caractères et qui renvoie une liste de quatre *floats* indiquant

Chunk id: 4136
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
>>> plt.xlabel("Taille (nombre d'acides aminés)")
Text(0.5, 0, "Taille (nombre d'acides aminés)")
>>> plt.ylabel("Masse moléculaire (Dalton)")
Text(0, 0.5, 'Masse moléculaire (Dalton)')

Chunk id: 2595
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
```python
[[48.6, 53.4],[-124.9, 156.7],[-66.2, -30.8], \
[-58.8, -43.1],[-73.9, -40.6],[-53.7, -37.5], \
[-80.6, -26.0],[-68.5, 135.0],[-64.9, -23.5], \

Chunk id: 3909
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
forme de listes. Des arguments facultatifs sont ensuite précisés comme le symbole (`marker`) et la couleur (`color`).

Chunk id: 2312
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Nous vous conseillons cependant d'utiliser les guillemets doubles car ceux-ci sont, de notre point de vue, plus lisibles.  
close-box-rem

Chunk id: 3270
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
- Le livre *Apprenez à programmer en Python* de [Vincent Legoff](https://openclassrooms.com/fr/courses/235344-apprenez-a-programmer-en-python) que vous trouverez sur le site *Openclassroms*.

Chunk id: 3628
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
```python
>>> a.max(axis=1)
array([7, 6, 3, 5])
```  
L'*array* 1D récupéré a 4 éléments correspondant au maximum de chaque ligne.

Chunk id: 4621
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
### 20.4.2 Le même exemple dans un script.  
Tentons maintenant de faire la même chose dans un script `tk_exemple.py` :  
```python
import tkinter as tk

Chunk id: 2725
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
L'animal 2 est un(e) singe
L'animal 3 est un(e) souris
```  
Python possède toutefois la fonction `enumerate()` qui vous permet d'itérer sur les indices et les éléments eux-mêmes.  
```python

Chunk id: 89
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
le même objet dans la mémoire**. Ainsi, si on modifie `liste_tmp`, on modifie aussi `liste`. C'est exactement le même mécanisme que pour la copie de listes (cf. rubrique 11.4 *Copie de listes* du

Chunk id: 1589
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
et `instance.couleur`. Il n'y a donc aucun risque de confusion possible avec les variables globales `saveur` et `couleur`, on accède à chaque variable de la classe avec un nom distinct (qu'on soit à

Chunk id: 2111
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1973-classe-atome
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.3 Classe `Atome`
Content:
Créez une nouvelle classe `Atome` avec les attributs `x`, `y`, `z` (qui contiennent les coordonnées atomiques) et la méthode `calcul_distance()` qui calcule la distance entre deux atomes. Testez

Chunk id: 1640
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Une méthode magique (*magic method*) est une méthode spéciale dont le nom est entouré de double *underscores*. Par exemple, la méthode `.__init__()` est une méthode magique. Ces méthodes sont, la

Chunk id: 1762
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
La quasi-totalité des attributs / méthodes de base de la classe `Citron` sont donc hérités de la classe *object*. Par exemple, lorsqu'on instancie un objet Citron `c = Citron()`, Python utilisera la

Chunk id: 1222
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
originale et très puissante de générer des listes. La syntaxe de base consiste au moins en une boucle `for` au sein de crochets précédés d'une variable (qui peut être la variable d'itération ou pas

Chunk id: 861
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Il est intéressant de faire un point sur le vocabulaire utilisé en anglais et en français. En général, on utilise le verbe *to match* pour indiquer qu'une *regex* « a fonctionné ». Bien qu'il n'y ait

Chunk id: 3519
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
On souhaite obtenir une sortie de la forme :  
```text
gène   1 complémentaire ->   362 bases
gène   2 direct         ->   227 bases
gène   3 complémentaire ->  1781 bases
[...]

Chunk id: 4653
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 3. On crée notre application en tant que classe. Notez que cette classe porte un nom qui commence par une majuscule (comme recommandé dans les bonnes pratiques de la

Chunk id: 841
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
Le module *re* permet d'utiliser des expressions régulières avec Python. Les expressions régulières sont aussi appelées en anglais *regular expressions* ou en plus court *regex*. Dans la suite de ce

Chunk id: 4993
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
pixels. Il y a aura un bouton « Quitter » et un bouton « Launch ! » qui calculera et affichera 10000 points supplémentaires dans le triangle de Sierpinski.

Chunk id: 4786
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
de la méthode `.bind()` est une méthode / fonction *callback* à appeler lors de la survenue de l'événement (comme pour les clics de bouton, vous vous souvenez? On l'appelle donc sans parenthèses ni

Chunk id: 3777
Number of Tokens: 101
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> a[a > 5]
array([6, 7, 8, 9])
>>> a[a == 2]
array([2])
>>> a[a != 0]
array([1, 2, 3, 4, 5, 6, 7, 8, 9])
```

Chunk id: 3429
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
`ALA GLY GLU ARG TRP TYR SER GLY ALA TRP`.  
Rappel de la nomenclature des acides aminés :  
|  Acide aminé  | Code 3-lettres | Code 1-lettre |
|---------------|:--------------:|:-------------:|

Chunk id: 3764
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Très bien, mais au premier abord nous n'en voyons pas forcément l'utilité... Mais qu'en est-il lorsqu'on utilise les opérateurs de comparaison avec un *array* ? Et bien cela renvoie un *array* de

Chunk id: 4267
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#recuperation-des-informations-dune-publication
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.2 Récupération des informations d'une publication
Content:
#### 17.6.5.2 Récupération des informations d'une publication

Chunk id: 4411
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
```python
>>> print(f"Le résultat de 5 * 5 vaut {5 * 5}")
Le résultat de 5 * 5 vaut 25
>>> print(f"Résultat d'une opération avec des floats : {(4.1 * 6.7)}")

Chunk id: 1870
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
citron1.set_masse(-100)
File "./getter_setter.py", line 17, in set_masse
raise ValueError("Z'avez déjà vu une masse négative ???")
ValueError: Z'avez déjà vu une masse négative ???
```

Chunk id: 4474
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
## 3.5 Note sur le vocabulaire et la syntaxe

Chunk id: 811
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
### 13.8.4 Mots de *n* lettres dans un fichier FASTA

Chunk id: 4698
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
canv.create_line(0, 200, 200, 0, fill="black", width=10)
racine.mainloop()
```

Chunk id: 4103
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
Pour les colonnes qui contiennent des données numériques, on peut obtenir
rapidement quelques statistiques descriptives avec la méthode `.describe()` :  
```python
>>> df.describe()

Chunk id: 1724
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
en a), et ce en remontant la filiation (d'abord la grand-mère, puis l'arrière grand-mère, etc). S'il n'a toujours pas trouvé, il cherchera dans la deuxième classe mère (`Mere2` dans notre exemple)

Chunk id: 2999
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
! Ainsi, pas besoin de créer une variable intermédiaire dans laquelle on stocke ce que retourne la fonction.

Chunk id: 1244
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1162-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.2 Séquence d'ADN aléatoire
Content:
### 11.6.2 Séquence d'ADN aléatoire

Chunk id: 2533
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
Toutefois, nous vous le déconseillons formellement. Pourquoi ? Python stocke les valeurs numériques des *floats* sous forme de nombres flottants (d'où leur nom !), et cela mène à certaines

Chunk id: 3580
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
dimensions), la première valeur du tuple correspond au nombre de lignes et la seconde au nombre de colonnes.

Chunk id: 1435
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Ligne 3. La méthode `.affiche_attributs()` affiche l'attribut `.couleur` qui avait été créé précédemment dans le constructeur. Vous voyez ici l'intérêt principal de l'argument `self` passé en premier

Chunk id: 3202
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>
```  
ou pour Linux :  
```text
pierre@jeera:~$ python

Chunk id: 761
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
## 13.6 Dictionnaires et *sets* de compréhension  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 3087
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
## 4.5 Tranches

Chunk id: 1167
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1115-sort
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.5 `.sort()`
Content:
```python
>>> a = [3, 1, 2]
>>> a.sort(reverse=True)
>>> a
[3, 2, 1]
```

Chunk id: 4462
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
tout à la fin, alourdissant ainsi la syntaxe. En effet, dans l'exemple avec la proportion de GC, la ligne équivalente avec une *f-string* apparait tout de même plus simple à lire :

Chunk id: 1779
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
class Citron(Fruit):
def __init__(self, taille=None, masse=None, saveur=None, forme=None):
print("(1) Je rentre dans le constructeur de Citron, et je vais "
"appeler\n"

Chunk id: 458
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
interne des dictionnaires dans Python, mais cela nous concerne peu. Ce qui importe, c'est de se rappeler qu'on accède aux éléments par des clés, donc cet ordre n'a pas d'importance spéciale sauf dans

Chunk id: 2092
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
jaune
acide
ellipsoide
```  
Lignes 1 à 4. On peut retrouver les attributs également par indice.  
Lignes 5 à 8. Les attributs / éléments sont non modifiables !

Chunk id: 4241
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
on cherche à calculer le centre de masse de la membrane, ainsi que le centre de masse (COM) de chaque monocouche de phosphores. Ces COM sont représentés sous forme de croix dans l'image de droite de

Chunk id: 3696
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
: [np.save()](https://numpy.org/doc/stable/reference/generated/numpy.save.html) ou [.tofile()](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile). Le

Chunk id: 3412
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
d'une chaîne de caractères, lit la séquence dans le fichier FASTA et la renvoie sous la forme d'une chaîne de caractères.

Chunk id: 2302
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
souvent développer des programmes scientifiques, nous vous conseillons d'écrire vos commentaires en anglais.

Chunk id: 4335
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
que nous allons décrire en détail dans cette rubrique. Il existe d'autres  manières pour formatter des chaînes de caractères qui étaient utilisées avant la version 3.6, nous en avons mis un rappel

Chunk id: 336
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#885-sequences-aleatoires-de-chiffres
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.5 Séquences aléatoires de chiffres
Content:
Documentation de la fonction `random.randint()` :  
<https://docs.python.org/fr/3/library/random.html#random.randint>

Chunk id: 920
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
close-box-warn

Chunk id: 1147
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#11-plus-sur-les-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Content:
Nous avons vu les listes dès le chapitre 4 et les avons largement utilisées depuis le début de ce cours. Dans ce chapitre nous allons plus loin avec les méthodes associées aux listes, ainsi que

Chunk id: 3029
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
Dans le programme principal, générez 20 listes aléatoires de 100 *floats* compris entre 0 et 100 et affichez le minimum (`min()`), le maximum (`max()`) et la moyenne pour chacune d'entre elles. La

Chunk id: 2324
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
bliblibli
On termine la docstring avec les triples guillemets sur la ligne suivante.
"""
```  
open-box-rem

Chunk id: 4260
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1765-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Content:
publiés chaque année.  
Vous utiliserez les modules *Biopython* et *matplotlib*.

Chunk id: 2453
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
+ Précisez une licence d'utilisation. Voir par exemple le site [*Choose an open source license*](https://choosealicense.com/).

Chunk id: 3765
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
utilise les opérateurs de comparaison avec un *array* ? Et bien cela renvoie un *array* de booléens !

Chunk id: 472
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
peut utiliser d'autres types d'objets comme des entiers, des *floats*, voire même des *tuples* (cf. rubrique suivante), cela peut s'avérer parfois très utile. Une règle est toutefois requise, les

Chunk id: 721
Number of Tokens: 84
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
>>> s1
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> s2
{3, 4, 5, 6}
>>> s3
{16, 15}
>>> s2.issubset(s1)
True
>>> s3.isdisjoint(s1)
True
```

Chunk id: 4907
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
qu'hériter de la classe `tk.Tk` est une manière plus générale et plus compacte : tout ce qui concerne le fenêtrage *Tkinter* se situera dans votre classe Application, et le programme principal n'aura

Chunk id: 4438
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
Cet opérateur existe aussi pour les chaînes de caractères mais il met en place l'écriture formatée. En voici un exemple :

Chunk id: 1466
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
des propriétés générales à la classe puisqu'ils vont  prendre la même valeur quelle que soit l'instance.

Chunk id: 4071
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
1AOV    Anas platyrhynchos   1996-12-11     686  75731.8
1B3E          Homo sapiens   1998-12-09     330  36505.5
```  
Avant d'analyser un jeu de données, il est intéressant de l'explorer un peu.

Chunk id: 3141
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4103-table-de-multiplication-par
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.3 Table de multiplication par 9
Content:
### 4.10.3 Table de multiplication par 9  
Affichez la table de multiplication par 9 en une seule commande avec les instructions `range()` et `list()`.

Chunk id: 4843
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
Il existe également une extension de *Tkinter* nommée *ttk*, réimplémentant la plupart des *widgets* de base de *Tkinter* et qui en propose de nouveaux (*Combobox*, *Notebook*, *Progressbar*,

Chunk id: 468
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
1, 2]` pour la version liste, `coors = {"x": 0, "y": 1, "z": 2}` pour la version dictionnaire. Un lecteur comprendra tout de suite que `coors["z"]` contient la coordonnée $z$, ce sera moins intuitif

Chunk id: 604
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
possible de le faire également avec les listes : `[x, y, z] = [1, 2, 3]`. Toutefois, cette syntaxe est alourdie par la présence des crochets. On préfèrera donc la première syntaxe avec les *tuples*

Chunk id: 4279
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
À la fin vérifiez que votre liste `years` contient bien autant d'éléments que la liste `pmids`.

Chunk id: 2596
Number of Tokens: 116
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
[-58.8, -43.1],[-73.9, -40.6],[-53.7, -37.5], \
[-80.6, -26.0],[-68.5, 135.0],[-64.9, -23.5], \
[-66.9, -45.5],[-69.6, -41.0],[-62.7, -37.5], \
[-68.2, -38.3],[-61.2, -49.1],[-59.7, -41.1]]
```

Chunk id: 977
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
Bien sûr, si on avait eu un deuxième groupe, on aurait pu le réutiliser avec `\\2`, un troisième groupe avec `\\3`, etc.

Chunk id: 4681
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 18. On lance le gestionnaire d'événements.

Chunk id: 2534
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
numériques des *floats* sous forme de nombres flottants (d'où leur nom !), et cela mène à certaines [limitations](https://docs.python.org/fr/3/tutorial/floatingpoint.html). Observez l'exemple suivant

Chunk id: 1970
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
inutilement le code, ce qui va à l'encontre de certains préceptes de la PEP 20 comme « *Sparse is better than dense* », « *Readability counts* », etc. (voir le chapitre 15 *Bonnes pratiques en

Chunk id: 4803
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
while True:
move()
time.sleep(0.05) #attendre 50 ms
```

Chunk id: 914
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
Sans entrer dans les détails propres au langage orienté objet, si on utilise un objet du type `SRE_Match` dans un test, il sera considéré comme vrai. Regardez cet exemple dans lequel on va rechercher

Chunk id: 485
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
### 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`  
Les méthodes `.keys()` et `.values()` renvoient, comme vous vous en doutez, les clés et les valeurs d'un dictionnaire :  
```python

Chunk id: 2226
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
pour la syntaxe de chaque niveau d'indentation est très simple : 4 espaces. N'utilisez pas autre chose, c'est le meilleur compromis.

Chunk id: 2577
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
indéfiniment par une suite de trois valeurs triviales appelée cycle trivial.

Chunk id: 4203
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1762-distance-entre-deux-atomes-carbones-alpha-consecutifs-de-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Content:
### 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar

Chunk id: 3373
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
```python
>>> float(val2[0]) + float(val2[1])
20.599999999999998
```  
open-box-rem

Chunk id: 3169
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
Avec le gestionnaire de paquets *conda*, fourni avec Miniconda, vous pourrez installer des modules supplémentaires qui sont très utiles en bioinformatique (*NumPy*, *scipy*, *matplotlib*, *pandas*,

Chunk id: 3015
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#985-sequence-complementaire
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.5 Séquence complémentaire
Content:
affichez `seq` et sa séquence complémentaire (en utilisant votre fonction `seq_comp()`).  
Rappel : la séquence complémentaire s'obtient en remplaçant A par T, T par A, C par G et G par C.

Chunk id: 664
Number of Tokens: 87
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
>>> t3 = (1, (3, 4), "Plaf", [3, 4, 5])
>>> t3
(1, (3, 4), 'Plaf', [3, 4, 5])
>>> hash(t3)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'

Chunk id: 4596
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
lors de la création du *widget*, l'argument prendra alors une valeur par défaut. Cette liste des arguments par mot-clé est tellement longue qu'en général on ne les précisera pas tous. Heureusement,

Chunk id: 2045
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
|
|  affiche_coucou(self)
|      Méthode inutile qui affiche coucou.
|
[...]
|
|  Data and other attributes defined here:
|
|  saveur = 'acide'
```

Chunk id: 3888
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
nese in the regulation of hepcidin expression.'
```  
Ce qui est bien le résumé que nous obtenons sur la figure @fig:entrez-transferrin.

Chunk id: 1263
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1166-le-nombre-mystere
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.6 Le nombre mystère
Content:
On vous propose d'employer une méthode dite « *brute force* », c'est-à-dire d'utiliser une boucle et à chaque itération de tester les différentes conditions.

Chunk id: 1288
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
classe à partir d'une classe pré-existante et d'y ajouter de nouvelles fonctionnalités). Tous ces concepts seront définis dans ce chapitre.

Chunk id: 2831
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
Par définition, les deux premiers termes sont $x_0 = 0$ et $x_1 = 1$.  
À titre d'exemple, les 10 premiers termes de la suite de Fibonacci sont donc 0, 1, 1, 2, 3, 5, 8, 13, 21 et 34.

Chunk id: 645
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
`t[0]` puisqu'on a le même identifiant. Maintenant, on modifie cette liste via la variable `l1` ou `t[0]` :

Chunk id: 478
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
Même si on a vu que deux objets pouvaient avoir la même valeur de hachage, par exemple `a = 5` et `b = 5`, on ne peut mettre qu'une seule fois la clé `5`. Ceci assure que deux clés d'un même

Chunk id: 570
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
Pour créer un tuple d'un seul élément comme ci-dessus, utilisez une syntaxe avec une virgule `(element,)`, pour éviter une ambiguïté avec une simple expression. Par exemple `(2)` équivaut à l'entier

Chunk id: 4703
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
de nous mener à dessiner hors de la zone visible (cela ne génère pas d'erreur mais n'a guère d'intérêt).

Chunk id: 2503
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
```  
**Code 2**  
```python
nombres = [4, 5, 6]
for nb in nombres:
if nb == 5:
print("Le test est vrai")
print(f"car la variable nb vaut {nb}")
```  
Résultat :  
```text
car la variable nb vaut 4

Chunk id: 875
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `\+` désigne le caractère `+` littéral. La *regex* `A\.G` est retrouvée dans `A.G` et non pas dans `A` suivi de n'importe quel caractère, suivi de `G`.  
`*`

Chunk id: 4779
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Lignes 33 à 35. Jusqu'à maintenant, nous avons utilisé des événements provenant de clics sur des boutons. Ici, on va « intercepter » des événements générés par des clics de souris sur le *canvas* et

Chunk id: 1635
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Un exemple classique de redéfinition des opérateurs concerne l'opérateur `+`. Si les opérandes sont de type numérique, il fait une addition, si elles sont des chaînes de caractère il fait une

Chunk id: 39
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
```python
def calc_factorielle(nb):
if nb == 1:
return 1
else:
return nb * calc_factorielle(nb - 1)

Chunk id: 4188
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
```  
En 2001, cinq structures de transferrine ont été déposées dans la PDB. La deuxième
« meilleure » année est 2003 avec quatre structures.

Chunk id: 4413
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
Résultat d'une opération avec des floats : 27.47
>>> print(f"Le minimum est {min(1, -2, 4)}")
Le minimum est -2
>>> entier = 2
>>> print(f"Le type de {entier} est {type(entier)}")

Chunk id: 2157
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
votre notebook, de la première à la dernière, en cliquant sur le menu *Kernel* puis *Restart & Run All* et enfin de valider le message *Restart and Run All Cells*.

Chunk id: 4328
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
## 3.2 Écriture formatée  
### 3.2.1 Définitions  
Que signifie « écriture formatée » ?  
open-box-def

Chunk id: 2718
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
La variable `i` prendra les valeurs successives 0, 1, 2 et 3 et on accèdera à chaque élément de la liste `animaux` par son indice (*i.e.* `animaux[i]`). Notez à nouveau le nom `i` de la variable

Chunk id: 2155
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
open-box-warn  
La possibilité d'exécuter les cellules d'un notebook Jupyter dans un ordre arbitraire peut prêter à confusion, notamment si vous modifiez la même variable d'une cellule à l'autre.

Chunk id: 2867
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
les tests, l'**indentation** de ce bloc d'instructions (qu'on appelle le corps de la fonction) est **obligatoire**.

Chunk id: 469
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
comprendra tout de suite que `coors["z"]` contient la coordonnée $z$, ce sera moins intuitif avec `coors[2]`.

Chunk id: 688
Number of Tokens: 116
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
```python
>>> set([1, 2, 4, 1])
{1, 2, 4}
>>> set((2, 2, 2, 1))
{1, 2}
>>> set(range(5))
{0, 1, 2, 3, 4}
>>> set({"clé_1": 1, "clé_2": 2})
{'clé_1', 'clé_2'}
>>> set(["ti", "to", "to"])
{'ti', 'to'}

Chunk id: 1292
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
existe même des langages qui formalisent la construction de programmes orientés objets, par exemple le langage [UML](https://fr.wikipedia.org/wiki/UML_(informatique)).

Chunk id: 882
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`{n}`  
:   *n* fois le caractère précédent ou l'expression entre parenthèses précédente.  
Exemple : la *regex* `A(CG){2}T` est retrouvée dans `ACGCGT` mais pas dans `ACGT`, `ACGCGCGT` ou `ACGCG`.

Chunk id: 1539
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
Différents espaces de noms peuvent contenir des objets de même nom sans que cela ne pose de problème. Parce qu'ils sont chacun dans un espace différent, ils peuvent cohabiter sans risque d'écrasement

Chunk id: 1949
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
que l'on souhaite accéder à la valeur de l'attribut (comme dans le constructeur !). Ainsi, Python rappellera l'accesseur et retombera sur `self.masse`, ce qui rappellera l'accesseur et ainsi de suite

Chunk id: 3766
Number of Tokens: 89
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
```python
>>> a = np.reshape(np.arange(1, 10), (3, 3))
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> a > 5
array([[False, False, False],
[False, False,  True],
[ True,  True,  True]])
>>> a == 2

Chunk id: 4774
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
if __name__ == "__main__":
myapp = AppliBaballe()
myapp.title("Baballe !")
myapp.mainloop()
```

Chunk id: 562
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
```python
>>> t = (1, 2, 3)
>>> t
(1, 2, 3)
>>> id(t)
139971081704464
>>> t = t + (2,)
>>> t
(1, 2, 3, 2)
>>> id(t)
139971081700368
```

Chunk id: 1483
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
La figure @fig:classe_var_instance montre l'état des variables après avoir exécuté ce code grâce au site [*Python Tutor*](http://www.pythontutor.com).

Chunk id: 4524
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
Lorsque l'on développe une GUI, nous créons une fenêtre graphique contenant notre application, ainsi que des *widgets* inclus dans la fenêtre.  
open-box-def

Chunk id: 2091
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
>>> for elt in citron:
...     print(elt)
...
10
jaune
acide
ellipsoide
```  
Lignes 1 à 4. On peut retrouver les attributs également par indice.

Chunk id: 543
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
```python
>>> tuple_animaux = (("girafe", 2), ("singe", 3))
>>> dict(tuple_animaux)
{'girafe': 2, 'singe': 3}
>>>
>>> dict([("girafe", 2), ("singe", 3)])
{'girafe': 2, 'singe': 3}
```

Chunk id: 4307
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
(le fameux `"Hello world!"`). En fait, la fonction `print()` affiche l'argument qu'on lui passe entre parenthèses **et** un retour à ligne. Ce retour à ligne supplémentaire est ajouté par défaut. Si

Chunk id: 1697
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Nous commençons à entrevoir la puissance de l'héritage. Si on possède une classe avec de nombreuses méthodes et que l'on souhaite en ajouter de nouvelles, il suffit de créer une classe fille héritant

Chunk id: 410
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
- Une dernière propriété importante est la capacité d'un container (ou tout autre objet Python) à être **hachable**.  
open-box-def

Chunk id: 3951
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
- Le site [Python Graph Gallery](https://www.python-graph-gallery.com/matplotlib/) propose aussi des exemples de code pour différents types de graphiques.

Chunk id: 847
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
bioinformaticien, il est sans arrêt en train de « fouiller » dans des fichiers pour en extraire des informations d'intérêt comme par exemple récupérer les coordonnées 3D des atomes d'une protéine

Chunk id: 3022
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
Créez une fonction `gen_distrib()` qui prend comme argument trois entiers : *debut*, *fin* et *n*. La fonction renverra une liste de $n$ *floats* aléatoires entre *debut* et *fin*. Pour générer un

Chunk id: 3139
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4102-saisons
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.2 Saisons
Content:
`ete` et `automne`. Prévoyez ce que renvoient les instructions suivantes, puis vérifiez-le dans l'interpréteur :

Chunk id: 4315
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
Une autre manière de s'en rendre compte est d'utiliser deux fonctions `print()` à la suite. Dans la portion de code suivante, le caractère « `;` » sert à séparer plusieurs instructions Python sur une

Chunk id: 288
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```  
Ligne 1. Le caractère `$` représente l'invite du *shell*, `test.py` est le nom du script Python, `salut`, `girafe` et `42` sont les arguments passés au script (tous séparés par un espace).

Chunk id: 1933
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
de la classe). Comme il n'y a pas de méthode destructeur (passée avec l'argument `fdel`), on ne pourra pas détruire cet attribut : un `del c.masse` conduirait à une erreur de ce type :

Chunk id: 3911
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Ligne 8. La fonction `title()` définit le titre du graphique.  
Ligne 9. Enfin, la fonction `show()` affiche le graphique généré à l'écran.

Chunk id: 3147
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
La [*Python Software Foundation*](https://www.python.org/psf/) est l'association qui organise le développement de Python et anime la communauté de développeurs et d'utilisateurs.

Chunk id: 4349
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
`print(nom, "a", x, "ans")`. Bien sûr, il ne faut pas omettre le `f` avant le premier guillemet, sinon Python prendra cela pour une chaîne de caractères normale et ne mettra pas en place ce mécanisme

Chunk id: 4126
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Oryctolagus cuniculus    304  33548.1    676  74891.1
Sus scrofa               696  77067.9    696  77067.9
```  
L'argument `index` précise la colonne dont on agrège les données.

Chunk id: 3660
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Il peut être parfois pénible de construire une matrice (*array* à deux dimensions) à l'aide d'une liste de listes. Le module *NumPy* possède quelques fonctions pratiques pour initialiser des

Chunk id: 1197
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
de *casting*). De même que `list(range(10))` convertit un objet de type `range` en un objet de type `list`.

Chunk id: 2653
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
En programmation, on est souvent amené à répéter plusieurs fois une instruction. Incontournables à tout langage de programmation, les boucles vont nous aider à réaliser cette tâche répétitive de

Chunk id: 4160
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
Text(0, 0.5, 'Masse moléculaire (Dalton)')
>>> plt.savefig("transferrine3.png")
```  
On obtient ainsi le graphique de la figure @fig:transferrine3.

Chunk id: 2690
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
mais elles peuvent tout aussi bien utiliser des listes contenant des entiers (ou n'importe quel type de variable).  
```python
>>> for i in [1, 2, 3]:
...     print(i)
...
1
2
3
```

Chunk id: 1240
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#116-exercices
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Content:
## 11.6 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 4044
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
se basant sur leurs index. Il est néanmoins possible de préciser, pour chaque *dataframe*, le nom de la colonne qui sera utilisée comme référence avec l'argument `join_axes`.

Chunk id: 2242
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
En résumé :  
```python
import module_interne_1
import module_interne_2
from module_interne_3 import fonction_spécifique
from module_interne_4 import constante_1, fonction_1, fonction_2

Chunk id: 781
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
- les [*defaultdicts*](https://docs.python.org/fr/3/library/collections.html#collections.defaultdict) permettant de générer des valeurs par défaut quand on demande une clé qui n'existe pas (cela

Chunk id: 498
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
Notez la syntaxe particulière qui ressemble à la fonction `enumerate()` vue au chapitre 5 *Boucles et comparaisons*. On itère à la fois sur `key` et sur `val`. On verra plus bas que cela peut-être

Chunk id: 2909
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
à `y`. Finalement, tout dépendra de leur position, d'où leur qualification de positionnel.

Chunk id: 3551
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```  
De même, il est possible de créer un objet *array* à partir d'une liste constituée d'entiers et de *floats*, mais toutes les valeurs seront alors comprises par *NumPy* comme des *floats* :

Chunk id: 3142
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4104-nombres-pairs
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.4 Nombres pairs
Content:
### 4.10.4 Nombres pairs  
Répondez à la question suivante en une seule commande. Combien y a-t-il de nombres pairs dans l'intervalle `[2, 10000]` inclus ?

Chunk id: 1389
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
pointant vers un espace nommé `Citron instance`. La signification du `self` est expliquée en détail dans la rubrique suivante.

Chunk id: 1956
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Cette exécution montre qu'à chaque appel de `self.masse` ou `citron.masse` on va utiliser les méthodes accesseur ou mutateur. La dernière commande qui affiche le contenu de `citron.__dict__` montre

Chunk id: 3192
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#14-introduction-au-shell
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.4 Introduction au *shell*
Content:
Un *shell* possède toujours une invite de commande, c'est-à-dire un message qui s'affiche avant l'endroit où on entre des commandes. Dans tout cet ouvrage, cette invite est représentée

Chunk id: 103
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
chaque fois que vous lancez Python). On appelle cette règle la règle **LGI** pour locale, globale, interne. En voici un exemple :

Chunk id: 3110
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
L'instruction `range()` fonctionne sur le modèle `range([début,] fin[, pas])`. Les arguments entre crochets sont optionnels. Pour obtenir une liste de nombres entiers, il faut l'utiliser

Chunk id: 4412
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
Le résultat de 5 * 5 vaut 25
>>> print(f"Résultat d'une opération avec des floats : {(4.1 * 6.7)}")
Résultat d'une opération avec des floats : 27.47
>>> print(f"Le minimum est {min(1, -2, 4)}")

Chunk id: 2734
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
|       `<`      | strictement inférieur à |
|      `<=`      | inférieur ou égal à     |  
Observez les exemples suivants avec des nombres entiers.  
```python
>>> x = 5
>>> x == 5
True
>>> x > 10

Chunk id: 260
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
En informatique, la généreration de nombres aléatoires est un problème complexe. On utilise plutôt des « [générateurs de nombres

Chunk id: 1953
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
close-box-warn  
L'exécution de ce code donnera :  
```text
(1) Dans le programme principal, je vais instancier un Citron
(2) J'arrive dans le .__init__()
Coucou je suis dans le set

Chunk id: 938
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
>>> regex.search(animaux)
<_sre.SRE_Match object at 0x7fefdaefe718>
>>> animaux = "singe tigre"
>>> regex.search(animaux)
```

Chunk id: 4334
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
Depuis la version 3.6, Python a introduit les *f-strings* pour mettre en place l'écriture formatée que nous allons décrire en détail dans cette rubrique. Il existe d'autres  manières pour formatter

Chunk id: 2269
Number of Tokens: 87
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
ma_liste = [1, 3, 5, 7, 9, 1]
#code recommandé :
ma_liste[1:3]
ma_liste[1:4:2]
ma_liste[::2]
#code non recommandé :
ma_liste[1 : 3]
ma_liste[1: 4:2 ]
ma_liste[ : :2]
```

Chunk id: 1844
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
On a vu jusqu'à maintenant que Python était très permissif concernant le changement de valeur de n'importe quel attribut depuis l'extérieur. On a vu aussi qu'il était même possible de créer de

Chunk id: 1090
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
>>> chaine
'Salut'
>>> chaine + " Python"
'Salut Python'
>>> chaine * 3
'SalutSalutSalut'
```  
L'opérateur d'addition `+` concatène (assemble) deux chaînes de caractères.

Chunk id: 1519
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
File "./test.py", line 10, in <module>
del(citron1.saveur)
AttributeError: saveur
```  
En fait, la seule manière de modifier un attribut de classe est d'utiliser une syntaxe

Chunk id: 2408
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
```python
"""Docstring d'une ligne décrivant brièvement ce que fait le programme.

Chunk id: 2399
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Lignes 12 et 13. Le nom de la fonction `Multiplie_nombres()` ne respecte pas la convention PEP 8. La fonction devrait s'appeler `multiplie_nombres()`.

Chunk id: 4773
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
def decr(self, rclick):
"""Diminue la taille de la baballe."""
self.size -= 10
if self.size < 10:
self.size = 10

def stop(self, esc):
"""Quitte l'application."""
self.quit()

Chunk id: 2405
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
## 15.4 Organisation du code

Chunk id: 1631
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
[-67, 0, 1, 42, 81]
```  
Le polymorphisme est intimement lié au concept de *redéfinition des opérateurs* que nous avons déjà croisé à plusieurs reprises dans ce livre.  
open-box-def

Chunk id: 1502
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
close-box-warn  
Regardons l'exemple suivant illustrant cela :  
```python
class Citron:
saveur = "acide"

Chunk id: 4781
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
à une fonction / méthode (comme nous l'avions fait pour les clics sur des boutons avec l'option `command=...`). La méthode pour faire cela est `.bind()`, voilà pourquoi on parle de *event binding* en

Chunk id: 3443
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1085-distance-de-hamming
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.5 Distance de Hamming
Content:
Créez la fonction `dist_hamming()`  qui prend en argument deux chaînes de caractères et qui renvoie la distance de Hamming (sous la forme d'un entier) entre ces deux chaînes de caractères.

Chunk id: 4545
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
Sachez qu'il est possible de passer en argument une fonction à une autre fonction ! Par exemple :  
```python
def fct_callback(arg):
print(f"J'aime bien les {arg} !")

Chunk id: 4445
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
### 3.4.2 La méthode `.format()`

Chunk id: 1998
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
16
>>> citron._masse = -8364
>>> citron.masse
Coucou je suis dans le get
-8364
>>>
```  
Malgré l'objet `property`, nous avons pu modifier l'attribut non public `._masse` directement !

Chunk id: 3088
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
Un autre avantage des listes est la possibilité de sélectionner une partie d'une liste en utilisant un indiçage construit sur le modèle `[m:n+1]` pour récupérer tous les éléments, du émième au énième

Chunk id: 3717
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
qu'on peut faire le même genre de chose avec les fameux *dataframes* du module *pandas*. Lisez bien également les recommandations dans la dernière rubrique *17.1.10 Quelques conseils* sur quand

Chunk id: 568
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
pour faire cela puisque les tuples sont non modifiables. Pour ce genre de tâche, les listes sont clairement mieux adaptées.

Chunk id: 2994
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
print(f"{nb}! = {factorielle_nb}")
nb2 = 10
print(f"{nb2}! = {calc_factorielle(nb2)}")
```  
Testez ensuite cette portion de code avec *Python Tutor* en cherchant à bien comprendre chaque étape.

Chunk id: 2854
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
- Chaque fonction effectue en général une tâche **unique et précise**. Si cela se complique, il est plus judicieux d'écrire plusieurs fonctions (qui peuvent éventuellement s'appeler les unes les

Chunk id: 3068
Number of Tokens: 93
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
```python
>>> ani1 = ["girafe", "tigre"]
>>> ani2 = ["singe", "souris"]
>>> ani1 + ani2
['girafe', 'tigre', 'singe', 'souris']
>>> ani1 * 3
['girafe', 'tigre', 'girafe', 'tigre', 'girafe', 'tigre']

Chunk id: 845
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
Cette action de recherche de données dans un fichier est appelée plus généralement *parsing* (qui signifie littéralement « analyse syntaxique »). Le *parsing* fait partie du travail quotidien du

Chunk id: 2976
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
Considérons par exemple le code suivant qui convertit plusieurs températures des degrés Fahrenheit en degrés Celsius :  
```python
>>> temp_in_fahrenheit = 60
>>> (temp_in_fahrenheit - 32) * (5/8)

Chunk id: 2997
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
On voit à nouveau une possibilité puissante des *f-strings* dans l'instruction `f"{nb2}! = {calc_factorielle(nb2)}"` : il est possible de mettre directement au sein des accolades un appel à une

Chunk id: 812
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
Créez un script `extract-words.py` qui prend comme arguments le nom d'un fichier FASTA suivi d'un entier compris entre 1 et 4. Ce script doit extraire du fichier FASTA tous les mots et leurs

Chunk id: 3679
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
de cette fonction. `np.loadtxt()` contient tout un tas d'arguments par mot-clé permettant de récupérer telles ou telles lignes / colonnes, ignorer des lignes de commentaire, changer le séparateur par

Chunk id: 4633
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
de ce script, on écrit d'abord le code construisant l'interface, et on lance le gestionnaire d'événements une fois l'interface complètement décrite, ce qui lancera au final l'application.

Chunk id: 2833
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
Améliorez ce script en affichant, pour chaque élément de la liste `fibo` avec $n > 1$, le rapport entre l'élément de rang $n$ et l'élément de rang $n - 1$. Ce rapport tend-il vers une constante ? Si

Chunk id: 2096
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Quand utiliser les *namedtuples* ? Vous souvenez-vous de la différence entre les listes et les dictionnaires ? Et bien là c'est un peu la même chose entre les *tuples* et les *namedtuples*. Les

Chunk id: 4456
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
`{:0>6d}`, `{:.6e}`, etc., fonctionneront de la même manière. La différence notable est qu'on ne met pas directement le nom de la variable au sein des accolades. Comme pour l'opérateur `%`, c'est

Chunk id: 2267
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
mon_dico = {"clé1": "valeur1", "clé2": "valeur2"}
ma_fonction(argument1 ,argument2)
```  
Par contre, pour les tranches de listes, on ne met pas d'espace autour du `:`  
```python

Chunk id: 2655
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Imaginez par exemple que vous souhaitiez afficher les éléments d'une liste les uns après les autres. Dans l'état actuel de vos connaissances, il faudrait taper quelque chose du style :  
```python

Chunk id: 4985
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
### 20.8.4 Triangle de Sierpinski

Chunk id: 347
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#888-compteur-de-lignes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.8 Compteur de lignes
Content:
renvoie un message d'erreur si le fichier n'existe pas. Par exemple, si les fichiers `zoo1.txt` et `zoo2.txt` sont bien dans le répertoire courant, mais pas `zoo3.txt` :

Chunk id: 2028
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
de la philosophie Python. Soignez plutôt la documentation et faites confiance aux utilisateurs de votre classe !

Chunk id: 2283
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
Notez qu'il n'y a pas d'opérateur `+` pour concaténer les trois chaînes de caractères et que celles-ci ne sont pas séparées par des virgules. À partir du moment où elles sont entre parenthèses,

Chunk id: 284
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
pour récupérer les arguments passés à un script Python lorsque celui-ci est appelé en ligne de commande.

Chunk id: 3218
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
où le triple chevron correspond à l'entrée (*input*) que l'utilisateur tape au clavier, et l'absence de chevron en début de ligne correspond à la sortie (*output*) générée par Python. Une exception

Chunk id: 413
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
être vue comme une empreinte numérique de l'objet. Elle est obtenue en passant l'objet dans une fonction de hachage et dépend du contenu de l'objet. En Python, cette empreinte est comme dans la

Chunk id: 1230
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1153-formatage-dune-sequence-avec-60-caracteres-par-ligne
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.3 Formatage d'une séquence avec 60 caractères par ligne
Content:
### 11.5.3 Formatage d'une séquence avec 60 caractères par ligne  
Exemple d'une séquence constituée de 150 alanines :  
```python
#Exemple d'une séquence de 150 alanines.
>>> seq = "A" * 150

Chunk id: 1768
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
nous souhaitions créer plusieurs classes correspondant à nos fruits favoris, par exemple le citron (comme par hasard !), l'orange, le kaki, etc. Chaque fruit a ses propres particularités, mais il y a

Chunk id: 968
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
des groupes dans les outils qui gèrent les *regex* est `\1`, `\2`, etc. Toutefois, Python nous oblige à mettre un deuxième *backslash* car il y a ici deux niveaux : un premier niveau Python où on

Chunk id: 325
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#881-racine-carree
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.1 Racine carrée
Content:
```text
10 3.162
11 3.317
12 3.464
13 3.606
[...]
```  
Documentation de la fonction `math.sqrt()` :  
<https://docs.python.org/fr/3/library/math.html#math.sqrt>

Chunk id: 4525
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
Les *widgets* (*window gadget*) sont des objets graphiques permettant à l'utilisateur d'interagir avec votre programme Python de manière conviviale. Par exemple, dans la fenêtre sur la figure

Chunk id: 1570
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
conservées telles quelles, et on les retrouve intactes lorsque l'exécution de la fonction du module est terminée. Un module a donc son propre espace de noms qui est bien distinct de tout programme

Chunk id: 524
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
Lorsqu'on trie un dictionnaire par ses valeurs, il faut être sûr que cela soit possible. Ce n'est, par exemple, pas le cas pour le dictionnaire `ani2` car les valeurs sont des valeurs numériques et

Chunk id: 973
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
```python
>>> re.search("(pan)\\1", "bambi et panpan")
<_sre.SRE_Match object; span=(9, 15), match='panpan'>
>>> re.search("(pan)\\1", "le pistolet a fait pan !")
>>>
```

Chunk id: 2688
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> for animal in animaux[1:3]:
...     print(animal)
...
tigre
singe
```

Chunk id: 1971
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
is better than dense* », « *Readability counts* », etc. (voir le chapitre 15 *Bonnes pratiques en programmation Python*).

Chunk id: 2125
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#181-installation
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.1 Installation
Content:
## 18.1 Installation  
Avec la distribution Miniconda, les notebooks Jupyter s'installent avec la commande :  
```bash
$ conda install -y jupyterlab
```

Chunk id: 1411
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
on peut passer des arguments positionnels ou par mot-clé et en créer autant que l'on veut (voir chapitre 9 *Fonctions*). Voici un exemple :

Chunk id: 4886
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
if __name__ == "__main__":
racine = tk.Tk()
racine.title("Ma Première App :-)")
app = Application(racine)
racine.mainloop()
```

Chunk id: 3950
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
open-box-more  
- Le site de *matplotlib* fournit de nombreux [exemples détaillés](https://matplotlib.org/gallery/index.html), n'hésitez pas à le consulter.

Chunk id: 4616
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
automatiquement en s'adaptant à la grandeur de votre *label*. L'invocation de la même méthode pour le bouton va faire apparaître celui-ci juste en dessous du *label* et redimensionner la fenêtre.

Chunk id: 2670
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
D'ores et déjà, prêtez attention au caractère **deux-points** « `:` » à la fin de la ligne débutant par `for`. Cela signifie que la boucle `for` attend un **bloc d'instructions**, en l’occurrence

Chunk id: 44
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
Ligne 8, on appelle la fonction `calc_factorielle()` en passant comme argument l'entier 4. Dans la fonction, la variable locale qui récupère cet argument est `nb`. Au sein de la fonction, celle-ci se

Chunk id: 2365
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Returns
-------
int
Le produit des deux nombres.

"""
return nombre1 *nombre2


if __name__ == "__main__":
print(f"2 x 3 = {Multiplie_nombres(2, 3)}")
print (f"4 x 5 = {Multiplie_nombres(4, 5)}")

Chunk id: 1059
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#23-nommage
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.3 Nommage
Content:
## 2.3 Nommage

Chunk id: 623
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
```python
>>> 3
3
>>> _
3
>>> "mésange"
'mésange'
>>> _
'mésange'
```  
Attention, cela n'est vrai que dans l'interpréteur !  
close-box-rem  
open-box-rem

Chunk id: 4506
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
exemple ci-dessus on pourrait par exemple développer une interface où l'utilisateur choisirait le nom du fichier d'entrée par l'intermédiaire d'une boîte de dialogue, et de contrôler les options en

Chunk id: 1773
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
alors créer des classes comme `Citron`, `Orange`, etc., héritant de la classe `Fruit` et ainsi nous économiser des lignes de code identiques à ajouter pour chaque fruit. Regardons l'exemple suivant

Chunk id: 3861
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
>>> res_esummary = Entrez.read(req_esummary)
```  
La variable `res_esummary` n'est pas réellement une liste mais en a plusieurs propriétés.

Chunk id: 1019
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1646-nettoyeur-de-doublons-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.6 Nettoyeur de doublons (exercice +++)
Content:
```text
Le cinéma est devenu parlant, la radio radio finira en images.
La sardine, c'est un petit petit poisson sans tête qui vit dans l'huile.
[...]
```

Chunk id: 2535
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
[limitations](https://docs.python.org/fr/3/tutorial/floatingpoint.html). Observez l'exemple suivant :

Chunk id: 383
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
séquentiels sont les listes, les chaînes de caractères, les objets de type *range*, ainsi que les tuples (cf. plus bas).

Chunk id: 1874
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
des *setters* dans la classe. Imaginons la même classe `Citron` que ci-dessus, mais on utilise le programme principal suivant (notez que nous avons simplement ajouter les lignes 9 à 12 ci-dessous) :

Chunk id: 1814
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Si vous utilisez des ressources externes, il se peut que vous rencontriez une syntaxe `super().__init__()`. La fonction Python interne `super()` appelle automatiquement la classe mère sans que vous

Chunk id: 4690
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
très puissant. Il permet de dessiner des formes diverses (lignes, cercles, etc.), et même de les animer !

Chunk id: 1159
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1113-del
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.3 `del`
Content:
générale de Python, utilisable pour d'autres objets que des listes. Celle-ci ne prend pas de parenthèse.

Chunk id: 1985
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
de l'extérieur de la classe. Ceux-ci existent afin d'éviter qu'un client n'aille perturber ou casser quelque chose dans la classe. Les arguments auxquels l'utilisateur a accès sont dits *publics*.

Chunk id: 1168
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1116-sorted
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.6 `sorted()`
Content:
### 11.1.6 `sorted()`  
La fonction `sorted()` trie également une liste.
Contrairement à la méthode précédente `.sort()`, cette fonction renvoie la liste triée et ne modifie pas la liste initiale :

Chunk id: 2943
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
- Étape 1 : Python est prêt à lire la première ligne de code.  
![Étape 1.](img/fct_step1.png){ #fig:fct_step1 width=80% }
\

Chunk id: 2347
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
L'être humain a une fâcheuse tendance à la procrastination (le fameux « Bah je le ferai demain...») et écrire de la documentation peut être un sérieux motif de procrastination. Soyez vigilant sur ce

Chunk id: 4143
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
>>> dfz = df[df["Length"]<400]
```
Puis en créant un deuxième graphique :  
```python
>>> plt.clf()
>>> plt.scatter(dfz["Length"], dfz["MW"])

Chunk id: 1683
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
En programmation, l'héritage est la capacité d'une classe d'hériter des propriétés d'une classe pré-existante. On parle de classe mère et de classe fille. En Python, l'héritage peut être multiple

Chunk id: 953
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1635-la-methode-findall
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.5 La méthode `.findall()`
Content:
>>> resultat
['3.14', '2.72']
```  
L'utilisation des groupes entre parenthèses est également possible et ceux-ci sont alors renvoyés sous la forme de tuples.  
```python

Chunk id: 1537
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
principal ou une fonction représentent chacun un espace de noms, un module aussi, et bien sûr une classe ou l'instance d'une classe également.

Chunk id: 95
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
```python
>>> def ma_fonction(x):
...     x[1] = -15
...
>>> y = [1, 2, 3]
>>> ma_fonction(y[:])
>>> y
[1, 2, 3]
>>> ma_fonction(list(y))
>>> y
[1, 2, 3]
```

Chunk id: 3201
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
```text
iMac-de-pierre:Downloads$ python
Python 3.7.1 (default, Dec 14 2018, 19:28:38)
[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin

Chunk id: 234
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*urllib*](https://docs.python.org/fr/3/library/urllib.html#module-urllib) : récupération de données sur internet depuis Python.

Chunk id: 2217
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
open-box-def  
On parle de code **pythonique** lorsque ce dernier respecte les règles d'écriture définies par la communauté Python mais aussi les règles d'usage du langage.  
close-box-def

Chunk id: 3948
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
On espère que ces courts exemples vous auront convaincu de l'utilité du module *matplotlib*. Sachez qu'il peut faire bien plus, par exemple générer des histogrammes ou toutes sortes de graphiques

Chunk id: 4140
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
![(A) Masse moléculaire en fonction de la taille. (B) Zoom.](img/transferrine.png){ #fig:transferrine width=99% }  
On peut zoomer sur le groupe de points le plus à gauche en ne sélectionnant

Chunk id: 4024
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
```python
>>> df[ (df["Pau"]>15) | (df["Lyon"]>25) ]
Paris  Lyon  Nantes  Pau
singe      20    21      22   23
souris     30    31      32   33
```

Chunk id: 1382
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
![Fonctionnement d'un constructeur (étape 1).](img/classe_constructeur1.png){ #fig:classe_constructeur1 width=90% }

Chunk id: 1187
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
- Enfin, pour obtenir une liste exhaustive des méthodes disponibles pour les listes, utilisez la fonction `dir(ma_liste)` (`ma_liste` étant une liste).

Chunk id: 4449
Number of Tokens: 83
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
John a 32 ans
>>> nb_G = 4500
>>> nb_C = 2575
>>> prop_GC = (nb_G + nb_C)/14800
>>> print("On a {} G et {} C -> prop GC = {:.2f}".format(nb_G, nb_C, prop_GC))
On a 4500 G et 2575 C -> prop GC = 0.48

Chunk id: 741
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#135-recapitulation-des-proprietes-des-containers
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Content:
## 13.5 Récapitulation des propriétés des containers  
Après ce tour d'horizon des différents containers, voici un tableau récapitulant leurs propriétés.

Chunk id: 2953
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
*locales* à la fonction. Notez bien que la variable passée en argument, qui s'appelle `x` dans la fonction, est créée en tant que variable *locale*. On remarquera aussi que les variables *globales*

Chunk id: 3436
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|     Lysine    |       Lys      |       K       |
|   Méthionine  |       Met      |       M       |
| Phénylalanine |       Phe      |       F       |

Chunk id: 3425
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
### 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre

Chunk id: 1809
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
`self.__init__()`, cela correspondrait à la fonction de notre classe fille Citron. En mettant systématiquement une syntaxe

Chunk id: 593
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
...
pinson 2
merle 3
>>> for bidule in dico.items():
...     print(bidule, type(bidule))
...
('pinson', 2) <class 'tuple'>
('merle', 3) <class 'tuple'>
```

Chunk id: 1723
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
dans notre exemple). S'il ne trouve pas, il cherchera dans les ancêtres de cette première mère (si elle en a), et ce en remontant la filiation (d'abord la grand-mère, puis l'arrière grand-mère, etc).

Chunk id: 3058
Number of Tokens: 93
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> tailles = [5, 2.5, 1.75, 0.15]
>>> mixte = ["girafe", 5, "souris", 0.15]
>>> animaux
['girafe', 'tigre', 'singe', 'souris']

Chunk id: 3800
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
toute leur importance. Alors quand utiliser les listes ou quand utiliser les *arrays NumPy* ? Voici une liste non exhaustive d'éléments qui peuvent guider votre choix :

Chunk id: 1071
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
d'humains sur Terre (au 26 août 2020) 7807568245. Pour s'y retrouver, Python autorise l'utilisation du caractère « souligné » (ou *underscore*) `_` pour séparer des groupes de chiffres. Par exemple :

Chunk id: 1931
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
contenu de cet attribut `.masse`, Python appellera la méthode `.get_masse()`, et quand on voudra le modifier, Python appellera la méthode `.set_masse()` (ceci sera valable de l'intérieur ou de

Chunk id: 794
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1381-composition-en-acides-amines
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.1 Composition en acides aminés
Content:
`AGWPSGGASAGLAILWGASAIMPGALW`. Le dictionnaire ne doit contenir que les acides aminés présents dans la séquence.

Chunk id: 2432
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 75 à 77. On écrit le programme principal. Le test ligne 76 n'est vrai que si le script est utilisé en tant que programme. Les lignes suivantes ne sont donc pas exécutées si le script est

Chunk id: 4699
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
Ligne 4. On voit qu'il faut d'abord créer le *widget* *canvas*, comme d'habitude en lui passant l'instance de la fenêtre principale en tant qu'argument positionnel, puis les options. Notons que nous

Chunk id: 4638
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Comme son nom l'indique, celle-ci détruit la fenêtre principale et mène aussi à l'arrêt de l'application. Cette méthode aurait donc également fonctionné ici. Par contre, la méthode `.quit()` n'aurait

Chunk id: 2090
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
File "<stdin>", line 1, in <module>
AttributeError: can't set attribute
>>> for elt in citron:
...     print(elt)
...
10
jaune
acide
ellipsoide
```

Chunk id: 1496
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
et de l'intérieur avec une syntaxe `self.attribut_d_instance = nouvelle_valeur`. Ce n'est pas du tout le cas avec les attributs de classe.

Chunk id: 1612
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
concerne la gestion des noms avec des fonctions imbriquées. Et oui, Python autorise cela ! Par exemple :

Chunk id: 4098
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
PDB ID
1A8E          Homo sapiens   1998-03-24     329  36408.4
1A8F          Homo sapiens   1998-03-25     329  36408.4
1AIV         Gallus gallus   1997-04-28     686  75929.0

Chunk id: 83
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
Pour bien comprendre l'origine de ce comportement, utilisons à nouveau le site [*Python Tutor*](http://www.pythontutor.com/). La figure @fig:fct_liste vous montre le mécanisme à l'oeuvre lorsqu'on

Chunk id: 2978
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
>>> temp_in_fahrenheit = 80
>>> (temp_in_fahrenheit - 32) * (5/8)
30.0
>>> temp_in_fahrenheit = 100
>>> (temp_in_fahrenheit - 32) * (5/8)
42.5
```

Chunk id: 4185
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
...                    .count()
...                    .sort_values(ascending=False)
...                    .head())
2001-12-31    5
2003-12-31    4
1998-12-31    3
1999-12-31    3
2002-12-31    3

Chunk id: 4912
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
```python
class MonApplication(tk.Tk):
def __init__(self, *args, **kwargs):
tk.Tk.__init__(self, *args, **kwargs)
#ici débute la construction de votre appli
[...]

Chunk id: 6
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
plupart des lignes de code ci-dessous sont données à titre d'exemple pour bien comprendre ce qui se passe, mais nombre d'entre elles sont des aberrations en terme de programmation. Nous ferons un

Chunk id: 666
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
TypeError: unhashable type: 'list'
```  
Les tuples `t` et `t2` sont hachables car ils ne contiennent que des éléments hachables. Par contre, `t3` ne l'est pas car un de ses éléments est une liste.

Chunk id: 2054
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Cet attribut est une chaîne de caractères contenant la *docstring* générale de la classe. Ceci est également vrai pour les modules, méthodes et fonctions. Si on reprend notre exemple ci-dessus :

Chunk id: 4421
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#33-ecriture-scientifique
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.3 Écriture scientifique
Content:
1.000000e-09
```  
Il est également possible de définir le nombre de chiffres après la virgule. Dans l'exemple ci-dessous, on affiche un nombre avec aucun, 3 et 6 chiffres après la virgule :

Chunk id: 3878
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
for its role in iron delivery. The human disease congenital atransf
errinemia and animal models of this disease highlight the essential

Chunk id: 1688
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
class Fille2(Mere1, Mere2):
#contenu de la classe fille 2
```

Chunk id: 530
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1329-cle-associee-au-minimum-ou-au-maximum-des-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.9 Clé associée au minimum ou au maximum des valeurs
Content:
Les fonctions `min()` et `max()`, que vous avez déjà manipulées dans les chapitres précédents, acceptent également l'argument `key=`. On peut ainsi obtenir la clé associée au minimum ou au maximum

Chunk id: 1407
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
vous aurez besoin dans le constructeur `.__init__()` plutôt que dans toute autre méthode. Ainsi ils seront visibles dans toute la classe dès l'instanciation.

Chunk id: 3816
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
l'analyse scientifique. On verra un peu plus loin dans ce chapitre que la puissance de *NumPy* est également utilisée par le module *pandas* et ses fameux *dataframes* pour faire de l'analyse de

Chunk id: 3272
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
- Le site [www.python.org](http://www.python.org). Il contient énormément d'informations et de liens sur Python. La page d'[index des modules](https://docs.python.org/fr/3/py-modindex.html) est

Chunk id: 2543
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
`0.3` ne peut être qu'approché lorsqu'on le code en nombre flottant. Il est donc essentiel d'avoir cela en tête lorsque l'on effectue un test.

Chunk id: 3051
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
close-box-rem

Chunk id: 3559
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
La différence fondamentale entre un objet *array* à une dimension et une liste (ou un tuple) est que celui-ci est considéré comme un **vecteur**. Par conséquent, on peut effectuer des opérations

Chunk id: 3413
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
Utilisez ensuite cette fonction pour récupérer la séquence d'ADN dans la variable `sequence` puis pour afficher les informations suivantes :  
- le nom du fichier FASTA,

Chunk id: 411
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
Un objet Python est dit **hachable** (*hashable* en anglais) s'il est possible de calculer une valeur de hachage sur celui-ci avec la fonction interne `hash()`. En programmation, la valeur de hachage

Chunk id: 2519
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
En Python, on utilise le mot réservé `and` pour l'opérateur **ET** et le mot réservé `or` pour l'opérateur **OU**. Respectez bien la casse des opérateurs `and` et `or` qui, en Python, s'écrivent en

Chunk id: 2313
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
## 15.2 Les *docstrings* et la PEP 257

Chunk id: 3366
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
'fonctionne avec les tabulations et les retours à la ligne'
```  
La méthode `.strip()` est très pratique quand on lit un fichier et qu'on veut se débarrasser des retours à la ligne.

Chunk id: 1113
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#28-note-sur-la-division-de-deux-nombres-entiers
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.8 Note sur la division de deux nombres entiers
Content:
## 2.8 Note sur la division de deux nombres entiers  
Notez bien qu'en Python 3, la division de deux nombres entiers renvoie par défaut un *float* :  
```python
>>> x = 3 / 4
>>> x
0.75
>>> type(x)

Chunk id: 3374
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
Retenez bien l'utilisation des instructions précédentes pour extraire des valeurs numériques d'une chaîne de caractères. Elles sont régulièrement employées pour analyser des données extraites d'un

Chunk id: 3537
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#171-module-numpy
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Content:
d'effectuer des calculs sur des vecteurs ou des matrices, élément par élément, via un nouveau type d'objet appelé *array*.

Chunk id: 358
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
- Calculez la distance entre le centre du cercle et ce point.
- Déterminez si cette distance est inférieure au rayon du cercle, c'est-à-dire si le point est dans le cercle ou pas.

Chunk id: 1323
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
L'attribut nommé `.__dict__` est particulièrement intéressant. Il s'agit d'un dictionnaire qui listera les attributs créés dynamiquement dans l'instance en cours :  
```python
>>> citron1 = Citron()

Chunk id: 706
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
### 13.4.2 Utilité  
Les containers de type *set* sont très utiles pour rechercher les éléments uniques d'une suite d'éléments. Cela revient à éliminer tous les doublons. Par exemple :  
```python

Chunk id: 3449
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
`xxx est un palindrome` si la chaîne de caractères `xxx` passée en argument est un palindrome ou `xxx n'est pas un palindrome` sinon. Pensez à vous débarrasser au préalable des majuscules et des

Chunk id: 3566
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
### 17.1.2 *Array* et dimensions  
Il est aussi possible de construire des objets *arrays* à deux dimensions, il suffit de passer en argument une liste de listes à la fonction `array()` :  
```python

Chunk id: 4514
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
et à mesure que les pas de simulation avancent. Une GUI vous permettra une telle prouesse ! Enfin, sachez que certains logiciels scientifiques ont été développés avec la bibliothèque graphique Tk

Chunk id: 1973
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
Si on souhaite contrôler ce que fait le client de la classe pour certains attributs « délicats » ou « stratégiques », on peut utiliser la classe *property*. Toutefois, nous vous conseillons de ne

Chunk id: 4947
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
cet ouvrage. Pour de plus amples explications sur cette question, vous pouvez consulter le site [pythonprogramming](https://pythonprogramming.net/passing-functions-parameters-tkinter-using-lambda/)

Chunk id: 4741
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
de ces *widgets* appelle une méthode différente, dont deux que nous avons créées dans la classe (`.dessine_cercle()` et `.dessine_lignes()`).

Chunk id: 3897
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
|     7     |         21.3         |
|     9     |         26.8         |  
Nous allons maintenant représenter l'évolution de la concentration en fonction du temps :  
```python

Chunk id: 2927
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```  
open-box-adv  
Préciser le nom des arguments par mot-clé lors de l'appel d'une fonction est une pratique que nous vous recommandons. Cela les distingue clairement des arguments positionnels.

Chunk id: 871
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`[a-z]`  
:   N'importe quelle lettre minuscule.  
`[0-9]`  
:   N'importe quel chiffre.  
`[A-Za-z0-9]`  
:   N'importe quel caractère alphanumérique.  
`[^AB]`

Chunk id: 70
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
Dans ce cas, la variable `x` est visible dans le module principal et dans toutes les fonctions du module. Toutefois, Python ne permet pas la modification d'une variable globale dans une fonction:

Chunk id: 1884
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
« pythonique » d'opérer (voir le chapitre 15 *Bonnes pratiques en programmation Python* pour la définition de « pythonique »). En Python, la lisibilité est la priorité. Souvenez-vous du Zen de Python

Chunk id: 359
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
- Si le point est effectivement dans le cercle, incrémentez le compteur \verb=n=.

Chunk id: 943
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
- suivi d'un point `\.` (le point a d'habitude une signification de métacaractère, donc il faut l'échapper avec `\` pour qu'il retrouve sa signification de point),

Chunk id: 4806
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
d'un événement clic central sur le *canvas*. Vous noterez qu'outre le `self`, cette fonction prend un autre argument que nous avons nommé ici `mclick`. Il s'agit d'un objet spécial géré par *Tkinter*

Chunk id: 1749
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
étant chargées de base dans l'interpréteur, l'importation de `builtins` n'est pas obligatoire : par exemple `list` revient au même que `builtins.list`, ou `object` revient au même que

Chunk id: 74
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
assignée. Si on veut vraiment modifier une variable globale dans une fonction, il faut utiliser le mot-clé `global` :

Chunk id: 3959
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
>>> s
a    10
b    20
c    30
d    40
dtype: int64
```  
Avec *pandas*, chaque élément de la série de données possède une étiquette qui permet d'appeler les éléments.

Chunk id: 4694
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
un code minimal qui construit un *widget* *canvas*, dans lequel on y dessine un cercle et deux lignes :

Chunk id: 4540
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
cités ci-dessus (fenêtre graphique, *widgets*, gestionnaire d'événements). Nous aurons cependant besoin d'une dernière notion : les fonctions *callback*.

Chunk id: 3644
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
de même la syntaxe `a[i, j]` qui est plus proche de la [définition mathématiques d'un élément de matrice](https://fr.wikipedia.org/wiki/Matrice_(math%C3%A9matiques)#D%C3%A9finitions).

Chunk id: 541
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
```python
>>> liste_animaux = [["girafe", 2], ["singe", 3]]
>>> dict(liste_animaux)
{'girafe': 2, 'singe': 3}
```

Chunk id: 4108
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
a une valeur moyenne de 52816.090244 avec un écart-type de 19486.594012 et que
la plus petite valeur est 33548.100000 et la plus grande 77067.900000. Pratique !

Chunk id: 1945
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
close-box-adv  
Lignes 6 à 15. Dans les méthodes accesseur et mutateur, on utilise la variable

Chunk id: 3531
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
modules vus précédemment). Avec la distribution Miniconda que nous vous avons conseillé d'utiliser (consultez pour cela la documentation en

Chunk id: 3857
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
en connaissant son PMID. Par exemple, l'article avec le PMID [22294463](https://www.ncbi.nlm.nih.gov/pubmed/22294463) dont un aperçu est sur la figure @fig:entrez-transferrin.

Chunk id: 1157
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1113-del
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.3 `del`
Content:
### 11.1.3 `del`  
L'instruction `del` supprime un élément d'une liste à un indice déterminé :  
```python
>>> a = [1, 2, 3]
>>> del a[1]
>>> a
[1, 3]
```  
open-box-rem

Chunk id: 3276
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#101-preambule
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.1 Préambule
Content:
Ici nous allons un peu plus loin, notamment avec les [méthodes associées aux chaînes de caractères](https://docs.python.org/fr/3/library/string.html).

Chunk id: 2666
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
- `animaux` est une **liste** sur laquelle on itère,
- `animal` est une **chaîne de caractères** car chaque élément de la liste `animaux` est une chaîne de caractères.

Chunk id: 1184
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
elle s'exécute. La liste étant modifiée « en dur » dans la méthode, cette dernière ne renvoie donc rien. L'explication du mécanisme sous-jacent vous sera donnée dans la rubrique 12.4 *Portée des

Chunk id: 3430
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|---------------|:--------------:|:-------------:|
|    Alanine    |       Ala      |       A       |
|    Arginine   |       Arg      |       R       |

Chunk id: 4817
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
ainsi des informations sur l'événement de l'utilisateur. Même si on ne s'en sert pas, cet argument après le `self` est obligatoire car il est imposé par la méthode `.bind()`.

Chunk id: 4577
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
d'abord comment faire dans l'interpréteur (nous vous conseillons de tester ligne par ligne ce code tout en lisant les commentaires ci-dessous) :

Chunk id: 2513
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
| Condition 1 | Opérateur | Condition 2 | Résultat |
|:-----------:|:---------:|:-----------:|:--------:|
|     Vrai    |     OU    |     Vrai    |   Vrai   |

Chunk id: 2434
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
## 15.5 Conseils sur la conception d'un script  
Voici quelques conseils pour vous aider à concevoir un script Python.

Chunk id: 2918
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
on les passe lors de l'appel. Comment pourrions-nous faire si on souhaitait préciser l'argument par mot-clé `z` et garder les valeurs de `x` et `y` par défaut ? Simplement en  précisant le nom de

Chunk id: 4077
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Deposit Date     object
Length            int64
MW              float64
dtype: object
```  
Les colonnes `Length` et `MW` contiennent des valeurs numériques,

Chunk id: 2553
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#671-jours-de-la-semaine
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.1 Jours de la semaine
Content:
En utilisant une boucle, écrivez chaque jour de la semaine ainsi que les messages suivants :  
- `Au travail` s'il s'agit du lundi au jeudi ;
- `Chouette c'est vendredi` s'il s'agit du vendredi ;

Chunk id: 3011
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#984-nombres-premiers
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.4 Nombres premiers
Content:
```text
2 est premier
3 est premier
4 n'est pas premier
[...]
100 n'est pas premier
```

Chunk id: 2907
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
lors de l'appel de la fonction. De plus, il est nécessaire de respecter le même ordre lors de l'appel que dans la définition de la fonction. Dans l'exemple ci-dessus, `2` correspondra à `x` et `3`

Chunk id: 1546
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
Nous allons dans cette rubrique refaire le point sur ce que l'on a appris dans cet ouvrage sur les espaces de noms en Python, puis se pencher sur les spécificités de ce concept dans les classes.

Chunk id: 3868
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
publié :  
```python
>>> res_esummary[0]["Title"]
'Known and potential roles of transferrin in iron biology.'
>>> res_esummary[0]["DOI"]
'10.1007/s10534-012-9520-3'
>>> res_esummary[0]["PubDate"]

Chunk id: 1868
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
L'exécution de ce code donnera la sortie suivante :  
```text
jaune 0
jaune foncé 100
```  
Si on avait mis `citron1.set_masse(-100)` en ligne 26, la sortie aurait été la suivante :  
```python

Chunk id: 856
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
programmes comme `egrep`, `sed` ou encore `awk` savent interpréter les expressions régulières. Tous ces programmes fonctionnent généralement selon le schéma suivant :

Chunk id: 4477
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
Une méthode est simplement une fonction qui utilise et/ou agit sur l'objet lui-même, les deux étant connectés par un point. La syntaxe générale est de la forme `objet.méthode()`.

Chunk id: 2190
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
close-box-rem

Chunk id: 3448
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
Créez la fonction `test_palindrome()` qui prend en argument une chaîne de caractères et qui affiche `xxx est un palindrome` si la chaîne de caractères `xxx` passée en argument est un palindrome ou

Chunk id: 3421
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1083-frequence-des-bases-dans-une-sequence-dadn
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.3 Fréquence des bases dans une séquence d'ADN
Content:
### 10.8.3 Fréquence des bases dans une séquence d'ADN

Chunk id: 4370
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
- Ensuite on rencontre les deux-points `:`, ceux-ci indiquent que ce qui suit va spécifier le format dans lequel on veut afficher la variable `prop_GC`.

Chunk id: 182
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Si cela vous parait encore ardu, ne vous inquiétez pas, c'est à force de pratiquer et de lire que vous vous approprierez le vocabulaire. Ici, la syntaxe `module.fonction()` est là pour rappeler de

Chunk id: 3675
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
[ 78.,  95.,  79.]])
```  
Pratique, non ? Attention toutefois aux points suivants :  
- chaque ligne doit avoir le même nombre de colonnes, la fonction ne gère pas les données manquantes ;

Chunk id: 3923
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
Ligne 10. On crée la variable `x` avec la fonction `linspace()` du module *NumPy* qui renvoie une liste de valeurs régulièrement espacées entre deux bornes, ici entre le minimum (`min(temps)`) et le

Chunk id: 3215
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
tapant la commande `exit()` puis en validant en appuyant sur la touche *Entrée*, soit en pressant simultanément les touches *Ctrl* et *D* sous Linux et Mac OS X ou *Ctrl* et *Z* puis *Entrée* sous

Chunk id: 1066
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
```python
>>> 1e6
1000000.0
>>> 3.12e-3
0.00312
```  
On appelle cela écriture ou notation scientifique. On pourra noter deux choses importantes :

Chunk id: 2888
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
fonction `fois()` est donc capable d'effectuer des tâches différentes ! Même si Python autorise cela, méfiez-vous tout de même de cette grande flexibilité qui pourrait conduire à des surprises dans

Chunk id: 3729
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
Pour toutes les opérations suivantes, nous utiliserons des fonctions du sous-module *linalg* de *NumPy*. La fonction `inv()` renvoie l'[inverse d'une matrice

Chunk id: 4991
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
point <- calculer(coordonnées(x, y) du centre entre point et sommet_tmp)
dessiner(point)
```

Chunk id: 3771
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
[ True, False,  True],
[False,  True, False]])
>>> (a > 3) | (a % 2 == 0)
array([[False,  True, False],
[ True,  True,  True],
[ True,  True,  True]])
```  
Nous pouvons effectuer deux remarques :

Chunk id: 4046
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
Le fichier `transferrin_report.csv` que vous pouvez télécharger
[ici](https://python.sdv.univ-paris-diderot.fr/data-files/transferrin_report.csv)

Chunk id: 1365
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
instructions comme par exemple initialiser certaines variables. Pour cela, on ajoute une méthode spéciale nommée `.__init__()` : cette méthode s'appelle le « constructeur » de la classe. Il s'agit

Chunk id: 932
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
### 16.3.3 Compilation d'expressions régulières

Chunk id: 2944
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
- Étape 2 : Python met en mémoire la fonction `carre()`. Notez qu'il ne l'exécute pas ! La fonction est mise dans un espace de la mémoire nommé *Global frame*, il s'agit de l'espace du programme

Chunk id: 1306
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
<class 'type'>
>>> citron1 = Citron()
>>> citron1
<__main__.Citron object at 0x7ff2193a20f0>
>>>
```

Chunk id: 364
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13-containers-dictionnaires-tuples-et-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Content:
# 13 Containers, dictionnaires, tuples et *sets*

Chunk id: 4505
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
plus large de votre programme, il est donc intéressant de regarder comment s'y prendre. Dans notre exemple ci-dessus on pourrait par exemple développer une interface où l'utilisateur choisirait le

Chunk id: 3034
Number of Tokens: 1
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
```

Chunk id: 2964
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
plus. On comprend pourquoi elles portent le nom de *locales* puisqu'elles n'existent que lorsque la fonction est exécutée.

Chunk id: 198
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
File "<stdin>", line 1, in ?
NameError: name 'random' is not defined
```

Chunk id: 80
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
```python
>>> def ma_fonction():
...     liste[1] = -127
...
>>> liste = [1,2,3]
>>> ma_fonction()
>>> liste
[1, -127, 3]
```

Chunk id: 3709
Number of Tokens: 94
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
```python
>>> a1 = np.reshape(np.array(range(6)), (3, 2))
>>> a2 = a * 5
>>> a1
array([[0, 1],
[2, 3],
[4, 5]])
>>> a2
array([[ 0,  5],
[10, 15],
[20, 25]])
>>>
>>> np.concatenate((a1, a2), axis=0)

Chunk id: 3465
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
Un [pangramme](http://fr.wikipedia.org/wiki/Pangramme) est une phrase comportant au moins une fois chaque lettre de l'alphabet. Par exemple, « Portez ce vieux whisky au juge blond qui fume » est un

Chunk id: 3026
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
9.000404025130946
```  
Avec la fonction `random.uniform()`, les bornes passées en argument sont incluses, c'est-à-dire qu'ici, le nombre aléatoire renvoyé est dans l'intervalle [1, 10].

Chunk id: 1271
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
un objet « citron » qui contient les attributs « saveur » et « couleur », ainsi qu'une méthode « presser » permettant d'en extraire le jus. En Python, on utilise une « classe » pour construire un

Chunk id: 2384
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Lignes 4 et 5. Dans la *docstring* de la fonction `Multiplie_nombres()` (ligne 7 du script), il manque une ligne vide entre la ligne résumé et la description plus complète.

Chunk id: 1124
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
vu la fonction `print()`. On reconnaît qu'il s'agit d'une fonction car son nom est suivi de parenthèses (par exemple, `type()`). En Python, la syntaxe générale est `fonction()`.

Chunk id: 711
Number of Tokens: 87
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> seq = "atctcgatcgatcgcgctagctagctcgccatacgtacgactacgt"
>>> set(seq)
{'c', 'g', 't', 'a'}
>>> [(base, seq.count(base)) for base in set(seq)]
[('c', 15), ('g', 10), ('t', 11), ('a', 10)]

Chunk id: 3563
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
Avec les listes, ces opérations n'auraient été possibles qu'en utilisant des boucles. Nous vous encourageons donc à utiliser dorénavant les objets *array* lorsque vous aurez besoin de faire des

Chunk id: 1529
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
Nous faisons ici une petite digression sur le concept d'**espace de noms**, car il est important de bien le comprendre lorsqu'on étudie les classes. Nous avons déjà croisé ce concept à plusieurs

Chunk id: 4220
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#construction-de-la-matrice-de-coordonnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.3 Construction de la matrice de coordonnées
Content:
#### 17.6.2.3 Construction de la matrice de coordonnées  
En ouvrant dans un éditeur de texte le fichier `1bta.pdb`, trouvez le nombre d'acides aminés qui constituent la barstar.

Chunk id: 3742
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
Lignes 4 à 13. `eigvecs` est un *array* 2D contenant les 3 vecteurs propres (un par ligne), que l'on peut récupérer avec `eigvecs[0]`,  `eigvecs[1]` et  `eigvecs[2]`.

Chunk id: 252
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
>>> bases = ["A", "T", "C", "G"]
>>> random.choice(bases)
'A'
>>> random.choice(bases)
'G'
>>> random.choices(bases, k=5)
['G', 'A', 'A', 'T', 'G']
>>> random.choices(bases, k=5)

Chunk id: 2741
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
```python
>>> "a" < "b"
True
```

Chunk id: 677
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
car chaque élément ne peut être présent qu'une seule fois. Comme pour les dictionnaires (jusqu'à la version 3.6), les *sets* sont non ordonnés. La manière dont Python les affiche n'a pas de sens en

Chunk id: 1024
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
Aux yeux du programmeur, cette variable est définie par un **nom**, alors que pour l'ordinateur, il s'agit en fait d'une adresse, c'est-à-dire d'une zone particulière de la mémoire.

Chunk id: 3706
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
Pour les *arrays* 2D ça se complique un peu car on peut concaténer des lignes ou des colonnes ! Ainsi, `np.concatenate()` prend un argument optionnel, à savoir `axis`. Comme nous l'avions expliqué

Chunk id: 3745
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
```python
>>> a = np.reshape(np.arange(1, 10), (3, 3))
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> for row in a:
...     print(row, type(row))
...
[1 2 3] <class 'numpy.ndarray'>

Chunk id: 329
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#883-nom-et-contenu-du-repertoire-courant
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.3 Nom et contenu du répertoire courant
Content:
### 8.8.3 Nom et contenu du répertoire courant  
Affichez le nom et le contenu du répertoire courant (celui depuis lequel vous avez lancé l'interpréteur Python).

Chunk id: 2626
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
d'exemple, voici une discussion entre Pierre et Patrick dans laquelle Pierre essaie de deviner le nombre (compris entre 1 et 100 inclus) auquel Patrick a pensé.

Chunk id: 1276
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Dans ce chapitre on utilisera les mots *objet* ou *instance* pour désigner la même chose. Les objets peuvent posséder des **attributs** (variables associées aux objets) et des **méthodes** (qui sont

Chunk id: 1356
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
cette méthode prend obligatoirement un argument que nous avons nommé ici `self`. Nous verrons dans les deux prochaines rubriques la signification de ce `self`. Si on a plusieurs méthodes dans une

Chunk id: 251
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
```  
Mais aussi de tirer alétoirement un ou plusieurs éléments dans une liste donnée :  
```python
>>> bases = ["A", "T", "C", "G"]
>>> random.choice(bases)
'A'
>>> random.choice(bases)
'G'

Chunk id: 3018
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#986-distance-3d
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.6 Distance 3D
Content:
deux atomes. Testez votre fonction sur les 2 points `A(0,0,0)` et `B(1,1,1)`. Trouvez-vous bien $\sqrt{3}$ ?

Chunk id: 4593
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
exhaustive](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/label.html). Dans les fonctions *Tkinter* qui construisent un *widget*, les arguments possibles pour la mise en forme de celui-ci sont

Chunk id: 2023
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Donc en Python, on peut tout détruire, même les attributs délicats contenant des *underscores*. Pourquoi Python permet-il un tel paradoxe ? Et bien selon le concepteur Guido van Rossum : « *We’re all

Chunk id: 2325
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
On termine la docstring avec les triples guillemets sur la ligne suivante.
"""
```  
open-box-rem  
La PEP 257 recommande d'écrire des *docstrings* avec des triples doubles guillemets, c'est-à-dire

Chunk id: 2714
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
Si, par contre, vous itérez sur une liste comportant des chaînes de caractères, utilisez un nom explicite pour la variable d'itération. Par exemple :  
`for prenom in ["Joe", "Bill", "John"]:`  
ou

Chunk id: 2987
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
37.77777777777778
```  
Et s'il y a une erreur dans la formule, il suffira de le corriger qu'une seule fois, dans la fonction `convert_fahrenheit_to_celsius()`.

Chunk id: 4242
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
monocouche de phosphores. Ces COM sont représentés sous forme de croix dans l'image de droite de la figure @fig:exo_get_leaflet.

Chunk id: 257
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Pour des besoins de reproductibilité des analyses en science, on a souvent besoin de retrouver les mêmes résultats même si on utilise des nombres aléatoires. Pour cela, on peut définir ce qu'on

Chunk id: 2793
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5410-pyramide
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.10 Pyramide
Content:
Essayez de faire évoluer votre script pour dessiner la pyramide à partir d'un nombre arbitraire de lignes `N`. Vous pourrez demander à l'utilisateur le nombre de lignes de la pyramide avec les

Chunk id: 933
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
Lorsqu'on a besoin de tester la même expression régulière sur plusieurs milliers de chaînes de caractères, il est pratique de compiler préalablement la *regex* à l'aide de la fonction `compile()` qui

Chunk id: 3645
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
close-box-rem

Chunk id: 2771
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
à l'utilisateur d'entrer une valeur et renvoie celle-ci sous forme d'une chaîne de caractères. Il faut ensuite convertir cette dernière en entier (avec la fonction `int()` ligne 4).

Chunk id: 4899
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Dans un tel cas, l'argument `racine` prend la valeur par défaut `None` lorsque la méthode `.__init__()` de notre classe est exécutée.  L'appel au constructeur de la classe Frame en ligne 4 instancie

Chunk id: 3297
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
```python
>>> x = """souris
... chat
... abeille"""
>>> x
'souris\nchat\nabeille'
>>> print(x)
souris
chat
abeille
```

Chunk id: 1963
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
présent ouvrage. Si vous souhaitez plus d'informations, vous pouvez consulter par exemple le [site programiz](https://www.programiz.com/python-programming/property) ou le livre de [Vincent

Chunk id: 2138
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
```python
a = 2
b = 3
print(a+b)
```  
Pour exécuter le contenu de cette cellule, vous avez plusieurs possibilités :  
- Cliquer sur le menu *Cell*, puis *Run Cells*.

Chunk id: 1409
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
### 19.1.6 Passage d'argument(s) à l'instanciation

Chunk id: 4171
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
le nombre de structures déposées dans la PDB pour un jour donné. Par exemple,
deux structures ont été déposées le 4 septembre 2000.  
```python
>>> df["Deposit Date"].value_counts().head()

Chunk id: 1431
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
<__main__.Citron object at 0x7f4e5fb71438>
jaune
Traceback (most recent call last):
File "classe_exemple1.py", line 14, in <module>
citron1.affiche_attributs()

Chunk id: 4967
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2081-application-de-base
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.1 Application de base
Content:
### 20.8.1 Application de base

Chunk id: 4976
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
: `self.label.configure(text=heure)` où `heure` est une chaîne de caractères représentant l'heure actuelle.

Chunk id: 2257
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
La PEP 8 recommande d'entourer les opérateurs (`+`, `-`, `/`, `*`, `==`, `!=`, `>=`, `not`, `in`, `and`, `or`...) d'un espace avant et d'un espace après. Par exemple :  
```python
#code recommandé :

Chunk id: 2919
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
par mot-clé `z` et garder les valeurs de `x` et `y` par défaut ? Simplement en  précisant le nom de l'argument lors de l'appel :

Chunk id: 146
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#code
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.1 Prédire la sortie
Subsubsection Name: 12.7.1.2 Code 2
Content:
#### 12.7.1.2 Code 2  
```python
def hello(prenom):
print(f"Bonjour {prenom}")


#Programme principal.
x = 10
hello("Patrick")
print(x)
```

Chunk id: 834
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
Le barycentre $G$ de coordonnées ($G_x$, $G_y$, $G_z$) est obtenu à partir des $n$ carbones alpha (CA) de coordonnées (${\rm CA}_{x}$, ${\rm CA}_{y}$, ${\rm CA}_{z}$) avec :

Chunk id: 798
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
sous la forme d'un dictionnaire. Par exemple pour la séquence `ACCTAGCCCTA`, le dictionnaire renvoyée serait :

Chunk id: 4322
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
que pour afficher plusieurs éléments de texte sur une seule ligne, nous avons utilisé le séparateur « `,` » entre les différents éléments. Python a également ajouté un espace à chaque fois que l'on

Chunk id: 2942
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Regardons maintenant ce qui se passe dans le code ci-dessus, étape par étape :  
- Étape 1 : Python est prêt à lire la première ligne de code.

Chunk id: 3955
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#174-module-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Content:
Pour charger *pandas* dans la mémoire de Python, on utilise la commande `import` habituelle :  
```python
>>> import pandas
```

Chunk id: 2716
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
### 5.1.4 Itération sur les indices ou les éléments  
Revenons à notre liste `animaux`. Nous allons maintenant parcourir cette liste, mais cette fois par une itération sur ses indices :  
```python

Chunk id: 2126
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#181-installation
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.1 Installation
Content:
```bash
$ conda install -y jupyterlab
```  
Pour être exact, la commande précédente installe un peu plus que les notebooks Jupyter mais nous verrons cela par la suite.

Chunk id: 2504
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
print(f"car la variable nb vaut {nb}")
```  
Résultat :  
```text
car la variable nb vaut 4
Le test est vrai
car la variable nb vaut 5
car la variable nb vaut 6
```

Chunk id: 555
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
>>> t
(1, 2, 3)
>>> type(t)
<class 'tuple'>
>>> t[2]
3
>>> t[0:2]
(1, 2)
>>> t[2] = 15
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 2986
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
>>> temp_in_fahrenheit = 100
>>> convert_fahrenheit_to_celsius(temp_in_fahrenheit)
37.77777777777778
```

Chunk id: 1996
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
File "<stdin>", line 1, in <module>
File "<stdin>", line 10, in set_masse
ValueError: Z'avez déjà vu une masse négative ? C'est nawak
>>> citron.masse = 16
Coucou je suis dans le set
>>> citron.masse

Chunk id: 4535
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
Le gestionnaire d'événements est une sorte de « boucle infinie » qui est à l'affût de la moindre action de la part de l'utilisateur. C'est lui qui effectuera une action lors de l'interaction de

Chunk id: 4983
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
fois la phrase « C'est fini !!! » dans le *shell* et quittera automatiquement le script. Une image du résultat attendu est montrée dans la figure @fig:tk_compte_a_rebours.

Chunk id: 168
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
*Fichiers*). Ce module nous a donné accès aux fonctions trigonométriques sinus et cosinus, et à la constante $\pi$ :

Chunk id: 3639
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
**on définit toujours un élément par sa ligne puis par sa colonne**. En mathématiques, l'élément $a_{ij}$ d'une matrice $A$ se trouve à la $i^{ème}$ ligne et à la $j^{ème}$ colonne.

Chunk id: 1123
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
`type()`, `int()`, `float()` et `str()`. Dans le chapitre 1 *Introduction*, nous avons également vu la fonction `print()`. On reconnaît qu'il s'agit d'une fonction car son nom est suivi de

Chunk id: 3343
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
aux caractères qui sont invisibles à l'œil, mais qui occupent de l'espace dans un texte. Les espaces blancs les plus classiques sont l'espace, la tabulation et le retour à la ligne.

Chunk id: 1984
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Certains langages orientés objet mettent en place des attributs dits *privés* dont l'accès est impossible de l'extérieur de la classe. Ceux-ci existent afin d'éviter qu'un client n'aille perturber ou

Chunk id: 830
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
### 13.8.6 Barycentre d'une protéine (exercice +++)

Chunk id: 1701
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Si une méthode de la classe fille possède le même nom que celle de la classe mère, c'est la première qui prend la priorité. Dans ce cas, on dit que la méthode est *redéfinie* (en anglais on parle de

Chunk id: 4586
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Pour cela, on a créé une variable `label` qui est une instance de la classe `tk.Label`. Cette variable `label` contient donc notre *widget*, nous la réutiliserons plus tard (par exemple pour placer

Chunk id: 1680
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
L'héritage peut évoquer la capacité qu'ont nos parents à nous transmettre certains traits physiques ou de caractère (ne dit-on pas, j'ai hérité ceci ou cela de ma mère ou de mon père ?). Qu'en est-il

Chunk id: 55
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
Même si les fonctions récursives peuvent être ardues à comprendre, notre propos est ici de vous illustrer qu'une fonction qui en appelle une autre (ici il s'agit d'elle-même) reste « figée » dans le

Chunk id: 2705
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
contente de stocker l'entier actuel, le pas pour passer à l'entier suivant, et le dernier entier à parcourir, ce qui revient à stocker seulement 3 nombres entiers et ce quelle que soit la longueur de

Chunk id: 2848
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
Aux yeux du programmeur au contraire, une fonction est une portion de code effectuant une suite d'instructions bien particulière. Mais avant de vous présenter la syntaxe et la manière de construire

Chunk id: 4275
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
sous forme de chaînes de caractères. Vérifiez sur PubMed que vous avez bien récupéré le bon nombre d'articles.

Chunk id: 2560
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#673-minimum-dune-liste
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.3 Minimum d'une liste
Content:
La fonction `min()` de Python renvoie l'élément le plus petit d'une liste constituée de valeurs numériques ou de chaînes de caractères. Sans utiliser cette fonction, créez un script qui détermine le

Chunk id: 1776
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
self.taille = taille
self.masse = masse
self.saveur = saveur
self.forme = forme
print("Je viens de créer self.taille, self.masse, self.saveur "
"et self.forme")

Chunk id: 4516
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
(par exemple pymol, vmd, etc.). Qui sait, peut-être serez-vous le prochain développeur d'un outil incontournable ?

Chunk id: 3692
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
gérant les données manquantes, ou encore [np.load()](https://numpy.org/doc/stable/reference/generated/numpy.load.html) et

Chunk id: 1238
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1155-selection-des-carbones-alpha-dans-un-fichier-pdb
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.5 Sélection des carbones alpha dans un fichier pdb
Content:
### 11.5.5 Sélection des carbones alpha dans un fichier pdb  
Exemple avec la structure de la [barstar](http://www.rcsb.org/pdb/explore.do?structureId=1BTA) :  
```python

Chunk id: 864
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Par exemple, on pourra traduire l'expression « *The regex matches the line* » par « La *regex* est retrouvée dans la ligne » ou encore « La *regex* correspond dans la ligne ».

Chunk id: 3476
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
biologie*. Pour cet exercice, vous devez savoir que la séquence démarre après la ligne commençant par le mot `ORIGIN` et se termine avant la ligne commençant par les caractères `//` :

Chunk id: 446
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
aux **valeurs** d'un dictionnaire par des **clés**. Ceci semble un peu confus ? Regardez l'exemple suivant :

Chunk id: 26
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
seront détruites que lorsque la boucle sera terminée et que la liste `liste_vals` sera retournée au programme principal. Enfin, notez bien que la fonction `calc_vals()` appelle la fonction

Chunk id: 4576
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Commençons par construire un script qui affichera une simple fenêtre avec un message et un bouton. Regardons d'abord comment faire dans l'interpréteur (nous vous conseillons de tester ligne par ligne

Chunk id: 3419
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
La séquence possède XXX codons
10 premières bases : YYYYYYYYYY
10 dernières bases : ZZZZZZZZZZ
```
où `WWW` et `XXX` sont des entiers et `YYYYYYYYYY` et `ZZZZZZZZZZ` sont des bases.

Chunk id: 4402
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
Enfin, il est important de bien comprendre qu'une *f-string* est indépendante de la fonction `print()`. Si on donne une *f-string* à la fonction `print()`, Python évalue d'abord la *f-string* et

Chunk id: 4483
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#361-affichage-dans-linterpreteur-et-dans-un-programme
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.1 Affichage dans l'interpréteur et dans un programme
Content:
Écrivez la même chose dans un script `test.py` que vous allez créer avec un éditeur de texte. Exécutez ce script en tapant `python test.py` dans un *shell*. Que se passe-t-il ? Pourquoi ? Faites en

Chunk id: 4874
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
*widgets*. La méthode `.place()` place enfin les *widgets* en utilisant les coordonnées de la fenêtre principale. Nous ne développerons pas plus ces méthodes, mais voici de la documentation

Chunk id: 1851
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
des langages orientés objet comme Java et C++. Les méthodes accédant ou modifiant les attributs s'appellent aussi des *getters* et *setters* (en français on dit accesseurs et mutateurs). Un des

Chunk id: 3222
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
En ligne 1 on a rentré la première partie de la ligne de code. On termine par un `\`, ainsi Python sait que la ligne de code n'est pas finie. L'interpréteur nous l'indique avec les `...`. En ligne 2,

Chunk id: 4585
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Ligne 3. On crée un *label*, c'est-à-dire une zone dans la fenêtre principale où on écrit un texte. Pour cela, on a créé une variable `label` qui est une instance de la classe `tk.Label`. Cette

Chunk id: 762
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
Nous avons vu au chapitre 11 *Plus sur les listes* les listes de compréhension. Il est également possible de générer des dictionnaires de compréhension :  
```python

Chunk id: 3388
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
```python
>>> animaux = "girafe tigre"
>>> dir(animaux)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__',
'__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '_

Chunk id: 4481
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#36-exercices
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Content:
## 3.6 Exercices  
*Conseil* : utilisez l'interpréteur Python pour les exercices 2 à 5.

Chunk id: 1132
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#210-minimum-et-maximum
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.10 Minimum et maximum
Content:
```python
>>> min(1, -2, 4)
-2
>>> pi = 3.14
>>> e = 2.71
>>> max(e, pi)
3.14
>>> max(1, 2.4, -6)
2.4
```

Chunk id: 3487
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
```text
drapeau <- Faux
seq <- chaîne de caractères vide
Lire toutes les lignes du fichier:
si la ligne contient //:
drapeau <- Faux
si drapeau est Vrai:

Chunk id: 3347
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Il est également intéressant d'indiquer à `.split()` le nombre de fois qu'on souhaite découper la chaîne de caractères avec l'argument `maxsplit` :  
```python

Chunk id: 1673
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
```text
Ce citronnier a 3 ans et 10 citrons
Ce citronnier a 4 ans et 30 citrons
```  
open-box-more

Chunk id: 1046
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
nous appellerons *floats* et les chaînes de caractères (*string* ou *str*). Bien sûr, il existe de nombreux autres types (par exemple, les booléens, les nombres complexes, etc.). Si vous n'êtes pas

Chunk id: 2508
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
`if`. Dans le code 2, l'instruction de la ligne 5 n'est indentée qu'une seule fois, ce qui fait qu'elle n'appartient plus au bloc d'instructions du test `if`, d'où l'affichage de `car la variable nb

Chunk id: 2845
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
1. vous appelez `len()` en lui passant une liste en argument (ici la liste `[0, 1, 2]`) ;
2. la fonction calcule la longueur de cette liste ;
3. elle vous renvoie un entier égal à cette longueur.

Chunk id: 2516
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
et de l'opérateur **ET** :  
| Condition 1 | Opérateur | Condition 2 | Résultat |
|:-----------:|:---------:|:-----------:|:--------:|
|     Vrai    |     ET    |     Vrai    |   Vrai   |

Chunk id: 2274
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
On a déjà vu au chapitre 1 *Introduction* que le caractère `\` permet de couper des lignes trop longues. Par exemple :  
```python
>>> ma_variable = 3
>>> if ma_variable > 1 and ma_variable < 10 \

Chunk id: 840
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
# 16 Expressions régulières et *parsing*

Chunk id: 4620
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Au final, vous devez obtenir une fenêtre comme sur la figure @fig:exemple1_tkinter.

Chunk id: 3714
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
bien veiller à ce que la concaténation soit possible en terme de dimensionalité. Par exemple, en ligne 12, il faut que les 2 *arrays* `a1` et `a2` aient le même nombre de colonnes.

Chunk id: 3001
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#982-puissance
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.2 Puissance
Content:
### 9.8.2 Puissance  
Créez une fonction `calc_puissance(x, y)` qui renvoie $x^y$ en utilisant l'opérateur `**`. Pour rappel :  
```python
>>> 2**2
4
>>> 2**3
8
>>> 2**4
16
```

Chunk id: 327
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#882-cosinus
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.2 Cosinus
Content:
Documentation de la fonction `math.cos()` :  
<https://docs.python.org/fr/3/library/math.html#math.cos>  
Documentation de la constante `math.pi` :

Chunk id: 3317
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
2`, d'abord Python évalue `2 + 2` et c'est ce résultat qui est affecté à la variable `var`. Enfin, on notera que seule l'utilisation du `print()` mène à l'interprétation des caractères spéciaux comme

Chunk id: 3133
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4101-jours-de-la-semaine
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.1 Jours de la semaine
Content:
1. À partir de cette liste, comment récupérez-vous seulement les 5 premiers jours de la semaine d'une part, et ceux du week-end d'autre part ? Utilisez pour cela l'indiçage.

Chunk id: 392
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
pour les entiers, *floats* ou booléens. Nous allons démontrer cela, mais avant nous avons besoin de définir la notion d'identifiant d'un objet.

Chunk id: 2471
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
du site *Real Python* est une ressource intéressante pour explorer plus en détail la notion de qualité
pour un code Python. De nombreux *linters* y sont présentés.

Chunk id: 2852
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
Par exemple, il est inutile de savoir comment la fonction `math.cos()` calcule un cosinus. On a juste besoin de savoir qu'il faut lui passer en argument un angle en radian et qu'elle renvoie le

Chunk id: 2921
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> fct(z=10, x=3, y=80)
(3, 80, 10)
>>> fct(z=10, y=80)
(0, 80, 10)
```

Chunk id: 4379
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Ce génome contient 4500 G et 2575 C, soit une prop de GC de 0.48
>>> perc_GC = prop_GC * 100
>>> print(f"Ce génome contient {nb_G:d} G et {nb_C:d} C, soit un %GC de {perc_GC:.2f} %")

Chunk id: 1392
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
La chaîne de caractères `couleur` est ainsi « accrochée » (grâce au caractère point) à l'instance en cours référencée par le `self`. *Python Tutor* nous montre cela par une flèche qui pointe depuis

Chunk id: 2515
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
|     Faux    |     OU    |     Vrai    |   Vrai   |
|     Faux    |     OU    |     Faux    |   Faux   |  
et de l'opérateur **ET** :  
| Condition 1 | Opérateur | Condition 2 | Résultat |

Chunk id: 4547
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
if __name__ == "__main__":
une_fct(fct_callback)
```  
Si on exécute ce code, on obtient :  
```text
Je suis au début de une_fct() et je vais exécuter la fonction callback :

Chunk id: 4713
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
open-box-warn

Chunk id: 88
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
part, et la variable locale `liste_tmp` au sein de la fonction d'autre part, **pointent vers le même objet dans la mémoire**. Ainsi, si on modifie `liste_tmp`, on modifie aussi `liste`. C'est

Chunk id: 2333
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
- La solution Google avec le [*Google Style Python Docstrings*](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

Chunk id: 4288
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
```python
import matplotlib.pyplot as plt

Chunk id: 1568
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
En résumé, lorsqu'on lance une méthode d'un module, c'est l'espace de noms de celui-ci qui est utilisé. Bien sûr, toutes les variables du programme principal / fonction / méthode appelant ce module

Chunk id: 4316
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
portion de code suivante, le caractère « `;` » sert à séparer plusieurs instructions Python sur une même ligne :

Chunk id: 2863
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
## 9.2 Définition  
Pour définir une fonction, Python utilise le mot-clé `def`. Si on souhaite que la fonction renvoie quelque chose, il faut utiliser le mot-clé `return`. Par exemple :  
```python

Chunk id: 506
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1326-methode-get
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.6 Méthode `.get()`
Content:
### 13.2.6 Méthode `.get()`  
Par défaut, si on demande la valeur associée à une clé qui n'existe pas, Python renvoie une erreur :  
```python
>>> ani2 = {'nom': 'singe', 'poids': 70, 'taille': 1.75}

Chunk id: 1954
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
(2) J'arrive dans le .__init__()
Coucou je suis dans le set
(3) Je reviens dans le programme principal
Coucou je suis dans le get
La masse de notre citron est 100 g
Coucou je suis dans le set

Chunk id: 294
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
moment où Python quittera le script. Par exemple, si vous attendez au moins un argument en ligne de commande, vous pouvez renvoyer un message pour indiquer à l'utilisateur ce que le script attend

Chunk id: 1469
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
= valeur`. On a vu aussi dans la rubrique *Ajout d'un attribut d'instance* que l'on pouvait ajouter un attribut d'instance de l'extérieur avec une syntaxe `instance.nouvel_attribut = valeur` .

Chunk id: 3027
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
Créez une autre fonction `calc_stat()` qui prend en argument une liste de *floats* et qui renvoie une liste de trois éléments contenant respectivement le minimum, le maximum et la moyenne de la

Chunk id: 569
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
open-box-rem

Chunk id: 1595
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
```
Coucou interne !
Coucou externe
Coucou interne !
Coucou externe
```

Chunk id: 1418
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
```python
class Citron:
def __init__(self, couleur="jaune"):
self.couleur = couleur
var = 2

Chunk id: 934
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
il est pratique de compiler préalablement la *regex* à l'aide de la fonction `compile()` qui renvoie un objet de type `SRE_Pattern` :

Chunk id: 3183
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#13-notations-utilisees
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.3 Notations utilisées
Content:
## 1.3 Notations utilisées  
Dans cet ouvrage, les commandes, les instructions Python, les résultats et les contenus de fichiers
sont indiqués avec `cette police` pour les éléments ponctuels ou

Chunk id: 3005
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#983-pyramide
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.3 Pyramide
Content:
Dans un script `pyra.py`, créez une fonction `gen_pyramide()` à laquelle vous passez un nombre entier `N` et qui renvoie une pyramide de $N$ lignes sous forme de chaîne de caractères. Le programme

Chunk id: 1528
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
## 19.2 Espace de noms

Chunk id: 660
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
### 13.3.5 Hachabilité des tuples  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 661
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
Les tuples sont hachables s'ils ne contiennent que des éléments hachables. Si un tuple contient un ou plusieurs objet(s) non hachable(s) comme une liste, il devient non hachable.  
```python

Chunk id: 1458
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
close-box-warn  
*Conseil* : c'est la première notation `citron1.affiche_attributs()` (ou plus généralement `instance.méthode()`), plus compacte, qui sera toujours utilisée.

Chunk id: 1504
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
print(citron1.saveur) #on regarde ici avec Python Tutor
del citron1.saveur
print(citron1.saveur) #on regarde ici avec Python Tutor
del citron1.saveur
```

Chunk id: 3224
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
on rentre la fin de la ligne de code puis on appuie sur Entrée. A ce moment, Python nous génère le résultat. Si la ligne de code est vraiment très longue, il est même possible de la découper en trois

Chunk id: 4142
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
que les protéines constituées de moins de 400 résidus :
```
>>> dfz = df[df["Length"]<400]
```
Puis en créant un deuxième graphique :  
```python
>>> plt.clf()

Chunk id: 3543
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> import numpy as np
>>> a = [1, 2, 3]
>>> np.array(a)
array([1, 2, 3])
>>> b = np.array(a)
>>> b
array([1, 2, 3])
>>> type(b)
<type 'numpy.ndarray'>
```

Chunk id: 4437
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
On a vu avec les entiers que l'opérateur `%` ou *modulo* renvoyait le reste d'une division entière. Cet opérateur existe aussi pour les chaînes de caractères mais il met en place l'écriture formatée.

Chunk id: 2757
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
...     i = i + 1
...
1
2
3
4
```  
Remarquez qu'il est encore une fois nécessaire d'indenter le bloc d'instructions correspondant au corps de la boucle (ici, les instructions lignes 3 et 4).

Chunk id: 1878
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
print(citron1.get_couleur(), citron1.get_masse())
#on les rechange sans les setters
citron1.couleur = "pourpre profond"
citron1.masse = -15
print(citron1.get_couleur(), citron1.get_masse())
```

Chunk id: 1035
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
son nom. Retenez ceci car c'est une **spécificité de l'interpréteur Python**, très pratique pour chasser (*debugger*) les erreurs dans un programme. Par contre, la ligne d'un script Python qui

Chunk id: 1550
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
à la valeur de celui-ci. Si on est dans une fonction (ou une méthode), Python va d'abord chercher l'espace de noms *local* à cette fonction. S'il ne trouve pas de nom il va ensuite chercher l'espace

Chunk id: 1015
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1645-le-defi-du-de-htmliseur-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.5 Le défi du dé-htmliseur (exercice +++)
Content:
au format HTML et qui renvoie à l'écran tout le texte de ce fichier sans les balises HTML.

Chunk id: 2719
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
la liste `animaux` par son indice (*i.e.* `animaux[i]`). Notez à nouveau le nom `i` de la variable d'itération car on itère sur les **indices**.

Chunk id: 4829
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Radiobutton* : implémente des « boutons radio ».
- *Menubutton* et *Menu* : affiche des menus déroulants.
- *Message* : affiche un message sur plusieurs lignes (extensions du *widget* Label).

Chunk id: 2001
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Le [*name mangling*](https://en.wikipedia.org/wiki/Name_mangling), ou encore substantypage ou déformation de nom en français, correspond à un mécanisme de changement du nom d'un attribut selon si on

Chunk id: 439
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
de modifier un caractère d'une chaîne de caractères. Comme pour la plupart des objets Python non modifiables, les objets de type *range* sont hachables.

Chunk id: 289
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Ligne 2. Le script affiche le contenu de la variable `sys.argv`. Cette variable est une liste qui contient tous les arguments de la ligne de commande, y compris le nom du script lui-même qu'on

Chunk id: 2032
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
d'ailleurs une pratique vivement recommandée. Voici un exemple sur notre désormais familière classe `Citron` :

Chunk id: 3239
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
open-box-rem  
L'extension de fichier standard des scripts Python est `.py`.  
close-box-rem  
Pour exécuter votre script, ouvrez un *shell*  et entrez la commande :
`python test.py`

Chunk id: 1396
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Vous l'aurez compris, l'attribut `couleur` est donc une variable d'instance (voir rubrique *Ajout d'un attribut d'instance* ci-dessus). La méthode `.__init__()` étant intrinsèquement une fonction,

Chunk id: 2128
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
```bash
$ jupyter-notebook
```  
Une nouvelle page devrait s'ouvrir dans votre navigateur web  et ressembler à la figure @fig:jupyter-interface.

Chunk id: 3251
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
Par exemple, imaginons que nous souhaitions afficher chacune des bases d'une séquence d'ADN, les compter puis afficher le nombre total de bases à la fin. Nous pourrions utiliser l'algorithme présenté

Chunk id: 190
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Dans la pratique, plutôt que de charger toutes les fonctions d'un module en une seule fois :  
```python
from random import *
```

Chunk id: 4546
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
def une_fct(ma_callback):
print("Je suis au début de une_fct(), "
"et je vais exécuter la fonction callback :")
ma_callback("fraises")
print("une_fct() se termine.")

Chunk id: 4107
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
max    696.000000  77067.900000
```  
On apprend ainsi que la masse moléculaire (colonne `MW`)
a une valeur moyenne de 52816.090244 avec un écart-type de 19486.594012 et que

Chunk id: 1514
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
valeur `sucrée`. *Python Tutor* nous montre que `citron1.saveur` n'existe pas dans l'espace `Citron instance` qui est vide ; ainsi, Python utilisera l'attribut de classe `.saveur` qui contient

Chunk id: 4915
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
mot-clé ». Pour plus de détails sur comment `*args` et `**kwargs` fonctionnent, reportez-vous au chapitre 21 *Remarques complémentaires*.

Chunk id: 2402
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
basse (voire négative) la première fois que vous analysez votre script avec `pylint`. Cet outil fournit de nombreuses suggestions d'amélioration et la note attribuée à votre script devrait rapidement

Chunk id: 4308
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
parenthèses **et** un retour à ligne. Ce retour à ligne supplémentaire est ajouté par défaut. Si toutefois, on ne veut pas afficher ce retour à la ligne, on peut utiliser l'argument par « mot-clé »

Chunk id: 1499
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
`instance.attribut_de_classe = nouvelle_valeur`, ni à l'intérieur d'une classe via une syntaxe `self.attribut_de_classe = nouvelle_valeur`. Puisqu'ils sont destinés à être identiques pour toutes les

Chunk id: 331
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#883-nom-et-contenu-du-repertoire-courant
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.3 Nom et contenu du répertoire courant
Content:
Documentation de la fonction `os.getcwd()` :  
<https://docs.python.org/fr/3/library/os.html#os.getcwd>  
Documentation de la fonction `os.listdir()` :

Chunk id: 2000
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
open-box-def

Chunk id: 4775
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
```  
Lignes 19 à 23. Les coordonnées de la baballe, ses pas de déplacement, et sa taille sont créés en tant qu'attributs de notre classe. Ainsi ils seront visibles partout dans la classe.

Chunk id: 3249
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
En programmation, il est courant de répéter un certain nombre de choses (avec les boucles, voir le chapitre 5 *Boucles et comparaisons*) ou d'exécuter plusieurs instructions si une condition est

Chunk id: 4245
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
[coors_P.dat](https://python.sdv.univ-paris-diderot.fr/data-files/coors_P.dat), à raison d'un atome par ligne. Nous vous proposons les étapes suivantes pour résoudre cet exercice à l'aide du module

Chunk id: 3903
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
![Fenêtre interactive de *matplotlib*.](img/concentration_vs_temps_show.png "Fenêtre interactive de matplotlib"){ #fig:pltinteractive width=70% }  
Revenons maintenant sur le code.

Chunk id: 2575
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
Soit un entier positif *n*. Si *n* est pair, alors le diviser par 2. Si il est impair, alors le multiplier par 3 et lui ajouter 1. En répétant cette procédure, la suite de nombres atteint la valeur 1

Chunk id: 956
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
Enfin, la méthode `.sub()` permet d'effectuer des remplacements assez puissants. Par défaut la méthode `.sub(chaine1, chaine2)` remplace toutes les occurrences trouvées par l'expression régulière

Chunk id: 4086
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Avec l'argument `memory_usage="deep"`, cette méthode permet surtout de connaitre avec précision
la taille de l'espace mémoire occupé par le *dataframe* :  
```python
>>> df.info(memory_usage="deep")

Chunk id: 250
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
>>> random.shuffle(x)
>>> x
[2, 3, 1, 4]
>>> random.shuffle(x)
>>> x
[4, 2, 1, 3]
```  
Mais aussi de tirer alétoirement un ou plusieurs éléments dans une liste donnée :  
```python

Chunk id: 2625
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
consiste à diviser (en général en parties égales) un problème pour en trouver la solution. À titre d'exemple, voici une discussion entre Pierre et Patrick dans laquelle Pierre essaie de deviner le

Chunk id: 802
Number of Tokens: 97
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
`ACCTAGCCATGTAGAATCGCCTAGGCTTTAGCTAGCTCTAGCTAGCTG`  
Voici un exemple de sortie attendue :  
```text
Mots de 2 lettres
AC : 1
CC : 3
CT : 8
[...]
Mots de 3 lettres
ACC : 1
CCT : 2
CTA : 5
[...]
```

Chunk id: 4693
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
ellipses, lignes, polygones, etc., ou encore insérer du texte ou des images. Regardons tout d'abord un code minimal qui construit un *widget* *canvas*, dans lequel on y dessine un cercle et deux

Chunk id: 3690
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
open-box-more

Chunk id: 836
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
Créez une fonction `calcule_barycentre()` qui prend comme argument une liste de dictionnaires dont les clés (`resid`, `x`, `y` et `z`) sont celles de l'exercice précédent et qui renvoie les

Chunk id: 3209
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Tapez par exemple l'instruction :  
`print("Hello world!")`  
puis validez cette commande en appuyant sur la touche *Entrée*.

Chunk id: 2396
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Lignes 3 à 5. `pylint` indique qu'il manque un espace entre les paramètres de la fonction `Multiplie_nombres()` (ligne 6 et colonne 29 du script). La ligne du script qui pose problème est affichée,

Chunk id: 4034
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
*pandas* propose pour cela la fonction [`concat()`](https://pandas.pydata.org/pandas-docs/stable/merging.html) qui prend comme argument une liste de *dataframes* :  
```python

Chunk id: 3405
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
splits are done. If sep is not specified or is None, any
whitespace string is a separator.
(END)
```

Chunk id: 4604
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
va indiquer la fonction / méthode à exécuter lorsque l'utilisateur clique sur le bouton. On pourra noter que l'instance de la fenêtre mère `tk.Tk` (que nous avons nommée `racine`) possède une méthode

Chunk id: 3120
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
Pour accéder à un élément de la liste, on utilise l'indiçage habituel :  
```python
>>> zoo[1]
['tigre', 2]
```  
Pour accéder à un élément de la sous-liste, on utilise un double indiçage :

Chunk id: 3003
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#982-puissance
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.2 Puissance
Content:
```text
2^ 0 =       1
2^ 1 =       2
2^ 2 =       4
[...]
2^20 = 1048576
```

Chunk id: 4787
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
(comme pour les clics de bouton, vous vous souvenez? On l'appelle donc sans parenthèses ni arguments). On notera que tous ces événements sont liés à des clics sur le *canvas*, mais il est possible de

Chunk id: 342
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#887-sequences-aleatoires-dadn-avec-argument
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.7 Séquences aléatoires d'ADN avec argument
Content:
aléatoire d'ADN dont la longueur est le nombre de bases fourni en argument, puis affiche cette séquence.

Chunk id: 3025
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
```python
>>> import random
>>> random.uniform(1, 10)
8.199672607202174
>>> random.uniform(1, 10)
2.607528561528022
>>> random.uniform(1, 10)
9.000404025130946
```

Chunk id: 4111
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
```python
>>> df["Source"].value_counts()
Homo sapiens             26
Gallus gallus            10
Anas platyrhynchos        2
Oryctolagus cuniculus     2
Sus scrofa                1

Chunk id: 4851
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
ainsi que la documentation très complète du [site du MNT](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/ttk.html).

Chunk id: 37
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
$$
\begin{split}
3! = & 3 \times 2 \times 1 = 6 \\
4! = & 4 \times 3 \times 2 \times 1 = 30 \\
n! = & n \times n - 1 \times \ldots \times 2 \times 1
\end{split}
$$

Chunk id: 2637
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
4. le nombre se trouve entre 75 et 87, on propose 81 ( 75 + (87-75)/2 ).
5. le nombre se trouve entre 75 et 81, on propose 78 ( 75 + (81-75)/2 ).

Chunk id: 1374
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
qui participe à la création d'une instance. Vous n'avez bien sûr pas à retenir ces détails pour continuer la lecture de ce chapitre, retenez simplement que nous avons décidé de nommer la méthode

Chunk id: 4254
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
```python
#Init plot.
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
[...]

Chunk id: 4776
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Lignes 25 à 31. Le *canvas* est ensuite créé et placé dans la fenêtre, puis on définit notre fameuse baballe. À noter, les coordonnées `self.x` et `self.y` de la baballe représentent en fait son côté

Chunk id: 287
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```bash
$ python test.py salut girafe 42
['test.py', 'salut', 'girafe', '42']
```

Chunk id: 2099
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
noms. Le fait qu'ils soient non modifiables peut aussi avoir un avantage par rapport à l'intégrité des données. Si vous trouvez les *namedtuples* limités, sachez que vous pouvez créer votre propre

Chunk id: 2100
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
des données. Si vous trouvez les *namedtuples* limités, sachez que vous pouvez créer votre propre classe qui hérite d'un *namedtuple* afin de lui ajouter de nouvelles méthodes « maison ».

Chunk id: 371
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1311-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.1 Définition
Content:
Dans la section suivante, nous allons examiner les différentes propriétés des containers. A la fin de ce chapitre, nous ferons un tableau récapitulatif de ces propriétés.

Chunk id: 952
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1635-la-methode-findall
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.5 La méthode `.findall()`
Content:
```python
>>> regex = re.compile("[0-9]+\.[0-9]+")
>>> resultat = regex.findall("pi vaut 3.14 et e vaut 2.72")
>>> resultat
['3.14', '2.72']
```

Chunk id: 857
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
- Le programme lit un fichier ligne par ligne.
- Pour chaque ligne lue, si l'expression régulière passée en argument est retrouvée dans la ligne, alors le programme effectue une action.

Chunk id: 843
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
de ce chapitre, nous utiliserons souvent le mot *regex* pour désigner une expression régulière. Les expressions régulières sont puissantes et incontournables en bioinformatique, spécialement lorsque

Chunk id: 3180
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
comme *Atom*, *Visual Studio Code*, *Sublime Text*, *emacs*, *vim*, *geany*... utilisez-les !

Chunk id: 1227
Number of Tokens: 91
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1151-nombres-pairs-compris-entre-0-et
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.1 Nombres pairs compris entre 0 et 30
Content:
### 11.5.1 Nombres pairs compris entre 0 et 30  
```python
>>> print([i for i in range(31) if i % 2 == 0])
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
```

Chunk id: 1320
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
méthodes ou attributs destinés au fonctionnement interne de l'objet. Nous reviendrons sur certains d'entre-eux dans la suite.

Chunk id: 2309
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
8. On nous pose souvent la question du type de guillemets à utiliser pour déclarer une chaîne de caractères. Simples ou doubles ?

Chunk id: 76
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
...     x = x + 1
...
>>> x = 1
>>> ma_fonction()
>>> x
2
```  
Dans ce dernier cas, le mot-clé `global` a forcé la variable `x` à être globale plutôt que locale au sein de la fonction.

Chunk id: 4658
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 4. On crée un constructeur, c'est-à-dire une méthode qui sera exécutée lors de l'instanciation de notre classe (à la ligne 16).

Chunk id: 312
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Traceback (most recent call last):
File "compte_lignes.py", line 8, in <module>
with open(nom_fichier, "r") as f_in:
FileNotFoundError: [Errno 2] No such file or directory: 'zoo3.txt'
```

Chunk id: 1530
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
de bien le comprendre lorsqu'on étudie les classes. Nous avons déjà croisé ce concept à plusieurs reprises. D'abord dans le chapitre 12 *Plus sur les fonctions*, puis dans le chapitre 14 *Création de

Chunk id: 2202
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
recommande un certain nombre de règles afin qu'un code soit lisible. Lisible par quelqu'un d'autre, mais également, et surtout, par soi-même. Essayez de relire un code que vous avez écrit «

Chunk id: 2945
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
est mise dans un espace de la mémoire nommé *Global frame*, il s'agit de l'espace du programme principal. Dans cet espace, seront stockées toutes les variables *globales* créées dans le programme.

Chunk id: 1013
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1645-le-defi-du-de-htmliseur-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.5 Le défi du dé-htmliseur (exercice +++)
Content:
Le format HTML permet d'afficher des pages web dans un navigateur. Il s'agit d'un langage à balise qui fonctionne avec des balises ouvrantes `<balise>` et des balises fermantes `</balise>`.

Chunk id: 1000
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
Téléchargez le fichier [`human-proteome.fasta`](https://python.sdv.univ-paris-diderot.fr/data-files/human-proteome.fasta) qui contient le protéome humain, c'est-à-dire les séquences de l'ensemble des

Chunk id: 1256
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1165-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.5 Séquence d'ADN aléatoire 2
Content:
Créez une fonction `seq_alea_2()` qui prend comme argument un entier et quatre *floats* représentant respectivement la longueur de la séquence et les pourcentages de chacune des 4 bases A, T, G et C.

Chunk id: 2342
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Lignes 8 et 9. On indique le nom et le type du paramètre séparés par le caractère deux-points. Le type n'est pas obligatoire. En dessous, on indique une description du paramètre en question. La

Chunk id: 158
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
Les développeurs de Python ont mis au point de nombreux modules qui effectuent une quantité phénoménale de tâches. Pour cette raison, prenez toujours le réflexe de vérifier si une partie du code que

Chunk id: 2397
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
(ligne 6 et colonne 29 du script). La ligne du script qui pose problème est affichée, ce qui est pratique.

Chunk id: 2077
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
[*namedtuples*](https://docs.python.org/fr/3/library/collections.html#collections.namedtuple) sont faits pour vous ! Ce type de container est issu du très utile module *collections* que nous avions

Chunk id: 898
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
à maîtriser. Faites particulièrement attention aux métacaractères `.`, `+` et `*` qui, combinés ensemble, peuvent donner des résultats ambigus.

Chunk id: 195
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```  
Dans cet exemple, les fonctions du module *random* sont accessibles via l'alias `rand`.  
Enfin, pour vider de la mémoire un module déjà chargé, on peut utiliser l'instruction `del` :

Chunk id: 2998
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
: il est possible de mettre directement au sein des accolades un appel à une fonction (ici `{calc_factorielle(nb2)}`) ! Ainsi, pas besoin de créer une variable intermédiaire dans laquelle on stocke

Chunk id: 1473
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
self.couleur = couleur #attribut d'instance
self.taille = taille #attribut d'instance
self.masse = masse #attribut d'instance (masse en gramme)

Chunk id: 3071
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
Dans l'exemple suivant nous allons créer une liste vide :  
```python
>>> a = []
>>> a
[]
```  
puis lui ajouter deux éléments, l'un après l'autre, d'abord avec la concaténation :  
```python

Chunk id: 3397
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
sidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'is
title', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans',

Chunk id: 1769
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
par hasard !), l'orange, le kaki, etc. Chaque fruit a ses propres particularités, mais il y a aussi de nombreux points communs. Nous pourrions donc concevoir une classe `Fruit` permettant, par

Chunk id: 3066
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#42-utilisation
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.2 Utilisation
Content:
```python
>>> animaux[4]
Traceback (innermost last):
File "<stdin>", line 1, in ?
IndexError: list index out of range
```  
N'oubliez pas ceci ou vous risquez d'obtenir des bugs inattendus !

Chunk id: 2370
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
script_quality_not_ok.py:26:21: E225 missing whitespace around operator
script_quality_not_ok.py:31:10: E211 whitespace before '('
```

Chunk id: 4321
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
Python a écrit une phrase complète en remplaçant les variables `x` et `nom` par leur contenu. Vous remarquerez que pour afficher plusieurs éléments de texte sur une seule ligne, nous avons utilisé le

Chunk id: 537
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
### 13.2.11 Fonction `dict()`  
*Conseil* : Pour les débutants vous pouvez sauter cette rubrique.

Chunk id: 1800
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Je viens de créer self.taille, self.masse, self.saveur et self.forme
(3) J'ai fini dans le constructeur de Citron, les attributs sont:
self.taille: petite, self.masse: 50

Chunk id: 3682
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```python
>>> a = np.reshape(range(1, 10), (3, 3))
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> np.savetxt("out.dat", a)
```

Chunk id: 3601
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
listes*). Si l'option `refcheck=False` n'est pas présente, Python peut parfois renvoyer une erreur s'il existe des références vers l'*array* qu'on souhaite modifier.

Chunk id: 387
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
immuable](https://fr.wikipedia.org/wiki/Objet_immuable) (*immutable object* en anglais). Cela signifie qu'une fois créé, Python ne permet plus de le modifier par la suite.

Chunk id: 1078
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
Remarquez toutefois que si vous mélangez les types entiers et *floats*, le résultat est renvoyé comme un *float* (car ce type est plus général). Par ailleurs, l'utilisation de parenthèses permet de

Chunk id: 2097
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
dictionnaires ? Et bien là c'est un peu la même chose entre les *tuples* et les *namedtuples*. Les *namedtuples* permettent de créer un code plus lisible en remplaçant des numéros d'indice par des

Chunk id: 418
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
renvoyé par la fonction `id()`. La valeur de hachage est obtenue en « moulinant » le contenu de l'objet dans une fonction de hachage. L'identifiant est quant à lui attribué par Python à la création

Chunk id: 4471
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
Enfin, si vous souhaitez aller plus loin, voici deux articles (en anglais) très bien faits sur le site *RealPython*: sur l'[écriture formatée](https://realpython.com/python-string-formatting) et sur

Chunk id: 3160
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#12-conseils-pour-installer-et-configurer-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Content:
Pour apprendre la programmation Python, il va falloir que vous pratiquiez et pour cela il est préférable que Python soit installé sur votre ordinateur. La bonne nouvelle est que vous pouvez installer

Chunk id: 427
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
Les objets hachables sont les chaînes de caractères, les entiers, les *floats*, les booléens, les objets de type *range*, les tuples (sous certaines conditions) et les *frozensets* ; par contre, les

Chunk id: 3175
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
L'apprentissage d'un langage informatique comme Python va nécessiter d'écrire des lignes de codes à l'aide d'un éditeur de texte. Si vous êtes débutants, on vous conseille d'utiliser *notepad++* sous

Chunk id: 603
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
2, 3`. Cette syntaxe correspond à un *tuple* de chaque côté de l'opérateur `=`. Notez qu'il serait possible de le faire également avec les listes : `[x, y, z] = [1, 2, 3]`. Toutefois, cette syntaxe

Chunk id: 2962
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
*globale* `resultat`. Notez bien que lorsque Python quitte la fonction, **l'espace des variables alloué à la fonction est détruit**. Ainsi, toutes les variables créées dans la fonction n'existent

Chunk id: 3784
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> a[(a > 3) | (a % 2 == 0)] = 0
>>> a
array([[1, 0, 3],
[0, 0, 0],
[0, 0, 0]])
```

Chunk id: 3158
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
Toutes ces caractéristiques font que Python est désormais enseigné dans de nombreuses formations, du lycée à l'enseignement supérieur.

Chunk id: 2803
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
### 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)

Chunk id: 1456
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
classe `Citron` et on lui passe explicitement l'instance `citron1` en tant qu'argument. La notation `citron1.affiche_message()` contient donc en filigrane un argument, à savoir, la référence vers

Chunk id: 4209
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
sur le site de la PDB ([lien direct vers le fichier](https://files.rcsb.org/download/1BTA.pdb)).

Chunk id: 2040
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
class Citron(builtins.object)
|  Citron(couleur='jaune', taille='standard')
|
|  Voici la classe Citron.
|
|  Il s'agit d'une classe assez impressionnante qui crée des objets
|  citrons.

Chunk id: 3102
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
## 4.7 Les fonctions `range()` et `list()`

Chunk id: 3573
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
peut être assimilé à un **vecteur** et un *array* à deux dimensions à une **matrice**. Nous nous focaliserons dans la suite sur des *arrays* 1D ou 2D.

Chunk id: 3253
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
![Notion d'indentation et de bloc d'instructions.](img/indentation_bloc_instructions.png "Indentation et bloc d'instructions"){ #fig:indentation_bloc_instructions width=70% }

Chunk id: 2317
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
plus exhaustivement dans la [PEP 257](https://www.python.org/dev/peps/pep-0257/) sur la manière de rédiger correctement les *docstrings*. En voici un résumé succinct.

Chunk id: 1270
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
des « attributs » ainsi que des « méthodes » qui agissent sur lui-même. Par exemple, on définit un objet « citron » qui contient les attributs « saveur » et « couleur », ainsi qu'une méthode «

Chunk id: 3144
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
Le langage de programmation Python a été créé en 1989 par Guido van Rossum, aux Pays-Bas. Le nom *Python* vient d'un hommage à la série télévisée *Monty Python's Flying Circus* dont G. van Rossum est

Chunk id: 647
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
Malgré la modification de cette liste, l'identifiant n'a toujours pas changé puisque la fonction `id()` nous renvoie toujours le même depuis le début. Ainsi, nous avons l'explication. Même si la

Chunk id: 423
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
Pourquoi évoquer cette propriété de hachabilité ? D'abord, parce-qu'elle est étroitement liée à l'immutabilité. En effet, un objet non modifiable est la plupart du temps hachable. Cela permet de

Chunk id: 1383
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Étape 2 (voir figure @fig:classe_constructeur2). Nous créons ensuite l'instance `citron1` à partir de la classe `Citron`. Notre classe `Citron` contenant une méthode `.__init__()` (le constructeur),

Chunk id: 4639
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Cette méthode aurait donc également fonctionné ici. Par contre, la méthode `.quit()` n'aurait pas fonctionné dans l'interpréteur car, comme on l'a vu, la boucle `.mainloop()` n'y est pas présente.

Chunk id: 305
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```text
girafe
tigre
singe
souris
```  
et le fichier `zoo2.txt` qui contient :  
```text
poisson
abeille
chat
```  
Utilisons maintenant notre script `compte_lignes.py` :  
```bash

Chunk id: 3376
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
close-box-rem

Chunk id: 4853
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2072-autres-pistes-a-approfondir
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Content:
Si vous souhaitez aller un peu plus loin en *Tkinter*, voici quelques notions / remarques qui pourraient vous être utiles. Pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 3741
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
array([1., 0., 0.])
>>> eigvecs[1]
array([0., 1., 0.])
>>> eigvecs[2]
array([0., 0., 1.])
```  
Lignes 2 et 3. `eigvals` est un *array* 1D  contenant les 3 valeurs propres.

Chunk id: 2829
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
Pour la suite de Fibonacci $(x_n)$, le terme au rang *n* (avec $n > 1$) est la somme des nombres aux rangs $n - 1$ et $n - 2$ :  
$x_n = x_{n-1} + x_{n-2}$

Chunk id: 3216
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
simultanément les touches *Ctrl* et *D* sous Linux et Mac OS X ou *Ctrl* et *Z* puis *Entrée* sous Windows.

Chunk id: 1317
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
>>> citron1.couleur = "jaune"
>>> dir(citron1)
['__class__', '__delattr__', '__dict__', [...], '__weakref__', 'couleur']
>>> citron1.couleur
'jaune'
```

Chunk id: 2777
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#542-boucle-et-jours-de-la-semaine
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.2 Boucle et jours de la semaine
Content:
Écrivez une série d'instructions affichant les jours de la semaine (en utilisant une boucle `for`), ainsi qu'une autre série d'instructions affichant les jours du week-end (en utilisant une boucle

Chunk id: 1922
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
masse = property(fget=get_masse, fset=set_masse)

Chunk id: 420
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
de l'objet. Il est constant tout le le long de la durée de vie de l'objet, un peu comme une carte d'identité. Tout objet a un un identifiant, mais il doit être hachable pour avoir une valeur de

Chunk id: 1524
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
n'a pas de sens de vouloir les modifier ! Il est également déconseillé de créer des attributs de classe avec des objets modifiables comme des listes et des dictionnaires, cela peut avoir des effets

Chunk id: 3700
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
### 17.1.7 Concaténation d'*arrays*

Chunk id: 2954
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
fonction, est créée en tant que variable *locale*. On remarquera aussi que les variables *globales* situées dans le *Global frame* sont toujours là.

Chunk id: 1213
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
d'une tranche `[:]` ou de la fonction `list()` crée des copies explicites. Chaque flèche pointe vers une liste différente, indépendante des autres.

Chunk id: 3313
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
caractères, celui-ci met deux *backslashes* pour signifier qu'il s'agit d'un *backslash* littéral (le premier échappe le second). Finalement, l'utilisation de la syntaxe `r"Voici un retour à la

Chunk id: 2260
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
```python
#code recommandé :
ma_liste[1]
mon_dico{"clé"}
ma_fonction(argument)
#code non recommandé :
ma_liste[ 1 ]
mon_dico{"clé" }
ma_fonction( argument )
```

Chunk id: 1932
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
le modifier, Python appellera la méthode `.set_masse()` (ceci sera valable de l'intérieur ou de l'extérieur de la classe). Comme il n'y a pas de méthode destructeur (passée avec l'argument `fdel`),

Chunk id: 3785
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Ce mécanisme de sélection avec des masques booléens se révèle très puissant pour manipuler des grandes quantités de données. On verra qu'il peut être également utilisé avec les *dataframes* du module

Chunk id: 167
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Nous avons également croisé le module *math* lors de l'exercice sur la spirale (voir chapitre 7 *Fichiers*). Ce module nous a donné accès aux fonctions trigonométriques sinus et cosinus, et à la

Chunk id: 2409
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Usage:
======
python nom_de_ce_super_script.py argument1 argument2

argument1: un entier signifiant un truc
argument2: une chaîne de caractères décrivant un bidule
"""

Chunk id: 3575
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
des matrices. Il s'agit de tableaux de nombres qui sont organisés en lignes et en colonnes comme le montre la figure @fig:array2Dlignescolonnes. Les indices indiqués dans cette figure seront définis

Chunk id: 768
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
De manière générale, tout objet sur lequel on peut faire une double itération du type `for var1, var2 in obj` est utilisable pour créer un dictionnaire de compréhension. Si vous souhaitez aller plus

Chunk id: 3305
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
Un *stringprefix* modifie la manière dont Python va interpréter la dite *string*. Celui-ci doit être systématiquement « collé » à la chaîne de caractères, c'est-à-dire pas d'espace entre les deux.

Chunk id: 1540
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
Parce qu'ils sont chacun dans un espace différent, ils peuvent cohabiter sans risque d'écrasement de l'un par l'autre. Par exemple, à chaque fois que l'on appelle une fonction, un espace de noms est

Chunk id: 2026
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
open-box-adv

Chunk id: 3726
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
[ 6, 11]])
>>> a * a
array([[0, 1],
[4, 9]])
```  
Notez bien que `dot(a, a)` renvoie le **produit matriciel** entre deux matrices, alors que `a * a` renvoie le produit **élément par élément**.

Chunk id: 2737
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
Faites bien attention à ne pas confondre l'**opérateur d'affectation** `=` qui affecte une valeur à une variable et l'**opérateur de comparaison** `==` qui compare les valeurs de deux variables.

Chunk id: 3396
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
mat_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'i
sidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'is

Chunk id: 2498
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
Dans cet exemple, Python teste la première condition, puis, si et seulement si elle est fausse, teste la deuxième et ainsi de suite... Le code correspondant à la première condition vérifiée est

Chunk id: 4570
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#204-prise-en-main-du-module-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Content:
## 20.4 Prise en main du module *Tkinter*

Chunk id: 740
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
close-box-adv

Chunk id: 4102
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
### 17.5.3 Statistiques descriptives et table de comptage  
Pour les colonnes qui contiennent des données numériques, on peut obtenir

Chunk id: 2583
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
open-box-rem

Chunk id: 99
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
Lorsque Python rencontre une variable, il va traiter la résolution de son  nom avec des priorités particulières. D'abord il va regarder si la variable est **locale**, puis si elle n'existe pas

Chunk id: 649
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
si la liste a été modifiée « de l'intérieur », Python considère que c'est toujours la même liste puisqu'elle n'a pas changé d'identifiant. Si au contraire on essaie de remplacer cette sous-liste par

Chunk id: 2788
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#547-triangle
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.7 Triangle
Content:
### 5.4.7 Triangle  
Créez un script qui dessine un triangle comme celui-ci :  
```text
*
**
***
****
*****
******
*******
********
*********
**********
```

Chunk id: 533
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13210-liste-de-dictionnaires
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.10 Liste de dictionnaires
Content:
### 13.2.10 Liste de dictionnaires  
En créant une liste de dictionnaires qui possèdent les mêmes clés, on obtient une structure qui ressemble à une base de données :  
```python

Chunk id: 1907
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
que des *deleters* ou encore destructeurs en français). Pour faire cela, on utilise la fonction Python interne `property()` qui crée un objet (ou instance) `property` :

Chunk id: 1761
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',
'__setattr__', '__sizeof__', '__str__', '__subclasshook__']
```

Chunk id: 747
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1351-objets-sequentiels
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.1 Objets séquentiels
Content:
| tuple                 | oui                                     | oui      | oui     | oui       | non        | oui$^*$  |  
$^*$ s'il ne contient que des objets hachables

Chunk id: 1250
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1163-sequence-dadn-complementaire-inverse
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.3 Séquence d'ADN complémentaire inverse
Content:
Créez une fonction `comp_inv()` qui prend comme argument une séquence d'ADN sous la forme d'une chaîne de caractères, qui renvoie la séquence complémentaire inverse sous la forme d'une autre chaîne

Chunk id: 3007
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#983-pyramide
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.3 Pyramide
Content:
principal demandera à l'utilisateur le nombre de lignes souhaitées (utilisez pour cela la fonction `input()`) et affichera la pyramide à l'écran.

Chunk id: 1830
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
`.affiche_conseil()` définie dans la classe mère sans avoir à la réécrire. Bien sûr cet exemple reste simpliste et n'est qu'une « mise en bouche ». Vous verrez des exemples concrets de la puissance

Chunk id: 3613
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
contenant les même éléments `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`. Dans ce cas, seule la présence ou l'absence de virgules permet de trancher s'il s'agit d'un *array* ou d'une liste.

Chunk id: 522
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
...
b 5
a 15
c 20
```  
Enfin, l'argument `reverse=True` fonctionne également :  
```python
>>> dico = {"a": 15, "b": 5, "c":20}
>>> sorted(dico, key=dico.get, reverse=True)
['c', 'a', 'b']
```

Chunk id: 4455
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
(après les `:` au sein des accolades) est identique avec la méthode `.format()`. Par exemple `{:.2f}`, `{:0>6d}`, `{:.6e}`, etc., fonctionneront de la même manière. La différence notable est qu'on ne

Chunk id: 529
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1329-cle-associee-au-minimum-ou-au-maximum-des-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.9 Clé associée au minimum ou au maximum des valeurs
Content:
### 13.2.9 Clé associée au minimum ou au maximum des valeurs

Chunk id: 4910
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
#### 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`

Chunk id: 3490
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
### 10.8.10 Affichage des carbones alpha d'une structure de protéine

Chunk id: 1384
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
de la classe `Citron`. Notre classe `Citron` contenant une méthode `.__init__()` (le constructeur), celle-ci est immédiatement exécutée au moment de l'instanciation. Cette méthode prend un argument

Chunk id: 2145
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Vous pouvez également créer une nouvelle cellule en positionnant votre curseur dans la première cellule, puis en pressant simultanément les touches *Alt* + *Entrée*. Si vous utilisez cette

Chunk id: 4778
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
fait son côté « nord-ouest » (en haut à gauche, voir [le point ($x_0$, $y_0$) dans la documentation officielle](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/create_oval.html)).

Chunk id: 2639
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Créez un script qui reproduit ce jeu de devinettes. Vous pensez à un nombre entre 1 et 100 et l'ordinateur essaie de le deviner par dichotomie en vous posant des questions.

Chunk id: 4868
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
Dans les exemples montrés dans ce chapitre, nous avons systématiquement utiliser la méthode `.pack()` pour placer les *widgets*. Cette méthode très simple et directe « empaquette » les *widgets* les

Chunk id: 1486
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
directement dans les attributs de la classe `Citron` lors de sa définition et les trois variables d'instance `couleur`, `taille` et `masse` qui sont liées à l'instance `citron1`. Pour autant, on voit

Chunk id: 632
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
```python
>>> l1 = [1, 2, 3]
>>> t = (l1, "Plouf")
>>> t
([1, 2, 3], 'Plouf')
>>> l1[0] = -15
>>> t[0].append(-632)
>>> t
([-15, 2, 3, -632], 'Plouf')
```

Chunk id: 2695
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
Contrairement à la création de liste avec `list(range(4))`, la fonction `range()` peut être utilisée telle quelle dans une boucle. Il n'est pas nécessaire de taper `for i in list(range(4)):` même si

Chunk id: 1654
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Lignes 18 à 21. On crée une instance de chaque classe, et on utilise la fonction `print()` pour voir leur contenu.  
L'exécution de ce code affichera la sortie suivante :  
```python

Chunk id: 1715
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
d'arguments et/ou leur type (la surcharge n'est pas supportée par Python contrairement à d'autres langages orientés objet).

Chunk id: 2170
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
## 18.4 Des graphiques dans les notebooks  
Un autre intérêt des notebooks Jupyter est de pouvoir y incorporer des graphiques réalisés avec la bibliothèque *matplotlib*.

Chunk id: 4742
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Ligne 26 à 28. Cette méthode renvoie une couleur au hasard sous forme de chaîne de caractères.

Chunk id: 584
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
### 13.3.2 Itérations sur plusieurs valeurs à la fois

Chunk id: 4115
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
moyennes des transferrines :  
```python
>>> df.groupby(["Source"]).mean()
Length            MW
Source
Anas platyrhynchos     686.000000  75731.800000
Gallus gallus          509.300000  56324.080000

Chunk id: 4927
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
```python
>>> import tkinter as tk
>>> bouton = tk.Button(text="Quitter")
>>> bouton.pack()
```

Chunk id: 3238
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
`print("Hello world!")`  
Ensuite, enregistrez votre fichier sous le nom `test.py`, puis quittez l'éditeur de texte.  
open-box-rem  
L'extension de fichier standard des scripts Python est `.py`.

Chunk id: 194
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
>>> import random as rand
>>> rand.randint(1, 10)
6
>>> rand.uniform(1, 3)
2.643472616544236
```  
Dans cet exemple, les fonctions du module *random* sont accessibles via l'alias `rand`.

Chunk id: 3851
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'30391296', '30390672']
>>> len(res_esearch["IdList"])
20
```  
Cette liste ne contient les identifiants que de 20 publications alors que si nous

Chunk id: 1661
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
- `.__repr__()` : redéfinit le message obtenu lorsqu'on tape le nom de l'instance dans l'interpréteur ;
- `.__add__()` : redéfinit le comportement de l'opérateur `+` ;

Chunk id: 1699
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
En revenant à notre exemple, une instance de la classe `Fille` sera automatiquement une instance de la classe `Mere`. Regardons dans l'interpréteur :  
```python
>>> fille = Fille()

Chunk id: 844
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
expressions régulières sont puissantes et incontournables en bioinformatique, spécialement lorsque vous souhaitez récupérer des informations dans de gros fichiers.

Chunk id: 150
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1272-passage-de-liste-a-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.2 Passage de liste à une fonction
Content:
Créez une fonction `ajoute_nb_alea()` qui prend en argument une liste et qui ajoute un nombre entier aléatoire entre -10 et 10 (inclus) à chaque élément. La fonction affichera à l'écran cette

Chunk id: 2698
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
[cela](https://docs.python.org/fr/3/library/stdtypes.html#typesseq-range), c'est-à-dire que l'on peut itérer directement dessus. Pour Python, il s'agit d'un nouveau type, par exemple dans

Chunk id: 1935
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Ligne 4. Si vous avez bien suivi, cette commande `self.masse = masse` dans le constructeur va appeler automatiquement la méthode `.set_masse()`. Attention, dans cette commande, la variable `masse` à

Chunk id: 4297
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#chargement-du-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.1 Chargement du jeu de données
Content:
Ouvrez ce fichier avec *pandas* et la fonction `.read_csv()`. N'oubliez pas de préciser le séparateur par défaut avec l'argument `sep="\t"`. Utilisez également l'argument `index_col` pour utiliser la

Chunk id: 2057
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
>>> print(citron1.affiche_coucou.__doc__)
Méthode inutile qui affiche coucou.
```

Chunk id: 2562
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#674-frequence-des-acides-amines
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.4 Fréquence des acides aminés
Content:
### 6.7.4 Fréquence des acides aminés  
La liste ci-dessous représente une séquence d'acides aminés :  
`["A", "R", "A", "W", "W", "A", "W", "A", "R", "W", "W", "R", "A", "G"]`

Chunk id: 2056
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Il s'agit d'une classe assez impressionnante qui crée des objets
citrons.
Par défaut une instance de Citron contient l'attribut de classe
saveur.

Chunk id: 879
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `A(CG)+T` est retrouvée dans `ACGT`, `ACGCGT`... mais pas dans `AT`.  
`?`  
:   0 à 1 fois le caractère précédent ou l'expression entre parenthèses précédente.

Chunk id: 3289
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
Il existe certains caractères spéciaux comme `\n` que nous avons déjà vu (pour le retour à la ligne). Le caractère `\t` produit une tabulation. Si vous voulez écrire des guillemets simples ou doubles

Chunk id: 1841
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
[Bob Cordeau et Laurent Pointal](https://perso.limsi.fr/pointal/python:courspython3), et [Vincent Legoff](https://openclassrooms.com/fr/courses/235344-apprenez-a-programmer-en-python).

Chunk id: 1358
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
une classe, on saute toujours une ligne entre elles afin de faciliter la lecture (comme pour les fonctions).

Chunk id: 2380
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
D200: One-line docstring should fit on one line with quotes (found 2)
script_quality_not_ok.py:7 in public function `Multiplie_nombres`:

Chunk id: 2584
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
1. Pour cet exercice, vous avez besoin de faire un nombre d'itérations inconnu pour que la suite de Syracuse atteigne le chiffre 1 puis entame son cycle trivial. Vous pourrez tester votre algorithme

Chunk id: 1722
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
dans la classe `Fille`. S'il ne trouve pas, il cherchera ensuite dans la première classe mère (`Mere1` dans notre exemple). S'il ne trouve pas, il cherchera dans les ancêtres de cette première mère

Chunk id: 4391
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
en colonnes parfaitement alignées. Nous verrons que ceci est très pratique si l'on veut écrire les coordonnées des atomes d'une molécule au format PDB (pour en savoir plus sur ce format,

Chunk id: 3687
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
On voit que la fonction écrit par défaut les données comme des *floats* en notation scientifique. Bien sûr il existe de nombreuses [options

Chunk id: 2212
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
open-box-def

Chunk id: 4198
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
close-box-more

Chunk id: 4352
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
Une variable est utilisable plus d'une fois pour une *f-string* donnée :  
```python
>>> var = "to"
>>> print(f"{var} et {var} font {var}{var}")
to et to font toto
>>>
```  
close-box-rem

Chunk id: 3146
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
La dernière version de Python est la version 3. Plus précisément, la version 3.11 a été publiée en octobre 2022. La version 2 de Python est obsolète et n'est plus maintenue, évitez de l'utiliser.

Chunk id: 872
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`[A-Za-z0-9]`  
:   N'importe quel caractère alphanumérique.  
`[^AB]`  
:   N'importe quel caractère sauf A et B.

Chunk id: 1269
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
structurer ses programmes d'une manière nouvelle. En POO, on définit un « objet » qui peut contenir des « attributs » ainsi que des « méthodes » qui agissent sur lui-même. Par exemple, on définit un

Chunk id: 3608
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Nous avons déjà indiqué que Python affiche systématiquement le mot *array* ainsi que les parenthèses, crochets et virgules pour séparer les éléments. Attention toutefois si vous utilisez la fonction

Chunk id: 2903
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
>>> fois(2, 3)
6
>>> fois(2)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: fois() missing 1 required positional argument: 'y'
```

Chunk id: 2339
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Avec une description plus longue.
Sur plusieurs lignes.

Chunk id: 1997
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
>>> citron.masse = 16
Coucou je suis dans le set
>>> citron.masse
Coucou je suis dans le get
16
>>> citron._masse
16
>>> citron._masse = -8364
>>> citron.masse
Coucou je suis dans le get
-8364
>>>

Chunk id: 976
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
`\\1`. Dans cet exemple, on capture donc le mot `panpan` (lignes 1 et 2). Si, par contre, on a une seule occurrence du mot `pan`, cette *regex* ne fonctionne pas, ce qui est le cas ligne 3.

Chunk id: 4032
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
et Strasbourg) le nombre d'animaux. On remarque d'ores et déjà qu'il y a des singes à Lyon et Paris mais pas de lapin et qu'il y a des lapins à Nantes et Strasbourg mais pas de singe. Nous allons

Chunk id: 3751
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
[2 5 8] <class 'numpy.ndarray'>
[3 6 9] <class 'numpy.ndarray'>
```  
À chaque itération, la variable `col` est un *array* 1D correspondant à chaque colonne de `a`.

Chunk id: 2273
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
### 15.1.5 Longueur de ligne  
Une ligne de code ne doit pas dépasser 79 caractères, pour des raisons tant historiques que de lisibilité.

Chunk id: 3634
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
```python
>>> a = np.array([[1, 2], [3, 4]])
>>> a
array([[1, 2],
[3, 4]])
>>> a[:,0]
array([1, 3])
>>> a[0,:]
array([1, 2])
>>> a[1, 1]
4
```

Chunk id: 3852
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
20
```  
Cette liste ne contient les identifiants que de 20 publications alors que si nous
faisons cette même requête directement sur le site de PubMed depuis un navigateur

Chunk id: 912
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
un motif, c'est-à-dire une *regex*, au sein d'une chaîne de caractères avec une syntaxe de la forme `search(motif, chaine)`. Si `motif` est retrouvé dans `chaine`, Python renvoie un objet du type

Chunk id: 1091
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
L'opérateur de multiplication `*` entre un nombre entier et une chaîne de caractères duplique (répète) plusieurs fois une chaîne de caractères.  
open-box-warn

Chunk id: 3925
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
le maximum (`max(temps)`) de la variable `temps`. Dans notre exemple, nous générons une liste de 50 valeurs. La variable `x` ainsi créée est du type *array*.

Chunk id: 3889
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#173-module-matplotlib
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Content:
## 17.3 Module *matplotlib*

Chunk id: 4981
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
1 et 240 inclus). Il y aura un bouton « Lancer » pour démarrer le compte à rebours et un boutton « Quitter » au cas où on veuille quitter avant la fin. À la fin du rebours, le programme affichera 10

Chunk id: 1357
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
les deux prochaines rubriques la signification de ce `self`. Si on a plusieurs méthodes dans une classe, on saute toujours une ligne entre elles afin de faciliter la lecture (comme pour les

Chunk id: 5000
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
vous conseillons de bien étudier le code ci-dessous et d'avoir résolu l'exercice précédent avant de vous lancer !

Chunk id: 3059
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
>>> mixte = ["girafe", 5, "souris", 0.15]
>>> animaux
['girafe', 'tigre', 'singe', 'souris']
>>> tailles
[5, 2.5, 1.75, 0.15]
>>> mixte
['girafe', 5, 'souris', 0.15]
```

Chunk id: 4825
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
Jusqu'à maintenant nous avons vu les *widgets* *Button*, *Canvas*, *Label*, mais il en existe bien d'autres. En voici la liste avec une brève explication pour chacun :

Chunk id: 1088
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
### 2.5.2 Opérations sur les chaînes de caractères  
Pour les chaînes de caractères, deux opérations sont possibles, l'addition et la multiplication :  
```python
>>> chaine = "Salut"
>>> chaine

Chunk id: 4047
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
[ici](https://python.sdv.univ-paris-diderot.fr/data-files/transferrin_report.csv)
contient une liste de structures de la [transferrine](https://fr.wikipedia.org/wiki/Transferrine).

Chunk id: 2398
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Lignes 6 à 8. `pylint` identifie un espace de trop après le second paramètre de la fonction `Multiplie_nombres()`.  
Ligne 9 à 11. Il y a un espace de trop entre `print` et `(`.

Chunk id: 3913
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
On sait par ailleurs que l'évolution de la concentration du produit en fonction du temps peut-être modélisée par la fonction $f(x) = 2 + 3 \times x$. Représentons ce modèle avec les points

Chunk id: 2261
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
#code non recommandé :
ma_liste[ 1 ]
mon_dico{"clé" }
ma_fonction( argument )
```  
Ni juste avant la parenthèse ouvrante d'une fonction ou le crochet ouvrant d'une liste ou d'un dictionnaire :

Chunk id: 4416
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
Les possibilités offertes par les *f-strings* sont nombreuses. Pour vous y retrouver dans les différentes options de formatage, nous vous conseillons de consulter ce

Chunk id: 3067
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
## 4.3 Opération sur les listes  
Tout comme les chaînes de caractères, les listes supportent l'opérateur `+` de concaténation, ainsi que l'opérateur `*` pour la duplication :  
```python

Chunk id: 3791
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
```python
>>> import random as rd
>>> import numpy as np
>>> a = np.resize([rd.random() for i in range(16)], (4,
4))
>>> a
array([[0.58704728, 0.50212977, 0.70652863, 0.24158108],

Chunk id: 1478
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Lignes 6 à 8. Nous créons trois variables d'instance qui seront spécifiques à chaque instance (disons que la taille, la couleur et la masse d'un citron peuvent varier !), avec des valeurs par défaut.

Chunk id: 2076
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
containers inertes, on les conçoit en général afin d'y créer aussi des méthodes. Dans ce cas, les [*namedtuples*](https://docs.python.org/fr/3/library/collections.html#collections.namedtuple) sont

Chunk id: 2271
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
Enfin, on n'ajoute pas plusieurs espaces autour du `=` ou des autres opérateurs pour faire joli :  
```python
#code recommandé :
x1 = 1
x2 = 3
x_old = 5
#code non recommandé :
x1    = 1
x2    = 3

Chunk id: 3517
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
la position du début et de fin du gène. Attention à bien les convertir en entier afin de pouvoir calculer la longueur du gène. Notez que les caractères `>` et `<` doivent être ignorés, et les `..`

Chunk id: 2672
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
toutes les instructions que Python répétera à chaque itération de la boucle. On appelle ce bloc d'instructions le **corps de la boucle**. Comment indique-t-on à Python où ce bloc commence et se

Chunk id: 560
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
10). De manière générale, Python renverra un message `TypeError: '[...]' does not support item assignment` lorsqu'on essaie de modifier un élément d'un objet non modifiable.   Si vous voulez ajouter

Chunk id: 4531
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
derrière les autres (avec bien sûr de possibles appels à des fonctions). Avec une GUI, l'exécution est décidée par l'utilisateur en fonction de ses interactions avec les différents *widgets*. Comme

Chunk id: 3332
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> x = "girafe"
>>> x.upper()
'GIRAFE'
>>> x
'girafe'
>>> 'TIGRE'.lower()
'tigre'
```

Chunk id: 4134
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```python
>>> import matplotlib.pyplot as plt
>>> plt.scatter(df["Length"], df["MW"])
<matplotlib.collections.PathCollection object at 0x7f62c2501780>

Chunk id: 4163
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
et les dernières structures de transferrines ont été déposées dans la PDB.  
La méthode `.pivot_table()` apporte un élément de réponse :  
```python

Chunk id: 3914
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
peut-être modélisée par la fonction $f(x) = 2 + 3 \times x$. Représentons ce modèle avec les points expérimentaux et sauvegardons le graphique obtenu sous forme d'une image :

Chunk id: 587
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
```python
>>> for indice, element in enumerate([75, -75, 0]):
...     print(indice, element)
...
0 75
1 -75
2 0
>>> for bidule in enumerate([75, -75, 0]):
...     print(bidule, type(bidule))
...

Chunk id: 1786
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
forme="ellipsoïde", masse=50)
print(citron1)
```  
Lignes 1 à 9. On crée la classe `Fruit` avec son constructeur qui initialisera tous les attributs d'instance décrivant le fruit.

Chunk id: 2881
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
des fonctions internes à Python qui prenaient au moins 2 arguments. Souvenez-vous par exemple de `range(1, 10)` ou encore `range(1, 10, 2)`. Le nombre d'argument est donc laissé libre à l'initiative

Chunk id: 3704
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
```python
>>> a1 = np.array((0, 1))
>>> a2 = np.array((3, 4))
>>> a1
array([0, 1])
>>> a2
array([3, 4])
>>> np.concatenate((a1, a2))
array([0, 1, 3, 4])
>>> np.concatenate((a2, a1))

Chunk id: 610
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
close-box-rem  
Nous avions croisé l'importance de l'affectation multiple dans le chapitre 9 *Fonctions* lorsqu'une fonction renvoyait plusieurs valeurs.  
```python
>>> def ma_fonction():

Chunk id: 3839
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
```python
>>> from Bio import Entrez
>>> Entrez.email = "votremail@provider.fr"
>>> req_esearch = Entrez.esearch(db="pubmed", term="transferrin")
>>> res_esearch = Entrez.read(req_esearch)
```

Chunk id: 1663
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Si on conçoit une classe produisant des objets séquentiels (comme des listes ou des *tuples*), il existe des méthodes magiques telles que :

Chunk id: 854
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
- Les caractères dits *normaux*.
- Les *métacaractères* ayant une signification particulière, par exemple le caractère `^` signifie début de ligne et non pas le caractère « chapeau » littéral.

Chunk id: 3187
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#13-notations-utilisees
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.3 Notations utilisées
Content:
Par ailleurs, dans le cas de programmes, de contenus de fichiers ou de résultats trop longs pour être inclus dans leur intégralité, la notation `[...]` indique une coupure arbitraire de plusieurs

Chunk id: 456
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
un dictionnaire est toujours affiché dans le même ordre que celui utilisé pour le remplir. De même, si on itère sur un dictionnaire, cet ordre est respecté. Ce détail provient de l'implémentation

Chunk id: 2448
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
qui se passe. Par exemple, une séquence de 1000 bases est plus facile à gérer que le génome humain ! Cela vous permettra également de retrouver plus facilement une erreur lorsque votre programme ne

Chunk id: 4861
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
*floats*, et `tk.IntVar` pour les entiers. Une fois créée, par exemple avec l'instruction `var = tk.StringVar()`, on peut modifier la valeur d'une variable de contrôle avec la méthode

Chunk id: 1875
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
principal suivant (notez que nous avons simplement ajouter les lignes 9 à 12 ci-dessous) :

Chunk id: 2472
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
- Les articles [*Assimilez les bonnes pratiques de la PEP 8*](https://openclassrooms.com/fr/courses/4425111-perfectionnez-vous-en-python/4464230-assimilez-les-bonnes-pratiques-de-la-pep-8) du site

Chunk id: 4756
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
- clic central: relance la baballe (depuis le  point du clic)
dans une direction aléatoire
- touche Esc: quitte l'appli baballe
"""

Chunk id: 375
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
```python
>>> l = [1, 2, 3]
>>> 1 in l
True
>>> "to" in "toto"
True
```  
- Capacité à supporter la fonction `len()` renvoyant la longueur du container.

Chunk id: 1332
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
donnée, et d'une instance à l'autre il ne prendra pas forcément la même valeur. On peut retrouver tous les attributs d'instance d'une instance donnée avec une syntaxe `instance.__dict__`.

Chunk id: 227
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
Il existe une série de modules que vous serez probablement amenés à utiliser si vous programmez en Python. En voici une liste non exhaustive. Pour la liste complète, reportez-vous à [la page des

Chunk id: 572
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
Autre particularité des tuples, il est possible de les créer sans les parenthèses, dès lors que ceci ne pose pas d'ambiguïté avec une autre expression :  
```python
>>> t = (1, 2, 3)
>>> t
(1, 2, 3)

Chunk id: 4087
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
```python
>>> df.info(memory_usage="deep")
<class 'pandas.core.frame.DataFrame'>
Index: 41 entries, 1A8E to 6CTC
Data columns (total 4 columns):
#Column        Non-Null Count  Dtype

Chunk id: 2651
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
par l'ordinateur, soit le caractère `=` si le nombre choisi est celui proposé par l'ordinateur (en appuyant ensuite sur la touche *Entrée*).

Chunk id: 3994
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
>>> df
Paris  Lyon  Nantes  Pau
chat       10    11      12   13
singe      20    21      22   23
souris     30    31      32   33
```

Chunk id: 4799
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
de `.after()`. C'est comme si on avait un `return`, tout l'espace mémoire alloué à la méthode `.move()` est détruit lorsque Python rencontre la méthode `.after()`. On obtiendrait un résultat

Chunk id: 2175
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
open-box-rem  
Pour quitter l'interface des notebooks Jupyter, il faut, dans le premier onglet qui est apparu, cliquer sur le bouton *Quit* (figure @fig:jupyter-interface).

Chunk id: 1921
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
def set_masse(self, valeur):
print("Coucou je suis dans le set")
if valeur < 0:
raise ValueError("Un citron ne peut pas avoir"
" de masse négative !")
self._masse = valeur

Chunk id: 929
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
avoir une correspondance avec le début de la chaîne de caractères comme dans la fonction `match()`, vous pouvez toujours utiliser l'accroche de début de ligne `^`. Si vous voulez une correspondance

Chunk id: 211
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
- Pour chercher du texte, tapez le caractère */* puis le texte que vous cherchez puis la touche *Entrée*. Par exemple, pour chercher l'aide sur la fonction `randint()`, tapez `/randint` puis

Chunk id: 3048
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
x.append(float(coords[0]))
y.append(float(coords[1]))
plt.figure(figsize=(8,8))
plt.plot(x, y)
plt.xlabel("x")
plt.ylabel("Distance de sin(x)à l'origine")
plt.savefig("sin2ori.png")
```

Chunk id: 2174
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
`%matplotlib inline`
qui n'est à lancer qu'une seule fois (en général dans la première cellule du notebook) et qui permet l'incorporation de figures dans un notebook Jupyter.  
open-box-rem

Chunk id: 1043
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
## 2.2 Les types de variables

Chunk id: 2745
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
qui est pris en compte (à  chaque caractère correspond un code numérique), on peut donc aussi comparer des caractères spéciaux (comme `#` ou `~`) entre eux. Enfin, on peut comparer des chaînes de

Chunk id: 4673
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
`self`. Par ailleurs, on ne met ni parenthèses ni arguments à `self.quit` car il s'agit d'une fonction *callback* (comme dans la rubrique précédente).

Chunk id: 4346
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
```python
>>> x = 32
>>> nom = "John"
>>> print(f"{nom} a {x} ans")
John a 32 ans
```

Chunk id: 226
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
## 8.4 Quelques modules courants

Chunk id: 4291
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
#enregistrement sur le disque
plt.savefig("distribution_barstar_annee.png", bbox_inches='tight', dpi=200)
```

Chunk id: 3115
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
liste vide. Pour éviter ça, il faudrait, par exemple, préciser un pas de -1 pour obtenir une liste d'entiers décroissants :

Chunk id: 3475
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
Le format GenBank est présenté en détails dans l'annexe A *Quelques formats de données rencontrés en biologie*. Pour cet exercice, vous devez savoir que la séquence démarre après la ligne commençant

Chunk id: 819
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
Les deux fichiers sont au format FASTA.  
Cette méthode vous paraît-elle efficace sur un génome assez gros comme celui d'*Escherichia coli* ?

Chunk id: 3616
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
Chaque *array NumPy* qui est créé possède une multitude de méthodes. Nombre d'entre elles permettent de faire des calculs de base comme `.mean()` pour la moyenne, `.sum()` pour la somme, `.std()`

Chunk id: 3841
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Ligne 2. Lors d'une requête sur le site du NCBI, il est important de définir correctement
la variable `Entrez.email` qui sera transmise au NCBI lors de la requête et qui

Chunk id: 3821
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
- Les [tutoriels](https://numpy.org/numpy-tutorials/index.html) proposés par l'équipe de développement de *NumPy* sont également un excellent moyen de poursuivre votre découverte de  cette

Chunk id: 4564
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
verrez que dans le module *Tkinter* les fonctions *callback* sont incontournables. En effet, on utilise cette construction pour lancer une fonction lors de l'interaction de l'utilisateur avec un

Chunk id: 4473
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
close-box-adv

Chunk id: 1265
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1167-triangle-de-pascal-exercice
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.7 Triangle de Pascal (exercice +++)
Content:
[...]
```  
Déduisez comment une ligne est construite à partir de la précédente. Par exemple, à partir de la ligne 2 (`1 1`), construisez la ligne suivante (ligne 3 : `1 2 1`) et ainsi de suite.

Chunk id: 4551
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
`une_fct(fct_callback("scoubidous"))`.

Chunk id: 3355
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
'girafe singe'
>>> animaux.replace("i", "o")
'gorafe togre'
```  
La méthode `.count()` compte le nombre d’occurrences d'une chaîne de caractères passée en argument :  
```python

Chunk id: 2658
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Pour remédier à cela, il faut utiliser les boucles. Regardez l'exemple suivant :  
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> for animal in animaux:
...     print(animal)
...

Chunk id: 3630
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
### 17.1.4 Indices  
Pour récupérer un ou plusieurs élément(s) d'un objet *array*, vous pouvez utiliser les indices ou les tranches, de la même manière qu'avec les listes :  
```python

Chunk id: 444
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
pas d'objets séquentiels comme les listes ou chaînes de caractères, mais plutôt d'objets dits de correspondance (*mapping objects* en anglais) ou tableaux associatifs. En effet, on accède aux

Chunk id: 105
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
...
>>> x = -15
>>> ma_fonction()
Dans la fonction x vaut  4
>>> print(f"Dans le module principal x vaut {x}")
Dans le module principal x vaut -15
```

Chunk id: 1531
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
D'abord dans le chapitre 12 *Plus sur les fonctions*, puis dans le chapitre 14 *Création de modules*, et maintenant dans ce chapitre. De quoi s'agit-il ?

Chunk id: 2353
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Pour évaluer la qualité d'un code Python, c'est-à-dire sa conformité avec les recommandations de la PEP 8 et de la PEP 257, on peut utiliser des sites internet ou des outils dédiés.

Chunk id: 2132
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
![Création d'un nouveau notebook.](img/jupyter-nouveau-notebook.png "Création d'un nouveau notebook"){ #fig:jupyter-nouveau-notebook width=80% }

Chunk id: 2871
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
```python
>>> res = carre(2)
>>> print(res)
4
```
Ici, le résultat renvoyé par la fonction est stocké dans la variable `res`.

Chunk id: 4342
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
```python
f"Ceci est une chaîne de caractères"
```

Chunk id: 2075
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
ci-dessus, les classes ne sont pas faites pour cela, il n'est pas conseillé de les utiliser comme des containers inertes, on les conçoit en général afin d'y créer aussi des méthodes. Dans ce cas, les

Chunk id: 1925
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
print(f"La masse de notre citron est {citron.masse} g")
#on mange le citron
citron.masse = 25
print(f"La masse de notre citron est {citron.masse} g")
print(citron.__dict__)
```

Chunk id: 3456
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
de caractères) et une séquence de lettres (aussi comme une chaîne de caractères) et qui affiche `Le mot xxx est composable à partir de yyy` si le mot (`xxx`) est composable à partir de la séquence de

Chunk id: 3084
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> animaux[-1]
'souris'
>>> animaux[-2]
'singe'
```

Chunk id: 2073
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Imaginons que l'on souhaite stocker des éléments dans un container, que l'on puisse retrouver ces éléments avec une syntaxe `container.element` et que ces éléments soit non modifiables. On a vu

Chunk id: 4552
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
Dans une telle construction, `fct_callback("scoubidous")` serait d'abord évaluée, puis ce serait la valeur renvoyée par cet appel qui serait passée à `une_fct()` (n'essayez pas sur notre exemple car

Chunk id: 2129
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
![Interface de Jupyter.](img/jupyter-interface.png "Interface de Jupyter"){ #fig:jupyter-interface width=80% }  
Cette interface liste les notebooks Jupyter existants (pour le moment aucun).

Chunk id: 1850
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Cette stratégie d'utiliser uniquement l'interface de la classe pour accéder aux attributs provient des langages orientés objet comme Java et C++. Les méthodes accédant ou modifiant les attributs

Chunk id: 4490
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#365-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.5 Écriture formatée 2
Content:
### 3.6.5 Écriture formatée 2  
Dans un script `percGC.py`, calculez un pourcentage de GC avec l'instruction suivante :  
`perc_GC = ((4500 + 2575)/14800)*100`

Chunk id: 488
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
Ils ne sont pas indexables (on ne peut pas retrouver un élément par indice, par exemple `dico.keys()[0]` renverra une erreur). Si besoin, nous pouvons les transformer en liste avec la fonction

Chunk id: 2548
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
True
>>> abs(var - 0.3) < delta
True
```  
Ici on teste si `var` est compris dans l'intervalle $0.3 \pm delta$. Les deux méthodes mènent à un résultat strictement équivalent :

Chunk id: 21
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
La fonction appelante `calc_vals()` est toujours là (sur un fond blanc) car son exécution n'est pas terminée. Elle est en quelque sorte *figée* dans le même état qu'avant l'appel de `polynome()`, et

Chunk id: 270
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Si vous exécutez ces mêmes lignes de code (depuis l'instruction `random.seed(42)`), il se peut que vous ayez des résultats différents selon la version de Python. Néanmoins, vous devriez

Chunk id: 5006
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
self.listbox.select_set(0)
#Liaison d'une méthode quand clic sur listbox.
self.listbox.bind("<<ListboxSelect>>", self.clic_listbox)

Chunk id: 4088
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Data columns (total 4 columns):
#Column        Non-Null Count  Dtype
---  ------        --------------  -----
0   Source        41 non-null     object
1   Deposit Date  41 non-null     object

Chunk id: 4427
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
la manière conseillée pour mettre en place l'écriture formatée, ces deux anciennes manières, sont encore pleinement compatibles avec les versions modernes de Python.

Chunk id: 2530
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#65-instructions-break-et-continue
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.5 Instructions `break` et `continue`
Content:
```python
>>> for i in range(5):
...     if i == 2:
...         continue
...     print(i)
...
0
1
3
4
```

Chunk id: 927
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
```python
>>> animaux = "tigre "
>>> re.fullmatch("tigre", animaux)
>>> animaux = "tigre"
>>> re.fullmatch("tigre", animaux)
<_sre.SRE_Match object; span=(0, 5), match='tigre'>
```

Chunk id: 4574
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#204-prise-en-main-du-module-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Content:
vous être utiles, à vous ensuite de consulter de la documentation supplémentaire si vous souhaitez aller plus loin (cf. la rubrique *Bibliographie pour aller plus loin*).

Chunk id: 1823
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
nous pourrions créer de nouveaux fruits avec un minimum d'effort. Ceux-ci pourraient hériter de la classe mère `Fruit` à nouveau, et nous n'aurions pas à réécrire les mêmes méthodes pour chaque

Chunk id: 243
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
biomolécules), *matplotlib* (représentations graphiques : courbes, nuages de points, diagrammes en bâtons...), *pandas* (analyse de données)... Ces modules vous serons présentés dans le chapitre 17

Chunk id: 1248
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1162-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.2 Séquence d'ADN aléatoire
Content:
Utilisez cette fonction pour générer aléatoirement une séquence d'ADN de 15 bases.

Chunk id: 653
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
En fait, l'immutabilité selon Python signifie qu'un objet créé doit toujours garder le même identifiant. Cela est valable pour tout objet non modifiable, comme un élément d'un tuple, un caractère

Chunk id: 1569
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
Bien sûr, toutes les variables du programme principal / fonction / méthode appelant ce module sont conservées telles quelles, et on les retrouve intactes lorsque l'exécution de la fonction du module

Chunk id: 926
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
>>>
```  
Il existe également la fonction `fullmatch()` qui renvoie un objet du type `SRE_Match` si et seulement si l'expression régulière correspond **exactement** à la chaîne de caractères.

Chunk id: 4777
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
baballe. À noter, les coordonnées `self.x` et `self.y` de la baballe représentent en fait son côté « nord-ouest » (en haut à gauche, voir [le point ($x_0$, $y_0$) dans la documentation

Chunk id: 1567
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
Lignes 12 et 13. De retour dans notre programme principal, les variables `i` et `j` existent toujours et n'ont pas été modifiées par l'exécution de fonctions du module `mod.py`.

Chunk id: 2264
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
On met un espace après les caractères `:` et `,` (mais pas avant) :  
```python
#code recommandé :
ma_liste = [1, 2, 3]
mon_dico = {"clé1": "valeur1", "clé2": "valeur2"}

Chunk id: 3019
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#986-distance-3d
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.6 Distance 3D
Content:
On rappelle que la distance euclidienne *d* entre deux points A et B de coordonnées cartésiennes respectives $(x_A, y_A, z_A)$ et $(x_B, y_B, z_B)$ se calcule comme suit :  
$$

Chunk id: 2991
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
#programme principal
z = 5
resultat = carre(z)
print(resultat)
```  
Analysez ensuite le code suivant et tentez de prédire sa sortie :  
```python
def calc_factorielle(n):
fact = 1

Chunk id: 4959
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
- Le [livre](https://github.com/Dvlv/Tkinter-By-Example) de David Love *Learn Tkinter By Example* qui montre des exemples concrets d'applications *Tkinter* de plus en plus complexes (pdf en libre

Chunk id: 580
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
Les listes, les dictionnaires et les tuples sont des containers, c'est-à-dire qu'il s'agit d'objets qui contiennent une collection d'autres objets. En Python, on peut construire des listes qui

Chunk id: 319
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
```python
>>> import os
>>> os.getcwd()
'/home/pierre'
```  
Enfin, la fonction `os.listdir()` renvoie le contenu du répertoire depuis lequel est lancé Python :  
```python
>>> import os

Chunk id: 2192
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
Pour obtenir cette interface, lancez la commande suivante depuis un *shell* :  
```bash
$ jupyter lab
```  
Une nouvelle page devrait s'ouvrir dans votre navigateur web et vous devriez

Chunk id: 1594
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
if __name__ == "__main__":
citron1 = Citron()
citron1.affiche_coucou()
affiche_coucou()
```  
Lorsqu'on va exécuter le code, on obtiendra :  
```
Coucou interne !
Coucou externe
Coucou interne !

Chunk id: 2885
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
Python est en effet connu comme étant un langage au « typage dynamique », c'est-à-dire qu'il reconnaît pour vous le type des variables au moment de l'exécution. Par exemple :

Chunk id: 453
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
Jusqu'à la version 3.6 de Python, un dictionnaire était affiché sans ordre particulier. L'ordre d'affichage des éléments n'était pas forcément le même que celui dans lequel il avait été rempli. De

Chunk id: 876
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`*`  
:   0 à *n* fois le caractère précédent ou l'expression entre parenthèses précédente.  
Exemple : la *regex* `A(CG)*T` est retrouvée dans `AT`, `ACGT`, `ACGCGT`...  
`+`

Chunk id: 4543
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.  
Jusqu'à maintenant nous avons toujours appelé les fonctions ou les méthodes de cette manière :  
```python
var = fct(arg1, arg2)

Chunk id: 1898
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
### 19.5.2 La solution : la classe `property`

Chunk id: 378
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
celui utilisé lors de la création ou de la modification du container (si cela est permis) ; ce même ordre est utilisé lorqu'on itère dessus ;

Chunk id: 4911
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
Si vous allez chercher de la documentation supplémentaire sur *Tkinter*, il se peut que vous tombiez sur ce style de syntaxe lorsque vous créez votre classe contenant l'application graphique :

Chunk id: 3193
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#14-introduction-au-shell
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.4 Introduction au *shell*
Content:
avant l'endroit où on entre des commandes. Dans tout cet ouvrage, cette invite est représentée systématiquement par le symbole dollar `$`, et ce quel que soit le système d'exploitation.

Chunk id: 2506
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
avec attention l'indentation des instructions sur la ligne 5, vous remarquerez que dans le code 1, l'instruction est indentée deux fois, ce qui signifie qu'elle appartient au bloc d'instructions du

Chunk id: 4125
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Gallus gallus            328  36105.8    686  75957.1
Homo sapiens             327  36214.2    691  76250.2
Oryctolagus cuniculus    304  33548.1    676  74891.1

Chunk id: 3946
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Lignes 13 à 15. On définit les légendes des axes et le titre du graphique. On insère un retour à la ligne `\n` dans le titre pour qu'il soit réparti sur deux lignes.

Chunk id: 1981
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
Certains détracteurs disent qu'il est parfois difficile de déterminer qu'un attribut est contrôlé avec un objet *property*. La réponse à cela est simple, dites-le clairement dans la documentation de

Chunk id: 4431
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
La deuxième manière avec la méthode `.format()` est encore largement utilisée et reste tout à fait valide. Elle est clairement plus puissante et évite un certain nombre de désagréments par rapport à

Chunk id: 2774
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#541-boucles-de-base
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.1 Boucles de base
Content:
Soit la liste `["vache", "souris", "levure", "bacterie"]`. Affichez l'ensemble des éléments de cette liste (un élément par ligne) de trois façons différentes (deux méthodes avec `for` et une avec

Chunk id: 897
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Comme vous le constatez, les métacaractères sont nombreux et leur signification est parfois difficile à maîtriser. Faites particulièrement attention aux métacaractères `.`, `+` et `*` qui, combinés

Chunk id: 1599
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
Dans cette rubrique, nous venons de voir une propriété des classes extrêmement puissante : **une classe crée automatiquement son propre espace de noms**. Cela permet d'encapsuler à l'intérieur tous

Chunk id: 2570
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#676-nombres-pairs
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.6 Nombres pairs
Content:
Construisez une boucle qui parcourt les nombres de 0 à 20 et qui affiche les nombres pairs inférieurs ou égaux à 10 d'une part, et les nombres impairs strictement supérieurs à 10 d'autre part.

Chunk id: 1584
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
```  
Lorsqu'on exécutera ce code, on obtiendra :  
```
Dans le programme principal: sucrée, orange
Dans __init__(), vous venez de créer un citron: très acide, jaune foncé

Chunk id: 1493
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
attribut d'instance: jaune
```  
En résumé, qu'on ait des attributs de classe ou d'instance, on peut accéder à eux de l'extérieur par `instance.attribut` et de l'intérieur par `self.attribut`.

Chunk id: 1628
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Prenons un exemple concret de polymorphisme : la fonction Python `sorted()` va trier par ordre ASCII si l'argument est une chaîne de caractères, et elle va trier par ordre croissant lorsque

Chunk id: 4753
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
on contrôle les propriétés à la souris (cf. figure @fig:canvas_anime). Vous pouvez télécharger le script [ici](https://python.sdv.univ-paris-diderot.fr/data-files/tk_baballe.py).

Chunk id: 4889
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
dans ce chapitre : en ligne 4 on passe l'argument `racine` à notre constructeur, puis en ligne 5 on passe ce même argument `racine` lors de l'appel du constructeur de la classe `tk.Frame` (ce qui

Chunk id: 4705
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
`.create_oval()` (dessine une ellipse) et `.create_line()` (dessine une ligne). Les arguments positionnels sont les coordonnées de l'ellipse (les deux points englobant l'ellipse, cf. [ce

Chunk id: 1760
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__',
'__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',

Chunk id: 4600
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
toujours préciser leur nom : par exemple vous écrirez `text="blabla"` et non pas `"blabla"` tout court.

Chunk id: 3641
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
```python
>>> a
array([[1, 2],
[3, 4]])
>>> a[0]
array([1, 2])
>>> a[1]
array([3, 4])
```  
- Pour cette raison, la syntaxe `a[i][j]` est également valide pour récupérer un élément :  
```python

Chunk id: 162
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
N'hésitez pas à explorer un peu ce site, la quantité de modules disponibles est impressionnante (plus de 300).

Chunk id: 337
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#886-sequences-aleatoires-dadn
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.6 Séquences aléatoires d'ADN
Content:
### 8.8.6 Séquences aléatoires d'ADN  
Générez une séquence aléatoire d'ADN de 20 bases de deux manières différentes. Utilisez le module *random* avec la fonction `randint()` ou `choice()`.

Chunk id: 237
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
Nous vous conseillons d'aller explorer les pages de ces modules pour découvrir toutes leurs potentialités.

Chunk id: 3211
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
nouvelle instruction en affichant l'invite de l'interpréteur Python (`>>>`). En résumé, voici ce qui a dû apparaître sur votre écran :

Chunk id: 1178
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
une action mais qui ne renvoie rien. Pensez-y dans vos utilisations futures des listes : même si `var = liste.reverse()` est une instruction Python valide, elle n'a aucun intérêt, préférez-lui

Chunk id: 2369
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
script_quality_not_ok.py:6:30: E231 missing whitespace after ','
script_quality_not_ok.py:6:38: E202 whitespace before ')'
script_quality_not_ok.py:26:21: E225 missing whitespace around operator

Chunk id: 776
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
## 13.7 Module *collections*  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 575
Number of Tokens: 98
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
close-box-rem  
Les opérateurs `+` et `*` fonctionnent comme pour les listes (concaténation et duplication) :  
```python
>>> (1, 2) + (3, 4)
(1, 2, 3, 4)
>>> (1, 2) * 4
(1, 2, 1, 2, 1, 2, 1, 2)

Chunk id: 4891
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Ligne 6. L'argument `racine` passé à la méthode `.__init__()` est finalement une variable locale. Comme il s'agit de l'instance de notre fenêtre principale à passer à tous nos *widgets*, il faut

Chunk id: 180
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
on pourrait penser que `.cos()` est aussi une méthode. En fait la [documentation officielle de Python](https://docs.python.org/fr/3/tutorial/modules.html) précise bien que dans ce cas `.cos()` est

Chunk id: 1261
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1166-le-nombre-mystere
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.6 Le nombre mystère
Content:
### 11.6.6 Le nombre mystère  
Trouvez le nombre mystère qui répond aux conditions suivantes :  
- *Il est composé de 3 chiffres*.
- *Il est strictement inférieur à 300*.
- *Il est pair*.

Chunk id: 4714
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
L'axe des $y$ est inversé par rapport à ce que l'on représente en mathématique. Si on souhaite représenter une fonction mathématique (ou tout autre objet dans un repère régi par un repère

Chunk id: 1058
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
close-box-rem

Chunk id: 4300
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selections
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.2 Sélections
Content:
#### 17.6.6.2 Sélections  
Déterminez la taille de Claire.  
Déterminez l'âge de Baptiste.  
Affichez, en une seule commande, l'âge de Paul et Bob.

Chunk id: 1300
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#191-construction-dune-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Content:
à vous montrer comment les classes fonctionnent mais leur utilisation n'aurait pas de sens dans un vrai programme. Ainsi, nous vous donnerons plus loin dans ce chapitre les pratiques recommandées.

Chunk id: 1102
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#26-la-fonction-type
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.6 La fonction `type()`
Content:
## 2.6 La fonction `type()`  
Si vous ne vous souvenez plus du type d'une variable, utilisez la fonction `type()` qui vous le rappellera.  
```python
>>> x = 2
>>> type(x)
<class 'int'>
>>> y = 2.0

Chunk id: 1690
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
deux classes `Mere1` et `Mere2`. Dans le cas de la classe `Fille2`, on parle d'héritage multiple. Voyons maintenant un exemple concret :

Chunk id: 2557
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#672-sequence-complementaire-dun-brin-dadn
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.2 Séquence complémentaire d'un brin d'ADN
Content:
`["A", "C", "G", "T", "T", "A", "G", "C", "T", "A", "A", "C", "G"]`  
Créez un script qui transforme cette séquence en sa séquence complémentaire.

Chunk id: 1313
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Il est également possible de vérifier qu'une instance est bien issue d'une classe donnée avec la fonction `isinstance()` :  
```python
>>> isinstance(citron1, Citron)
True
```

Chunk id: 1980
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
`instance.attribut = valeur`. Tout cela contribuera à une meilleure maintenance du code client utilisant votre classe.

Chunk id: 2579
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
Par exemple, les premiers éléments de la suite de Syracuse si on prend comme point de départ 10 sont : 10, 5, 16, 8, 4, 2, 1...

Chunk id: 1748
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
On retrouve par exemple `list` ou `str`, mais il y a aussi `object`. Toutefois ces fonctions étant chargées de base dans l'interpréteur, l'importation de `builtins` n'est pas obligatoire : par

Chunk id: 1505
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
À la ligne 7, on pourrait penser qu'on modifie l'attribut de classe `saveur` avec une syntaxe `instance.attribut_de_classe = nouvelle_valeur`. Que se passe-t-il exactement ? La figure

Chunk id: 267
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Ici la graine aléatoire est fixée à 42. Si on ne précise pas la graine, par défaut Python utilise la date. Plus précisément, il s'agit du nombre de secondes écoulées depuis une date donnée du passé.

Chunk id: 4520
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Nous présentons dans ce chapitre le module *Tkinter* qui est présent de base dans les distributions Python (pas besoin *a priori* de faire d'installation de module externe). *Tkinter* permet de

Chunk id: 1751
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
close-box-rem  
En résumé, la syntaxe `class Citron:` sera équivalente à
`class Citron(builtins.object):`
ou à `class Citron(object):`.

Chunk id: 5002
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
class MaListBox(tk.Tk):
def __init__(self):
#Instanciation fenêtre Tk.
tk.Tk.__init__(self)
self.listbox = tk.Listbox(self, height=10, width=4)
self.listbox.pack()

Chunk id: 1369
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
lancée comme une fonction classique par l'utilisateur de la classe. Ce constructeur est exécuté à chaque instanciation de notre classe, et ne renvoie pas de valeur, il ne possède donc pas de

Chunk id: 820
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
### 13.8.5 Atomes carbone alpha d'un fichier PDB

Chunk id: 2123
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
![Exemple de notebook Jupyter. Les chiffres entourés désignent les différentes cellules.](img/jupyter-exemple.png "Exemple de notebook Jupyter"){ #fig:jupyter-exemple width=80% }

Chunk id: 1329
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
{}
```  
Si on crée une nouvelle instance de `Citron`, ici `citron2`, elle n'aura pas l'attribut
`couleur` à sa création.  
open-box-def

Chunk id: 3715
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
Ces opérations de concaténation sont très importantes. On les utilise par exemple si on a des données dans plusieurs fichiers différents et qu'on veut obtenir un *array* unique au final. On verra

Chunk id: 3225
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Si la ligne de code est vraiment très longue, il est même possible de la découper en trois voire plus :

Chunk id: 2061
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
ou si on veut donner des noms aux variables (plutôt qu'un indice), utilisez plutôt les dictionnaires. Une bonne alternative peut être les *namedtuples* (cf. rubrique suivante).

Chunk id: 3386
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
On espère qu'après ce petit tour d'horizon vous serez convaincu de la richesse des méthodes associées aux chaînes de caractères. Pour avoir une liste exhaustive de l'ensemble des méthodes associées à

Chunk id: 4771
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
self.y = mclick.y
self.canv.create_text(self.x, self.y, text="Boom !", fill="red")
self.dx = rd.choice([-30, -20, -10, 10, 20, 30])
self.dy = rd.choice([-30, -20, -10, 10, 20, 30])

Chunk id: 1155
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1111-append
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.1 `.append()`
Content:
```  
qui est équivalent à :  
```python
>>> a = [1, 2, 3]
>>> a = a + [5]
>>> a
[1, 2, 3, 5]
```  
*Conseil* : préférez la version avec `.append()` qui est plus compacte et facile à lire.

Chunk id: 1867
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Lignes 22 à 28. Après instanciation, on affiche la valeur des attributs avec les deux fonctions *getters*, puis on les modifie avec les *setters* et on les réaffiche à nouveau.

Chunk id: 4246
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
par ligne. Nous vous proposons les étapes suivantes pour résoudre cet exercice à l'aide du module *NumPy* :

Chunk id: 3217
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
En résumant, l'interpréteur fonctionne sur le modèle :  
```python
>>> instruction python
résultat
```

Chunk id: 4996
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
Améliorer l'application précédente en proposant une liste de choix supplémentaire demandant à l'utilisateur de choisir le nombre de sommets (de 3 à 10). Le programme calculera automatiquement la

Chunk id: 608
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
affectait des valeurs à plusieurs variables en même temps. Toutefois, vous pourrez rencontrer aussi l'expression *tuple unpacking* que l'on pourrait traduire par « désempaquetage de tuple ». Cela

Chunk id: 1267
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
# 19 Avoir la classe avec les objets

Chunk id: 4164
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
La méthode `.pivot_table()` apporte un élément de réponse :  
```python
>>> df.pivot_table(index="Source", values=["Deposit Date"], aggfunc=[min, max])
min          max
Deposit Date Deposit Date

Chunk id: 4229
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
Le fichier [`temperature.dat`](https://python.sdv.univ-paris-diderot.fr/data-files/temperatures.dat) contient un relevé de 4 températures pour chaque jour de la semaine :  
```text
Lun 12 11 14 12

Chunk id: 3770
Number of Tokens: 92
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> (a > 3) & (a % 2 == 0)
array([[False, False, False],
[ True, False,  True],
[False,  True, False]])
>>> (a > 3) | (a % 2 == 0)

Chunk id: 894
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`[ \t\n\r\f]`. La notion d'espace blanc a été abordée dans le chapitre 10 *Plus sur les chaînes de caractères*. Les espaces blancs les plus classiques sont l'espace ` `, la tabulation `\t`, le retour

Chunk id: 2411
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
import module_interne
import module_interne_2

import module_externe

UNE_CONSTANTE = valeur
UNE_AUTRE_CONSTANTE = une_autre_valeur

Chunk id: 306
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```text
poisson
abeille
chat
```  
Utilisons maintenant notre script `compte_lignes.py` :  
```bash
$ python compte_lignes.py
ERREUR : il faut exactement un argument.

Chunk id: 1338
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
```python
class Citron:
couleur = "jaune"
```  
open-box-def

Chunk id: 3210
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Python a exécuté la commande directement et a affiché le texte `Hello world!`. Il attend ensuite une nouvelle instruction en affichant l'invite de l'interpréteur Python (`>>>`). En résumé, voici ce

Chunk id: 1670
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
if __name__ == "__main__":
citronnier1 = Citronnier(10, 3)
print(citronnier1)
citronnier1(30, 4)
print(citronnier1)
```

Chunk id: 4846
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
d'utiliser les *widgets* *ttk* en priorité, et pour ceux qui n'existent pas dans *ttk*, ceux de *Tkinter* (comme *Canvas* qui n'existe que dans *Tkinter*). Vous pouvez importer le sous-module *ttk*

Chunk id: 3716
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
dans plusieurs fichiers différents et qu'on veut obtenir un *array* unique au final. On verra qu'on peut faire le même genre de chose avec les fameux *dataframes* du module *pandas*. Lisez bien

Chunk id: 4487
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#364-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.4 Écriture formatée
Content:
### 3.6.4 Écriture formatée

Chunk id: 2748
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
Dans ce cas, Python compare les deux chaînes de caractères, caractère par caractère, de la gauche vers la droite (le premier caractère avec le premier, le deuxième avec le deuxième, etc). Dès qu'un

Chunk id: 2711
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
en informatique et indique en général qu'il s'agit d'un entier (le nom `i` vient sans doute du mot indice ou *index* en anglais). Nous vous conseillons de suivre cette convention afin d'éviter les

Chunk id: 2189
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
« [*An open RNA-Seq data analysis pipeline tutorial with an example of reprocessing data from a recent Zika virus study*](https://f1000research.com/articles/5-1574/) » (F1000 Research, 2016).

Chunk id: 3713
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
`a2` à celles de l'*array* `a1`. En ligne 19, on concatène par colonne (`axis=1`). Attention, il vaut bien veiller à ce que la concaténation soit possible en terme de dimensionalité. Par exemple, en

Chunk id: 3574
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Avant de continuer, il est important de définir comment sont organisés ces *arrays* 2D qui représentent des matrices. Il s'agit de tableaux de nombres qui sont organisés en lignes et en colonnes

Chunk id: 3383
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
un séparateur qui peut être n'importe quelle chaîne de caractères. Ici, on a utilisé un tiret, un espace et rien (une chaîne de caractères vide).

Chunk id: 3265
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
à cet ouvrage. D'autres auteurs abordent l'apprentissage de Python d'une autre manière. Nous vous conseillons les ressources suivantes en langue française :

Chunk id: 3983
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
en colonnes sous la forme d'un dictionnaire :  
```python
>>> data = {"a": np.arange(10, 40, 10),
...         "b": np.arange(11, 40, 10),
...         "c": np.arange(12, 40, 10),

Chunk id: 3312
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
un *backslash* littéral suivi d'un *n*. Quand on demande à l'interpréteur d'afficher cette chaîne de caractères, celui-ci met deux *backslashes* pour signifier qu'il s'agit d'un *backslash* littéral

Chunk id: 4555
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
`une_fct(fct_callback)` ? Python passe une référence vers la fonction `fct_callback` (en réalité il s'agit d'un pointeur, mais tout ceci est géré par Python et est transparent pour l'utilisateur).

Chunk id: 3112
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
Enfin, prenez garde aux arguments optionnels par défaut (`0` pour `début` et `1` pour `pas`) :  
```python
>>> list(range(10,0))
[]
```

Chunk id: 417
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
La valeur de hachage d'un objet renvoyée par la fonction `hash()` n'a pas le même sens que son identifiant renvoyé par la fonction `id()`. La valeur de hachage est obtenue en « moulinant » le contenu

Chunk id: 220
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
ype', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '_ac
os', '_ceil', '_cos', '_e', '_exp', '_hexlify', '_inst', '_log', '_pi',

Chunk id: 1007
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
protein 20373 Q96HZ7
```  
*Conseils* :  
- Vous trouverez des explications sur le format FASTA et des exemples de code dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 4478
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
Dans l'exemple suivant :  
```python
>>> "Joe a {} ans".format(20)
'Joe a 20 ans'
```

Chunk id: 65
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
De même, une variable passée en argument est considérée comme **locale** lorsqu'on arrive dans la fonction:  
```python
>>> def ma_fonction(x):
...     print(f"x vaut {x} dans la fonction")
...

Chunk id: 631
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
On a vu que les tuples étaient **non modifiables**. Que se passe-t-il alors si on crée un tuple contenant des objets modifiables comme des listes ? Examinons le code suivant :  
```python

Chunk id: 1224
Number of Tokens: 84
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
```python
>>> [i for i in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> [2 for i in range(10)]
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
```

Chunk id: 428
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
de type *range*, les tuples (sous certaines conditions) et les *frozensets* ; par contre, les listes, les *sets* et les dictionnaires sont non hachables. Les dictionnaires, tuples, *sets* et

Chunk id: 1348
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
à l'extérieur de la classe, la syntaxe générale est `instance.méthode()`. En général, on distingue attributs et méthodes (comme nous le ferons systématiquement dans ce chapitre). Toutefois il faut

Chunk id: 4016
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
```python
>>> df
Paris  Lyon  Nantes  Pau
chat       10    11      12   13
singe      20    21      22   23
souris     30    31      32   33
```

Chunk id: 825
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
- le numéro du résidu (`resid`) avec une valeur entière,
- la coordonnée atomique *x* (`x`) avec une valeur *float*,
- la coordonnée atomique *y* (`y`) avec une valeur *float*,

Chunk id: 328
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#882-cosinus
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.2 Cosinus
Content:
Documentation de la constante `math.pi` :  
<https://docs.python.org/fr/3/library/math.html#math.pi>

Chunk id: 1386
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
`self` : cet argument est **obligatoire**. Il s'agit en fait d'une référence vers l'instance en cours (instance que nous appellerons `citron1` de retour dans le programme principal, mais cela serait

Chunk id: 4053
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
un fichier au format `.csv` :  
```python
>>> df = pd.read_csv("transferrin_report.csv")
```  
Le contenu est chargé sous la forme d'un *dataframe* dans la variable `df`.

Chunk id: 2185
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
open-box-rem  
Le lancement de n'importe quelle commande Unix depuis un notebook Jupyter (en précédant cette commande de `!`) est une fonctionnalité très puissante.

Chunk id: 1721
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
Si on invoque un attribut ou une méthode sur une instance de cette classe, Python cherchera d'abord dans la classe `Fille`. S'il ne trouve pas, il cherchera ensuite dans la première classe mère

Chunk id: 447
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
```python
>>> ani1 = {}
>>> ani1["nom"] = "girafe"
>>> ani1["taille"] = 5.0
>>> ani1["poids"] = 1100
>>> ani1
{'nom': 'girafe', 'taille': 5.0, 'poids': 1100}
```

Chunk id: 480
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
open-box-adv  
Malgré les possibilités offertes, nous vous conseillons de n'utiliser que des chaînes de caractères pour vos clés de dictionnaire lorsque vous débutez.  
close-box-adv

Chunk id: 4266
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#requete-avec-un-mot-cle
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.1 Requête avec un mot-clé
Content:
Est-ce que le nombre total d'articles trouvés est cohérent avec celui obtenu sur le site de PubMed ?

Chunk id: 925
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
>>> re.match("tigre", animaux)
>>>
>>> animaux = "tigre singe"
>>> re.match("tigre", animaux)
<_sre.SRE_Match object; span=(0, 5), match='tigre'>
>>>
```

Chunk id: 2331
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
2. ce qu'elle prend en argument,
3. ce qu'elle renvoie.  
Pour les modules et les classes, on ajoute également des informations générales sur leur fonctionnement.

Chunk id: 2363
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Parameters
----------
nombre1 : int
Le premier nombre entier.
nombre2 : int
Le second nombre entier.

Avec une description plus longue.
Sur plusieurs lignes.

Chunk id: 1838
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Si vous souhaitez allez plus loin sur la POO, nous vous conseillons de lire des ressources supplémentaires. En langue française, vous trouverez les livres de [Gérard

Chunk id: 2676
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
close-box-rem  
Dans l'exemple suivant, le corps de la boucle contient deux instructions (ligne 2 et ligne 3) car elles sont indentées par rapport à la ligne débutant par `for` :  
```python

Chunk id: 2191
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
## 18.6 JupyterLab  
En 2018, le consortium Jupyter a lancé *JupyterLab* qui est un environnement complet d'analyse.
Pour obtenir cette interface, lancez la commande suivante depuis un *shell* :

Chunk id: 12
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
Il est en fait possible d'appeler une fonction depuis une autre fonction. Et plus généralement, on peut appeler une fonction de n'importe où à partir du moment où elle est visible par Python

Chunk id: 3887
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
literature on transferrin deficiency and present our recent finding
s, including potential overlaps between transferrin, iron and manga
nese in the regulation of hepcidin expression.'
```

Chunk id: 2250
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
Pensez à donner à vos variables des noms qui ont du sens. Évitez autant que possible les `a1`, `a2`, `i`, `truc`, `toto`... Les noms de variables à un caractère sont néanmoins autorisés pour les

Chunk id: 241
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
quelques-uns: *NumPy* (manipulations de vecteurs et de matrices, algèbre linéaire), *Biopython* (recherche dans les banques de données biologiques, manipulation de séquences ou de structures de

Chunk id: 657
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
met une liste dans un tuple. Toutefois, pouvoir modifier une liste en tant qu'élément d'un tuple va à l'encontre de l'intérêt d'un objet non modifiable. Ainsi, dans la mesure du possible, nous vous

Chunk id: 3377
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
## 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères

Chunk id: 3157
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- Enfin, il est très utilisé en bioinformatique et plus généralement en analyse de données.  
[^footnote]: Nous sommes d'accord, cette notion est très relative.

Chunk id: 4000
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.1 Sélection de colonnes
Content:
```python
>>> df[["Lyon", "Pau"]]
Lyon  Pau
chat      11   13
singe     21   23
souris    31   33
```

Chunk id: 3435
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|   Isoleucine  |       Ile      |       I       |
|    Leucine    |       Leu      |       L       |
|     Lysine    |       Lys      |       K       |

Chunk id: 536
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13210-liste-de-dictionnaires
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.10 Liste de dictionnaires
Content:
...     print(ani["nom"])
...
girafe
singe
```  
Vous constatez ainsi que les dictionnaires permettent de gérer des structures complexes de manière plus explicite que les listes.

Chunk id: 3549
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
de caractères, mais dans ce cas, toutes les valeurs seront comprises par *NumPy* comme des chaînes de caractères :

Chunk id: 3786
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
quantités de données. On verra qu'il peut être également utilisé avec les *dataframes* du module *pandas*.

Chunk id: 2713
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
les confusions, si vous itérez sur les indices vous pouvez appeler la variable d'itération `i` (par exemple dans `for i in range(4):`).

Chunk id: 2186
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
Pour vous en rendre compte, jetez un œil au [notebook](https://github.com/MaayanLab/Zika-RNAseq-Pipeline/blob/master/Zika.ipynb) produit par les chercheurs Zichen Wang et Avi Ma'ayan qui reproduit

Chunk id: 2147
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
de touches, vous remarquerez que le numéro à gauche de la première cellule est passée de `In [1]` à `In [2]` car vous avez exécuté la première cellule *puis* créé une nouvelle cellule.

Chunk id: 4175
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
année (en fournissant l'argument `A`) :  
```python
>>> df["Deposit Date"].value_counts().resample("A").count()
1990-12-31    1
1991-12-31    0
1992-12-31    1
1993-12-31    1
```

Chunk id: 4135
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
<matplotlib.collections.PathCollection object at 0x7f62c2501780>
>>> plt.xlabel("Taille (nombre d'acides aminés)")
Text(0.5, 0, "Taille (nombre d'acides aminés)")

Chunk id: 3846
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'TranslationStack', 'QueryTranslation'])
```  
La valeur associée à la clé `IdList` est une liste qui contient les identifiants

Chunk id: 4785
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
et `"<Button-3>"` correspondent aux clics central et droit respectivement). Le deuxième argument de la méthode `.bind()` est une méthode / fonction *callback* à appeler lors de la survenue de

Chunk id: 2254
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
```python
>>> ma_liste = [1, 3, 5, 7, 9, 11]
>>> for entier in ma_liste:
...     print(entier)
...
```

Chunk id: 2509
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
n'appartient plus au bloc d'instructions du test `if`, d'où l'affichage de `car la variable nb vaut xx` pour toutes les valeurs de `nb`.

Chunk id: 1767
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
de l'héritage en programmation. D'abord quelques mots à propos de la conception. Imaginons que nous souhaitions créer plusieurs classes correspondant à nos fruits favoris, par exemple le citron

Chunk id: 4500
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
graphique, on parle encore de *graphical user interface* ou GUI. Jusqu'à maintenant, vous avez fait en sorte qu'un utilisateur interagisse avec votre code via la ligne de commande, par exemple :

Chunk id: 2255
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
...
```  
Enfin, des noms de variable à une lettre peuvent être utilisés lorsque cela a un sens mathématique (par exemple, les noms `x`, `y` et `z` évoquent des coordonnées cartésiennes).

Chunk id: 4318
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
HelloJoe
>>> print("Hello", end=" ") ; print("Joe")
Hello Joe
```  
La fonction `print()` peut également afficher le contenu d'une variable quel que soit son type. Par exemple, pour un entier :

Chunk id: 1771
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
exemple, d'instancier un fruit et ajouter des méthodes d'affichage commune à n'importe quel fruit, et ajouter (ou toute autre méthode) pouvant être utilisée pour n'importe quel fruit. Nous pourrions

Chunk id: 974
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
Dans la *regex* `(pan)\\1`, on capture d'abord le groupe `(pan)` grâce aux parenthèses (il s'agit du groupe 1 puisque c'est le premier jeu de parenthèses), immédiatement suivi du même groupe grâce au

Chunk id: 964
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
'pi vaut approximativement 3 et e vaut vaut approximativement 2'
>>> regex.sub("approximativement \\1 (puis .\\2)",phrase)

Chunk id: 4682
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Au final, vous obtiendrez le même rendu que précédemment (cf. figure @fig:exemple1_tkinter). Alors vous pourrez-vous poser la question, « pourquoi ai-je besoin de toute cette structure alors que le

Chunk id: 1316
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
```python
>>> dir(citron1)
['__class__', '__delattr__', '__dict__', [...], '__weakref__']
>>> citron1.couleur = "jaune"
>>> dir(citron1)

Chunk id: 206
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
DESCRIPTION
integers
--------
uniform within range

Chunk id: 2689
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
>>> for animal in animaux[1:3]:
...     print(animal)
...
tigre
singe
```  
On a vu que les boucles `for` pouvaient utiliser une liste contenant des chaînes de caractères,

Chunk id: 1611
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
Il existe d'autres règles concernant les espace de noms. L'une d'elle, que vous pourriez rencontrer, concerne la gestion des noms avec des fonctions imbriquées. Et oui, Python autorise cela ! Par

Chunk id: 862
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
on utilise le verbe *to match* pour indiquer qu'une *regex* « a fonctionné ». Bien qu'il n'y ait pas de traduction littérale en français, on peut utiliser les verbes « retrouver » ou « correspondre

Chunk id: 3166
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#121-python-2-ou-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.1 Python 2 ou Python 3 ?
Content:
qu'il existe quelques différences importantes entre Python 2 et Python 3. Le chapitre 21 *Remarques complémentaires* vous apportera plus de précisions.

Chunk id: 4273
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
En utilisant la méthode `Entrez.esearch()`, récupérez tous les PMID relatifs à la barstar. Pour cela, pensez à augmenter le paramètre `retmax`. Vos PMID seront stockés dans la liste `pmids` sous

Chunk id: 1532
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
open-box-def

Chunk id: 1655
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
L'exécution de ce code affichera la sortie suivante :  
```python
<__main__.CitronBasique object at 0x7ffe23e717b8>
Votre citron est de couleur jaune foncée et de taille minuscule 8-)
```

Chunk id: 4385
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
10
1000
>>> print(f"{10:*^6d}") ; print(f"{1000:*^6d}")
**10**
*1000*
>>> print(f"{10:0>6d}") ; print(f"{1000:0>6d}")
000010
001000
```

Chunk id: 2890
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
vos futurs programmes. En général, il est plus judicieux que chaque argument ait un type précis (entiers, *floats*, chaînes de caractères, etc) et pas l'un ou l'autre.

Chunk id: 596
Number of Tokens: 96
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
```python
>>> liste = [(i, i+1, i+2) for i in range(5, 8)]
>>> liste
[(5, 6, 7), (6, 7, 8), (7, 8, 9)]
>>> for x, y, z in liste:
...     print(x, y, z)
...
5 6 7
6 7 8
7 8 9
```

Chunk id: 3894
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Nous avons les résultats suivants :  
| Temps (h) | Concentration (mg/L) |
|:---------:|:--------------------:|
|     1     |          3.5         |
|     2     |          5.8         |

Chunk id: 1464
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
On a vu ci-dessus comment créer un attribut de classe, il suffit de créer une variable au sein de la classe (en dehors de toute méthode). En général, les attributs de classe contiennent des

Chunk id: 160
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
La plupart de ces modules sont déjà installés dans les versions standards de Python. Vous pouvez accéder à une [documentation exhaustive](https://docs.python.org/fr/3/py-modindex.html) sur le site de

Chunk id: 1831
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
simpliste et n'est qu'une « mise en bouche ». Vous verrez des exemples concrets de la puissance de l'héritage dans le chapitre 20 *Fenêtres graphiques et Tkinter* ainsi que dans les exercices du

Chunk id: 2536
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
```python
>>> (3 - 2.7) == 0.3
False
>>> 3 - 2.7
0.2999999999999998
```  
Nous voyons que le résultat de l'opération `3 - 2.7` n'est pas exactement `0.3` d'où le `False` en ligne 2.

Chunk id: 708
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```  
On peut bien sûr transformer dans l'autre sens un *set* en liste. Cela permet par exemple d'éliminer les doublons de la liste initiale tout en récupérant une liste à la fin :  
```python

Chunk id: 2423
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
autres) seront visibles si on importe le script en tant que module, puis en invoquant la commande `help()` (voir chapitre 14 *Création de modules*).

Chunk id: 4527
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
close-box-def

Chunk id: 1988
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
a accès à tous les attributs quels qu'ils soient, même s'ils contiennent un ou plusieurs caractère(s) *underscore(s)* (cf. ci-desssous) !

Chunk id: 3437
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
| Phénylalanine |       Phe      |       F       |
|    Proline    |       Pro      |       P       |
|     Sérine    |       Ser      |       S       |

Chunk id: 2934
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Lorsqu'on manipule des fonctions, il est essentiel de bien comprendre comment se comportent les variables. Une variable est dite **locale** lorsqu'elle est créée dans une fonction. Elle n'existera et

Chunk id: 204
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
source files.  It may be incomplete, incorrect or include features that
are considered implementation detail and may vary between Python

Chunk id: 3208
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Le triple chevron `>>>` est l'invite de commande (*prompt* en anglais) de l'interpréteur Python. Ici, Python attend une commande que vous devez saisir au clavier.
Tapez par exemple l'instruction :

Chunk id: 3378
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
On a vu dans le chapitre 2 *Variables* la conversion d'un type simple (entier, *float* et chaîne de caractères) en un autre avec les fonctions `int()`, `float()` et `str()`. La conversion d'une liste

Chunk id: 2386
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Les outils `pycodestyle` et `pydocstyle` vont simplement vérifier la conformité aux PEP 8 et 257. L'outil `pylint` va lui aussi vérifier une partie de ces règles mais il va également essayer de

Chunk id: 2049
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
donc contenir tout ce dont un utilisateur a besoin pour comprendre ce que fait la classe et comment l'utiliser.

Chunk id: 1950
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
l'accesseur et retombera sur `self.masse`, ce qui rappellera l'accesseur et ainsi de suite : vous l'aurez compris, cela partira dans une récursion infinie et mènera à une erreur du type

Chunk id: 2754
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
Une alternative à l'instruction `for` couramment utilisée en informatique est la boucle `while`. Avec ce type de boucle, une série d'instructions est exécutée tant qu'une condition est vraie. Par

Chunk id: 2019
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Ce code affiche `100` puis `200`. La ligne 12 a permis d'accéder à l'attribut `.__mass` de la classe mère `Fruit`, et la ligne 13 a permis d'accéder à l'attribut `.__mass` de la classe `Citron`.

Chunk id: 2733
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
|       `>`      | strictement supérieur à |
|      `>=`      | supérieur ou égal à     |
|       `<`      | strictement inférieur à |
|      `<=`      | inférieur ou égal à     |

Chunk id: 1648
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
```python
class CitronBasique:
def __init__(self, couleur="jaune", taille="standard"):
self.couleur = "jaune"
self.taille = "standard"

Chunk id: 2939
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
#programme principal
z = 5
resultat = carre(z)
print(resultat)
```

Chunk id: 4051
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
de consulter l'annexe A *Quelques formats de données rencontrés en biologie*.  
Voyons maintenant comment explorer les données contenues
dans ce fichier avec *pandas*.

Chunk id: 3538
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#171-module-numpy
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Content:
On charge le module *NumPy* avec la commande :  
```python
>>> import numpy
```  
On utilise très souvent un nom raccourci pour *NumPy* :  
```python
>>> import numpy as np
```

Chunk id: 1166
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1115-sort
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.5 `.sort()`
Content:
```python
>>> a = [3, 1, 2]
>>> a.sort()
>>> a
[1, 2, 3]
```  
L'argument `reverse=True` spécifie le tri inverse, c'est-à-dire du plus grand au plus petit élément :  
```python
>>> a = [3, 1, 2]

Chunk id: 617
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
la suite du code, on peut utiliser le nom de variable `_` (caractère *underscore*) pour indiquer que certaines valeurs ne nous intéressent pas :

Chunk id: 797
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
d'une chaîne de caractères et qui renvoie tous les mots de 2 lettres qui existent dans la séquence sous la forme d'un dictionnaire. Par exemple pour la séquence `ACCTAGCCCTA`, le dictionnaire

Chunk id: 4795
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
rappelle une autre méthode ou fonction (second argument) après un certain laps de temps (ici 50 ms, passé en premier argument). Ainsi la méthode `.move()` se rappelle elle-même, un peu comme une

Chunk id: 2912
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
Un argument défini avec une syntaxe `def fct(arg=val):` est appelé **argument par mot-clé** (en anglais *keyword argument*). Le passage d'un tel argument lors de l'appel de la fonction est

Chunk id: 4934
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
```  
Ligne 1. On « récupère » l'instance de la fenêtre principale dans la variable racine.  
Les lignes 4 et 5 montrent que le bouton est un « enfant » de cette dernière.

Chunk id: 2289
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
unes à la suite des autres. Un exemple se trouve dans le chapitre 17 *Quelques modules d'intérêt en bioinformatique*, dans la partie consacrée au module *pandas*.

Chunk id: 4549
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
Vous voyez que dans le programme principal, lors de l'appel de `une_fct()`, on lui passe comme argument une autre fonction mais sans **aucune parenthèses ni argument**, c'est-à-dire `fct_callback`

Chunk id: 1296
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Enfin, il est vivement recommandé de lire ce chapitre avant d'aborder le chapitre 20 *Fenêtres graphiques et Tkinter*.

Chunk id: 4218
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#lecture-des-coordonnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.2 Lecture des coordonnées
Content:
Ouvrez le fichier `1bta_CA.txt` avec Python et créez une liste contenant toutes les coordonnées sous forme de *floats* avec les fonctions `split()` et `float()`.

Chunk id: 874
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`\`  
:   Caractère d'échappement (pour protéger certains caractères).

Chunk id: 3117
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
## 4.8 Listes de listes  
Pour finir, sachez qu'il est tout à fait possible de construire des listes de listes. Cette fonctionnalité peut parfois être très pratique. Par exemple :  
```python

Chunk id: 3089
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
un indiçage construit sur le modèle `[m:n+1]` pour récupérer tous les éléments, du émième au énième (de l'élément `m` inclus à l'élément `n+1` exclu). On dit alors qu'on récupère une **tranche** de

Chunk id: 770
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
un dictionnaire de compréhension. Si vous souhaitez aller plus loin, vous pouvez consulter cet [article](https://www.datacamp.com/community/tutorials/python-dictionary-comprehension) sur le site

Chunk id: 3607
Number of Tokens: 94
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> a = np.array(range(10))
>>> a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> a2 = np.ones((3, 3))
>>> a2
array([[1., 1., 1.],
[1., 1., 1.],
[1., 1., 1.]])
```

Chunk id: 3683
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> np.savetxt("out.dat", a)
```  
Ceci générera le fichier `out.dat` contenant les lignes suivantes :  
```text

Chunk id: 3822
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
développement de *NumPy* sont également un excellent moyen de poursuivre votre découverte de  cette bibliothèque incontournable en sciences.

Chunk id: 4362
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
divisée par le nombre total de bases (A, T, C, G) du génome considéré. Si on a, par exemple, 4500 bases G et 2575 bases C, pour un total de 14800 bases, vous pourriez procéder comme suit (notez bien

Chunk id: 3618
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
l'écart-type, `.max()` pour extraire le maximum, `.min()` pour extraire le minimum, etc. La liste exhaustive est [ici](https://numpy.org/doc/stable/reference/arrays.ndarray.html#calculation). Par

Chunk id: 134
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
dans la fonction en lisant la ligne 7. Dans un tel cas, il serait essentiel d'indiquer dans la documentation de la fonction que la liste est modifiée « sur place »  (*in place* en anglais) dans la

Chunk id: 4902
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
la fenêtre principale sera `self.racine` et il n'y aura pas de changement par rapport à la version précédente. Cette méthode reste toutefois peu intuitive car cette instance de la fenêtre principale

Chunk id: 4511
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
illustrant des éléments que votre programme génère à la volée. Ainsi, vous « verrez » ce qui se passe de manière explicite et en direct ! Par exemple, si on réalise une simulation de particules, on a

Chunk id: 3776
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
close-box-def  
Concrètement, il suffira d'utiliser un *array* et un opérateur de comparaison entre les crochets qui étaient dédiés à l'indiçage :  
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],

Chunk id: 1023
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
Une **variable** est une zone de la mémoire de l'ordinateur dans laquelle une **valeur** est stockée. Aux yeux du programmeur, cette variable est définie par un **nom**, alors que pour l'ordinateur,

Chunk id: 1387
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
(instance que nous appellerons `citron1` de retour dans le programme principal, mais cela serait vrai pour n'importe quel autre nom d'instance). *Python Tutor* nous indique cela par une flèche

Chunk id: 3290
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
Le caractère `\t` produit une tabulation. Si vous voulez écrire des guillemets simples ou doubles et que ceux-ci ne soient pas confondus avec les guillemets de déclaration de la chaîne de caractères,

Chunk id: 4476
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
En Python, on peut considérer chaque variable comme un objet sur lequel on peut appliquer des méthodes. Une méthode est simplement une fonction qui utilise et/ou agit sur l'objet lui-même, les deux

Chunk id: 246
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Comme indiqué précédemment le module [*random*](https://docs.python.org/fr/3/library/random.html#module-random) contient des fonctions pour la génération de nombres aléatoires :  
```python

Chunk id: 22
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
terminée. Elle est en quelque sorte *figée* dans le même état qu'avant l'appel de `polynome()`, et on pourra ainsi noter que ses variables *locales* (`debut`, `fin`, `liste_vals` et `x`) sont

Chunk id: 3610
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
car l'affichage est différent. Le mot *array*, les parenthèses et les virgules disparaissent :

Chunk id: 3062
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#42-utilisation
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.2 Utilisation
Content:
```text
liste  : ["girafe", "tigre", "singe", "souris"]
indice :        0        1        2         3
```

Chunk id: 2620
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-2-plus-optimale-et-plus-rapide-mais-un-peu-plus-compliquee
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)
Content:
de la division entière (opérateur modulo `%`) entre le nombre considéré et chaque nombre premier déterminé jusqu'à maintenant est nul. Le cas échéant, ce nombre n'est pas premier. Attention, pour

Chunk id: 4270
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#recuperation-du-resume-dune-publication
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.3 Récupération du résumé d'une publication
Content:
#### 17.6.5.3 Récupération du résumé d'une publication  
Récupérez le résumé de la publication dont le PMID est 29701945. Vous utiliserez la méthode `Entrez.efetch()`.

Chunk id: 4450
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
On a 4500 G et 2575 C -> prop GC = 0.48
```  
- Dans la chaîne de caractères, les accolades vides `{}` précisent l'endroit où le contenu de la variable doit être inséré.

Chunk id: 2461
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.

Chunk id: 3445
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
### 10.8.6 Palindrome

Chunk id: 4558
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
le chapitre 12) ? C'était la même chose, une référence était envoyée plutôt qu'une copie. [*Python Tutor*](http://pythontutor.com) nous confirme cela (cf. figure @fig:fonction_callback_pythontutor).

Chunk id: 2238
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
`from module import *`  
Par ailleurs, la première syntaxe définit un « espace de noms » (voir chapitre 19 *Avoir la classe avec les objets*) spécifique au module.

Chunk id: 2618
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-2-plus-optimale-et-plus-rapide-mais-un-peu-plus-compliquee
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)
Content:
Parcourez tous les nombres de 2 à 100 et vérifiez si ceux-ci sont composés, c'est-à-dire qu'ils sont le produit de deux nombres premiers. Pratiquement, cela consiste à vérifier que le reste de la

Chunk id: 2724
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
...     print(f"L'animal {i} est un(e) {animaux[i]}")
...
L'animal 0 est un(e) girafe
L'animal 1 est un(e) tigre
L'animal 2 est un(e) singe
L'animal 3 est un(e) souris
```

Chunk id: 490
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
```python
>>> ani2.values()
dict_values(['singe', 70, 1.75])
>>> list(ani2.values())
['singe', 70, 1.75]
```  
Toutefois, ce sont des objets itérables, donc utilisables dans une boucle.

Chunk id: 4805
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Ligne 60 à 66. On définit la méthode `.boom()` de notre classe qui on se souvient est appelée lors d'un événement clic central sur le *canvas*. Vous noterez qu'outre le `self`, cette fonction prend

Chunk id: 1247
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1162-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.2 Séquence d'ADN aléatoire
Content:
liste de bases. Utilisez la méthode `.append()` pour ajouter les différentes bases à la liste et la fonction `random.choice()` du module *random* pour choisir une base parmi les 4 possibles.

Chunk id: 3151
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- Il est gratuit. Vous pouvez l'installer sur autant d'ordinateurs que vous voulez (même sur votre téléphone !).

Chunk id: 2120
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
Initialement développés pour les langages de programmation Julia, Python et R (d'où le nom Jupyter), les notebooks Jupyter supportent près de 40 langages différents.

Chunk id: 1443
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
En résumé, le `self` est nécessaire lorsqu'on a besoin d'accéder à différents attributs dans les différentes méthodes d'une classe. Le `self` est également nécessaire pour appeler une méthode de la

Chunk id: 2298
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Les commentaires sont sur le même niveau d'indentation que le code qu'ils commentent. Les commentaires sont constitués de phrases complètes, avec une majuscule au début (sauf si le premier mot est

Chunk id: 3044
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
![Illustration de la distance à l'origine.](img/sin2ori.png){ #fig:sin2ori width=60% }

Chunk id: 3916
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
temps = [1, 2, 3, 4, 6, 7, 9]
concentration = [5.5, 7.2, 11.8, 13.6, 19.1, 21.7, 29.4]
plt.scatter(temps, concentration, marker="o", color = "blue")
plt.xlabel("Temps (h)")

Chunk id: 1005
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
Voici un exemple de sortie attendue :  
```text
protein 00001 O95139
protein 00002 O75438
protein 00003 Q8N4C6
[...]
protein 20371 Q8IZJ1
protein 20372 Q9UKP6
protein 20373 Q96HZ7
```

Chunk id: 901
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
» au maximum. Par exemple, si on utilise la *regex* `A+` pour faire une recherche dans la chaîne `TTTAAAAAAAAGC`, tous les A de cette chaîne (8 en tout) seront concernés, bien que `AA`, `AAA`, etc. «

Chunk id: 3763
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
```python
>>> np.full((2, 2), True)
array([[ True,  True],
[ True,  True]])
>>> np.full((2, 2), False)
array([[False, False],
[False, False]])
```

Chunk id: 4100
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
1B3E          Homo sapiens   1998-12-09     330  36505.5
```  
Mais le type de données de la colonne `Deposit Date` est maintenant une date (`datetime64[ns]`) :  
```python
>>> df.dtypes

Chunk id: 3288
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
## 10.3 Caractères spéciaux

Chunk id: 656
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
Nous avons fait une petite digression ici afin que vous compreniez bien ce qu'il se passe lorsqu'on met une liste dans un tuple. Toutefois, pouvoir modifier une liste en tant qu'élément d'un tuple va

Chunk id: 4337
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
dans la rubrique suivante. Toutefois, nous conseillons vivement l'utilisation des *f-strings* si vous débutez l'apprentissage de Python.

Chunk id: 3582
Number of Tokens: 96
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> v = np.arange(4)
>>> v
array([0, 1, 2, 3])
>>> v.ndim
1
>>> v.shape
(4,)
>>> v.size
4
>>> w = np.array([[1, 2], [3, 4], [5, 6]])
>>> w
array([[1, 2],
[3, 4],
[5, 6]])
>>> w.ndim
2

Chunk id: 4603
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
argument, le texte à écrire dans le bouton, puis la couleur de ce texte. Le dernier argument `command=racine.destroy` va indiquer la fonction / méthode à exécuter lorsque l'utilisateur clique sur le

Chunk id: 4736
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
du *canvas*. On rappelle que cet attribut sera visible dans l'ensemble de la classe puisqu'il est « accroché » à celle-ci par le `self`.

Chunk id: 4442
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
- Désigner l'endroit où sera placée la variable dans la chaîne de caractères.
- Préciser le type de variable à formater, `d` pour un entier (`i` fonctionne également) ou `f` pour un *float*.

Chunk id: 3805
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
- lorsque vous souhaitez accumuler des valeurs au fur et à mesure des itérations d'une boucle : la méthode `.append()` des listes est bien plus efficace que faire grandir un *array* ligne par ligne

Chunk id: 672
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Les objets de type *set* représentent un autre type de container qui peut se révéler très pratique. Ils ont la particularité d'être modifiables, non hachables, non ordonnés, non indexables et de ne

Chunk id: 122
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
la classe avec les objets*). En attendant, et si vous ne souhaitez pas aller plus loin sur les notions d'objet (on peut tout à fait « pythonner » sans cela), retenez la chose suivante sur les

Chunk id: 2024
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Python permet-il un tel paradoxe ? Et bien selon le concepteur Guido van Rossum : « *We’re all consenting adults here* », nous sommes ici entre adultes, autrement dit nous savons ce que nous faisons

Chunk id: 817
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
- la séquence du chromosome I de la levure du boulanger *Saccharomyces cerevisiae* (fichier [`NC_001133.fna`](https://python.sdv.univ-paris-diderot.fr/data-files/NC_001133.fna))

Chunk id: 1632
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
La redéfinition des opérateurs est la capacité à redéfinir le comportement d'un opérateur en fonction des opérandes utilisées (on rappelle dans l'expression `1 + 1`, `+` est l'opérateur d'addition et

Chunk id: 1704
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
mécanisme, car la redéfinition des opérateurs revient finalement à redéfinir une méthode magique (comme par exemple la méthode `.__add__()` pour l'opérateur `+`).

Chunk id: 1454
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
est **strictement obligatoire**. En fait, la notation `citron1.affiche_message()` est équivalente à `Citron.affiche_message(citron1)`.

Chunk id: 1802
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
(1) Je rentre dans la méthode .__str__() de la classe Citron
Je vais lancer la méthode .affiche_conseil() héritée de la classe Fruit
(2) Je suis dans la méthode .affiche_conseil() de la classe Fruit

Chunk id: 3258
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
afficher la taille de la séquence. Pour bien préciser que cet affichage se fait à la fin, donc une fois l'affichage puis le comptage de chaque base terminés, la ligne correspondante n'est pas

Chunk id: 3262
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
Si tout cela semble un peu complexe, ne vous inquiétez pas. Vous allez comprendre tous ces détails chapitre après chapitre.

Chunk id: 4833
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Spinbox* : sélectionne une valeur parmi une liste de valeurs.
- *tkMessageBox* : affiche une boîte avec un message.

Chunk id: 3986
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
>>> df
a   b   c   d
chat    10  11  12  13
singe   20  21  22  23
souris  30  31  32  33
```  
Lignes 1-4. Le dictionnaire `data` contient les données en colonnes.

Chunk id: 3314
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
(le premier échappe le second). Finalement, l'utilisation de la syntaxe `r"Voici un retour à la ligne\nEt là une autre ligne"` renvoie une chaîne de caractères normale, puisqu'on voit ensuite que le

Chunk id: 832
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
qui correspond à la [structure tridimensionnelle de la protéine barstar](http://www.rcsb.org/pdb/explore.do?structureId=1BTA) sur le site de la *Protein Data Bank* (PDB).

Chunk id: 1716
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
close-box-rem

Chunk id: 2872
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
4
```
Ici, le résultat renvoyé par la fonction est stocké dans la variable `res`.
Notez qu'une fonction ne prend pas forcément un argument et ne renvoie pas forcément une valeur, par exemple :

Chunk id: 1404
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
`citron1.couleur` dans le `print()`. Notez que si l'instance s'était appelée `enorme_citron`, on aurait utilisé `enorme_citron.couleur` pour accéder à l'attribut `couleur`.

Chunk id: 1468
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
on a vu qu'il suffisait de les initialiser dans la méthode `.__init__()` en utilisant une syntaxe `self.nouvel_attribut = valeur`. On a vu aussi dans la rubrique *Ajout d'un attribut d'instance* que

Chunk id: 2068
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
conseillons de ne jamais modifier les attributs de classe. Vous pouvez néanmois les utiliser comme constantes.

Chunk id: 4368
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
>>> print(f"La proportion de GC est {prop_GC:.3f}")
La proportion de GC est 0.478
```  
Détaillons le contenu des accolades de la première ligne (`{prop_GC:.2f}`) :

Chunk id: 4353
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
>>> print(f"{var} et {var} font {var}{var}")
to et to font toto
>>>
```  
close-box-rem  
Enfin, il est possible de mettre entre les accolades des valeurs numériques ou des chaînes de caractères :

Chunk id: 4116
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Anas platyrhynchos     686.000000  75731.800000
Gallus gallus          509.300000  56324.080000
Homo sapiens           439.615385  48663.392308
Oryctolagus cuniculus  490.000000  54219.600000

Chunk id: 3795
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
>>> a
array([[1., 1., 1., 0.],
[1., 1., 1., 1.],
[1., 0., 0., 1.],
[1., 0., 0., 0.]])
```

Chunk id: 1334
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
`del citron1`), mais permet également de détruire un attribut d'instance. Si on reprend notre exemple `citron1` ci-dessus :  
```python
>>> citron1.__dict__
{'couleur': 'jaune'}

Chunk id: 3267
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
gratuitement sur le site de [Gérard Swinnen](http://www.inforef.be/swi/python.htm). Les éditions Eyrolles proposent également la version papier de cet ouvrage.

Chunk id: 4027
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
>>> data1 = {"Lyon": [10, 23, 17], "Paris": [3, 15, 20]}
>>> df1 = pd.DataFrame.from_dict(data1)
>>> df1.index = ["chat", "singe", "souris"]
>>> df1
Lyon  Paris
chat      10      3

Chunk id: 1905
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
de la syntaxe lisible `instance.attribut`, tout en utilisant en filigrane des fonctions pour accéder, modifier, voire détruire l'attribut (à l'image des *getters* et *setters* évoqués ci-dessus,

Chunk id: 2165
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
![Notebook avec une cellule au format Markdown (après exécution).](img/jupyter-markdown-2.png "Notebook avec une cellule au format Markdown (après exécution)."){ #fig:jupyter-markdown-2 width=80% }

Chunk id: 2949
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
principal, il s'agira d'une variable *globale*. Ainsi, elle sera également stockée dans le *Global frame*.

Chunk id: 4869
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
pour placer les *widgets*. Cette méthode très simple et directe « empaquette » les *widgets* les uns contre les autres et redimensionne la fenêtre automatiquement. Avec l'option `side=` et les

Chunk id: 3100
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#46-fonction-len
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.6 Fonction `len()`
Content:
## 4.6 Fonction `len()`  
L'instruction `len()` vous permet de connaître la longueur d'une liste, c'est-à-dire le nombre d'éléments que contient la liste. Voici un exemple d'utilisation :  
```python

Chunk id: 3826
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
### 17.2.1 Manipulation de données  
Voici quelques exemples de manipulation de données avec *Biopython*.  
Définition d'une séquence :  
```python
>>> import Bio
>>> from Bio.Seq import Seq

Chunk id: 4253
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
masse. Vous pourrez utiliser la fonction `scatter()` du module *matplotlib*. Pour l'[affichage en 3D](https://matplotlib.org/3.2.1/gallery/mplot3d/scatter3d.html), voici un squelette de programme :

Chunk id: 376
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
True
```  
- Capacité à supporter la fonction `len()` renvoyant la longueur du container.  
Voici d'autres propriétés générales que nous avons déjà croisées. Un container peut être :

Chunk id: 3016
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#986-distance-3d
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.6 Distance 3D
Content:
### 9.8.6 Distance 3D

Chunk id: 2814
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
### 5.4.13 Sauts de puce

Chunk id: 484
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1323-iteration-sur-les-cles-pour-obtenir-les-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.3 Itération sur les clés pour obtenir les valeurs
Content:
d'itération `key` prend successivement la valeur de chaque clé, `ani2[key]` donne la valeur correspondant à chaque clé.

Chunk id: 1562
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
i = 3.14
j = -76
```  
L'exécution de `test_var_module.py` donnera :  
```bash
$ python ./test_var_module.py
Dans prog principal i: 1000000
Dans prog principal j: 2
Dans module, i local: -27478524

Chunk id: 1573
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
dans notre programme principal ne sont pas accessibles dans le module lorsque celui-ci est en exécution.

Chunk id: 2039
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
print("Coucou !")
```  
Si on fait `help(Citron)` dans l'interpréteur, on obtient :  
```python
Help on class Citron in module __main__:

Chunk id: 1615
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
Là encore, il existe certaines règles de priorités d'accès aux objets spécifiques à ce genre de cas, avec l'apparition d'un nouveau mot-clé nommé `nonlocal`. Toutefois ces aspects vont au-delà du

Chunk id: 1772
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
et ajouter (ou toute autre méthode) pouvant être utilisée pour n'importe quel fruit. Nous pourrions alors créer des classes comme `Citron`, `Orange`, etc., héritant de la classe `Fruit` et ainsi nous

Chunk id: 3128
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
```python
>>> min(3, 4)
3
```  
Attention toutefois à ne pas mélanger entiers et *floats* d'une part avec une liste d'autre part, car cela renvoie une erreur :  
```python
>>> min(liste, 3, 4)

Chunk id: 4173
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
2002-11-18    2
2003-03-10    1
2001-07-24    1
Name: Deposit Date, dtype: int64
```  
Si on souhaite une réponse plus globale, par exemple, à l'échelle de

Chunk id: 918
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
Le motif que vous utilisez comme premier argument de la fonction `search()` sera interprété en tant que *regex*. Ainsi, `^DEF` correspondra au mot `DEF` en début de chaîne et pas au caractère

Chunk id: 4062
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
- l'organisme d'où provient cette protéine (`Source`) ;
- la date à laquelle cette structure a été déposée dans la *Protein Data Bank* (`Deposit Date`) ;

Chunk id: 3247
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#17-commentaires
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.7 Commentaires
Content:
```  
open-box-rem  
On appelle souvent à tort le caractère `#` « dièse ». On devrait plutôt parler de « [croisillon](https://fr.wikipedia.org/wiki/Croisillon_(signe)) ».  
close-box-rem

Chunk id: 4268
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#recuperation-des-informations-dune-publication
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.2 Récupération des informations d'une publication
Content:
Récupérez les informations de la publication dont le PMID est [29701945](https://www.ncbi.nlm.nih.gov/pubmed/29701945). Vous utiliserez la méthode `Entrez.esummary()`.

Chunk id: 4014
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-sur-les-lignes-et-les-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.3 Sélection sur les lignes et les colonnes
Content:
```  
Notez qu'à partir du moment où on souhaite effectuer une sélection sur des lignes,
il faut utiliser `loc` (ou `iloc` si on utilise les indices).

Chunk id: 2482
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
- Dans le premier exemple, le test étant vrai, l'instruction
`print("Le test est vrai !")`
est exécutée. Dans le second exemple, le test est faux et rien n'est affiché.

Chunk id: 112
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
Dans ce chapitre nous avons *joué* avec les fonctions (et les listes) afin de vous montrer comment Python réagissait. Toutefois, notez bien que **l'utilisation de variables globales est à bannir

Chunk id: 3553
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
>>> b
array([1. , 2. , 3.5])
>>> type(b)
<class 'numpy.ndarray'>
```  
Ici, la notation `1.` indique qu'il s'agit du *float* `1.0000...` et pas de l'entier `1`.  
close-box-rem

Chunk id: 130
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
liste_notes = ajoute_un(liste_notes)
print(liste_notes)
```  
La ligne 8 indique que la liste `liste_notes` passée à la fonction est écrasée par la liste renvoyée par la fonction.

Chunk id: 1260
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1165-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.5 Séquence d'ADN aléatoire 2
Content:
*Conseil* : la fonction `random.shuffle()` du module *random* vous sera utile.

Chunk id: 1677
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
loin, nous vous conseillons la [page de Rafe Kettler](https://rszalski.github.io/magicmethods) qui est particulièrement complète et très bien faite.

Chunk id: 2065
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
Ici chaque instance pourra modifier la liste, ce qui n'est pas souhaitable. Souvenez vous, la modification des attributs de classe doit se faire par une syntaxe `Citron.attribut = valeur` (et non pas

Chunk id: 790
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
un dictionnaire, à une exception près : si on appelle une clé qui n'existe pas dans l'itérable initiale (comme le `n` ci-dessus) la valeur renvoyée est 0.

Chunk id: 3917
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
plt.scatter(temps, concentration, marker="o", color = "blue")
plt.xlabel("Temps (h)")
plt.ylabel("Concentration (mg/L)")
plt.title("Concentration de produit en fonction du temps")

Chunk id: 4956
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
- La [Documentation officielle](https://wiki.python.org/moin/TkInter) de Python.
- Le [manuel](https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html) de référence sur le site du MNT.

Chunk id: 15
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
def calc_vals(debut, fin):
liste_vals = []
for x in range(debut, fin + 1):
liste_vals.append(polynome(x))
return liste_vals

Chunk id: 3299
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
fonction `print()`. Par exemple, le `\n` n'apparait comme un saut de ligne que lorsqu'il est dans une chaîne de caractères passée à la fonction `print()` :

Chunk id: 2407
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
sait tout de suite où trouver l'information et un autre programmeur pourra s'y retrouver. Voici un exemple de code avec les différents éléments dans le bon ordre :

Chunk id: 619
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
Cela envoie le message à celui qui lit le code « je me fiche des valeurs récupérées dans ces variables `_` ». Notez que l'on peut utiliser une ou plusieurs variables *underscores(s)*. Dans l'exemple

Chunk id: 110
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
de noms ». C'est cette gestion qui définit la portée (visibilité) de chaque variable. Nous en parlerons plus longuement dans le chapitre 19 *Avoir la classe avec les objets*.

Chunk id: 1223
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
`for` au sein de crochets précédés d'une variable (qui peut être la variable d'itération ou pas ):

Chunk id: 2150
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
nous avons quatre cellules. Vous remarquerez que pour les cellules 3 et 4, le résultat renvoyé par le code Python est précédé par `Out [3]` et `Out [4]`.

Chunk id: 4079
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Le type `object` est un type par défaut.  
La méthode `.info()` permet d'aller un peu plus loin dans l'exploration du jeu de données

Chunk id: 3646
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
### 17.1.5 Copie d'*arrays*  
Comme pour les listes, nous attirons votre attention sur la copie d'*arrays* :  
```python
>>> a = np.arange(5)
>>> a
array([0, 1, 2, 3, 4])
>>> b = a
>>> b[2] = -300

Chunk id: 2664
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Une fois la boucle terminée, cette variable d'itération `animal` n'est pas détruite et conserve la dernière valeur de la liste `animaux` (ici la chaîne de caractères `"souris"`).

Chunk id: 3518
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
calculer la longueur du gène. Notez que les caractères `>` et `<` doivent être ignorés, et les `..` servent à séparer la position de début et de fin.

Chunk id: 1770
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
aussi de nombreux points communs. Nous pourrions donc concevoir une classe `Fruit` permettant, par exemple, d'instancier un fruit et ajouter des méthodes d'affichage commune à n'importe quel fruit,

Chunk id: 338
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#886-sequences-aleatoires-dadn
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.6 Séquences aléatoires d'ADN
Content:
Documentation de la fonction `random.randint()` :  
<https://docs.python.org/fr/3/library/random.html#random.randint>  
Documentation de la fonction `random.choice()` :

Chunk id: 2750
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
caractère est différent entre l'une et l'autre des deux chaînes, il considère que la chaîne la plus petite est celle qui présente le caractère ayant le plus petit code ASCII (les caractères suivants

Chunk id: 3031
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
Pour chacune des 20 listes, affichez les statistiques (min, max, et moyenne) avec deux chiffres après la virgule :
```text
Liste  1 : min = 0.17 ; max = 99.72 ; moyenne = 57.38

Chunk id: 3831
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
```  
Traduction en séquence protéique :  
```python
>>> ADN.translate()
Seq('ISAIAC')
```
Dans l'annexe A *Quelques formats de données rencontrés en biologie*, vous

Chunk id: 3168
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
Nous vous conseillons d'installer [Miniconda](https://conda.io/miniconda.html), logiciel gratuit, disponible pour Windows, Mac OS X et Linux, et qui installera pour vous Python 3.

Chunk id: 1364
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Lors de l'instanciation d'un objet à partir d'une classe, il peut être intéressant de lancer des instructions comme par exemple initialiser certaines variables. Pour cela, on ajoute une méthode

Chunk id: 3390
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
_getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '_
_init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mo

Chunk id: 2924
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
On peut toujours passer les arguments par mot-clé dans un ordre arbitraire à partir du moment où on précise leur nom. Par contre, si les deux arguments positionnels `a` et `b` ne sont pas passés à la

Chunk id: 46
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
elle-même (ligne 5), mais cette fois-ci en passant la valeur 3. Au prochain appel, ce sera avec la valeur 2, puis finalement 1. Dans ce dernier cas, le test `if nb == 1:` est vrai et l'instruction

Chunk id: 3149
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- Il est multiplateforme. C'est-à-dire qu'il fonctionne sur de nombreux systèmes d'exploitation : Windows, Mac OS X, Linux, Android, iOS, depuis les mini-ordinateurs Raspberry Pi jusqu'aux

Chunk id: 3236
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
Pour reprendre l'exemple précédent, ouvrez un éditeur de texte (pour choisir et configurer un éditeur de texte, reportez-vous si nécessaire à la rubrique *Installation de Python* en

Chunk id: 682
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
(cf. plus bas) ; les objets non hachables que l'on connait sont les listes, les *sets* et les dictionnaires. Si on essaie tout de même de mettre une liste dans un *set*, Python renvoie une erreur :

Chunk id: 3594
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```  
La méthode `.resize()` par contre ne déclenche pas d'erreur dans une telle situation et ajoute des 0 jusqu'à ce que le nouvel *array* soit rempli, ou bien coupe la liste initiale.  
```python

Chunk id: 2004
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
def get_mass(self):
return self.__mass

Chunk id: 4119
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
```  
La méthode `.groupby()` rassemble d'abord les données suivant la colonne
`Source` puis la méthode `.mean()` calcule la moyenne pour chaque groupe.

Chunk id: 343
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#887-sequences-aleatoires-dadn-avec-argument
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.7 Séquences aléatoires d'ADN avec argument
Content:
Le script devra vérifier qu'un argument est bien fourni et renvoyer un message d'erreur si ce n'est pas le cas.  
*Conseil* : pour générer la séquence d'ADN, vous utiliserez, au choix, la fonction

Chunk id: 2067
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
- Comme abordé dans la rubrique *Différence entre les attributs de classe et d'instance*, nous vous conseillons de ne jamais modifier les attributs de classe. Vous pouvez néanmois les utiliser comme

Chunk id: 4055
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Le fichier contient 41 lignes de données plus une ligne d'en-tête. Cette dernière
est automatiquement utilisée par *pandas* pour nommer les différentes colonnes.

Chunk id: 2200
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
Comme vous l'avez constaté dans tous les chapitres précédents, la syntaxe de Python est très permissive. Afin d'uniformiser l'écriture de code en Python, la communauté des développeurs Python

Chunk id: 759
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1354-types-de-base
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.4 Types de base
Content:
| *float*         |  non                                   | non      | non     | non       | non        | oui      |

Chunk id: 219
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodT
ype', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '_ac

Chunk id: 1855
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
tests dans le *setter* et renvoyer une erreur à l'utilisateur de la classe s'il n'a pas envoyé le bon type (ou la bonne valeur dans l'intervalle imposé).

Chunk id: 1138
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2111-nombres-de-friedman
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.1 Nombres de Friedman
Content:
Les [nombres de Friedman](https://fr.wikipedia.org/wiki/Nombre_de_Friedman) sont des nombres qui peuvent s'exprimer avec tous leurs chiffres dans une expression mathématique.

Chunk id: 4611
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
`command=...` une fonction / méthode *callback*. La liste exhaustive des arguments possibles de la classe `tk.Button` se trouve [ici](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/button.html).

Chunk id: 315
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
La fonction `os.path.exists()` est une fonction pratique de ce module qui vérifie la présence d'un fichier sur le disque dur.  
```python
>>> import sys
>>> import os

Chunk id: 2194
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
obtenir une interface similaire à la figure @fig:jupyterlab-1.  
![Interface de JupyterLab.](img/jupyterlab-1.png "Interface de JupyterLab."){ #fig:jupyterlab-1 width=95% }

Chunk id: 3241
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
Vous devriez obtenir un résultat similaire à ceci :  
```bash
$ python test.py
Hello world!
```  
Si c'est bien le cas, bravo ! Vous avez exécuté votre premier programme Python.

Chunk id: 2265
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
```python
#code recommandé :
ma_liste = [1, 2, 3]
mon_dico = {"clé1": "valeur1", "clé2": "valeur2"}
ma_fonction(argument1, argument2)
#code non recommandé :
ma_liste = [1 , 2 ,3]

Chunk id: 426
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
qui permet un accès rapide aux éléments des containers de type dictionnaire ou *set* (cf. rubriques suivantes).

Chunk id: 1031
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
- Enfin, Python a assigné la valeur 2 à la variable `x`.

Chunk id: 1074
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
>>> print(humans_on_earth)
7807568245
```  
Dans ces exemples, le caractère `_` est utilisé pour séparer des groupes de 3 chiffres mais on peut faire ce qu'on veut :  
```python

Chunk id: 1620
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
close-box-more

Chunk id: 165
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```  
Regardons de plus près cet exemple :  
- Ligne 1, l'instruction `import` donne accès à toutes les fonctions du module [*random*](https://docs.python.org/fr/3/library/random.html#module-random).

Chunk id: 36
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
mathématique factorielle. Nous vous rappelons que la factorielle s'écrit avec un `!` et se définit de la manière suivante :

Chunk id: 4302
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.4 Statistiques par groupe
Content:
#### 17.6.6.4 Statistiques par groupe  
Déterminez, la taille et l'âge moyen chez les hommes et les femmes. Utilisez pour cela la méthode `.groupby()`.

Chunk id: 3207
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
représentent l'invite de commande de votre *shell*. Par la suite, cette invite de commande sera représentée simplement par le caractère `$`, que vous soyez sous Windows, Mac OS X ou Linux.

Chunk id: 1720
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
gère les espaces de noms). Prenons l'exemple d'une classe déclarée comme suit `class Fille(Mere1, Mere2):`. Si on invoque un attribut ou une méthode sur une instance de cette classe, Python cherchera

Chunk id: 1253
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1163-sequence-dadn-complementaire-inverse
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.3 Séquence d'ADN complémentaire inverse
Content:
Rappel : la séquence complémentaire inverse doit être « inversée ». Par exemple, la séquence complémentaire inverse de la séquence `ATCG` est `CGAT`.

Chunk id: 4747
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
accessible dans n'importe quelle méthode de la classe avec `self.canv` (pas besoin de le passer en argument ou de créer une variable globale).

Chunk id: 1729
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
verrons dans le chapitre suivant le module *Tkinter*, imaginons que nous créions une instance de la classe principale du module *Tkinter* nommée `Tk` :

Chunk id: 128
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
```python
def ajoute_un(liste):
for indice in range(len(liste)):
liste[indice] += 1
return liste

Chunk id: 2827
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
cette suite a été conçue pour décrire la croissance d'une population de lapins, mais elle peut également être utilisée pour décrire certains motifs géométriques retrouvés dans la nature (coquillages,

Chunk id: 2523
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
```python
>>> x = 2
>>> y = 2
>>> if x == 2:
...     if y == 2:
...         print("le test est vrai")
...
le test est vrai
```

Chunk id: 53
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
à l'appel précédent, pour finir par $4 \times 6 = 24$ (où 4 correspond à `nb` et 6 provient de `calc_factorielle(nb - 1)` soit 6), soit la valeur de $4!$. Les appels successifs vont donc se « dépiler

Chunk id: 1750
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
: par exemple `list` revient au même que `builtins.list`, ou `object` revient au même que `builtins.object`.

Chunk id: 1361
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
if __name__ == "__main__":
citron1 = Citron()
saveur_citron1 = citron1.recup_saveur()
print(saveur_citron1)
```

Chunk id: 4931
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
*Tkinter* garde toujours une filiation des *widgets* avec les attributs `.master` et `.children` :

Chunk id: 3043
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
trait épais). Chaque trait pointillé représente la distance que l'on cherche à calculer entre les points de la courbe et l'origine du repère de coordonnées (0, 0).

Chunk id: 92
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
utilisez des tuples (ils seront présentés dans le chapitre 13 *Dictionnaires et tuples*), Python renverra une erreur car ces derniers sont non modifiables.

Chunk id: 1053
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
chaîne de caractères, il faut l'entourer de guillemets (doubles, simples, voire trois guillemets successifs doubles ou simples) afin d'indiquer à Python le début et la fin de la chaîne de caractères.

Chunk id: 4211
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
with open("1bta.pdb", "r") as f_pdb, open("1bta_CA.txt", "w") as f_CA:
for ligne in f_pdb:
if ligne.startswith("ATOM") and ligne[12:16].strip() == "CA":
x = ligne[30:38]
y = ligne[38:46]

Chunk id: 1353
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
```python
class Citron:
def coucou(self):
print("Coucou, je suis la mth .coucou() dans la classe Citron !")

Chunk id: 2227
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
open-box-warn

Chunk id: 2582
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
valeurs de *n*), la conjecture de Syracuse est-elle toujours vérifiée ? Quels sont les nombres qui constituent le cycle trivial ?

Chunk id: 1201
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
## 11.4 Copie de listes  
Il est très important de savoir que l'affectation d'une liste (à partir d'une liste préexistante) crée en réalité une **référence** et non une **copie** :  
```python

Chunk id: 367
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13-containers-dictionnaires-tuples-et-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Content:
types sont appelés communémement des **containers**. Avant d'aborder en détail ces nouveaux types, nous allons définir les containers et leurs propriétés.

Chunk id: 4376
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```  
ou mettre plusieurs nombres dans une même chaîne de caractères.  
```python
>>> nb_G = 4500
>>> nb_C = 2575

Chunk id: 727
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
Les *frozensets* sont des *sets* non modifiables et hachables. Ainsi, un *set* peut contenir des *frozensets* mais pas l'inverse. A quoi servent-ils ? Comme la différence entre tuple et liste,

Chunk id: 3599
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
place » (*in place*), c'est-à-dire que la méthode ne renvoie rien mais l'*array* est bel et bien modifié (à l'image des méthodes sur les listes comme `.reverse()`, cf. chapitre 11 *Plus sur les

Chunk id: 1641
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
*underscores*. Par exemple, la méthode `.__init__()` est une méthode magique. Ces méthodes sont, la plupart du temps, destinées au fonctionnement interne de la classe. Nombre d'entre elles sont

Chunk id: 1944
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
il n'y aurait pas eu d'appel à la fonction mutateur et on aurait pu mettre n'importe quoi, y compris une valeur aberrante, lors de l'instanciation.

Chunk id: 2908
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
que dans la définition de la fonction. Dans l'exemple ci-dessus, `2` correspondra à `x` et `3` correspondra à `y`. Finalement, tout dépendra de leur position, d'où leur qualification de positionnel.

Chunk id: 2348
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
et écrire de la documentation peut être un sérieux motif de procrastination. Soyez vigilant sur ce point, et rédigez vos *docstrings* au moment où vous écrivez vos modules, fonctions, classes ou

Chunk id: 4532
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
est décidée par l'utilisateur en fonction de ses interactions avec les différents *widgets*. Comme c'est l'utilisateur qui décide quand et où il clique dans l'interface, il va falloir mettre en place

Chunk id: 1231
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1153-formatage-dune-sequence-avec-60-caracteres-par-ligne
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.3 Formatage d'une séquence avec 60 caractères par ligne
Content:
```python
#Exemple d'une séquence de 150 alanines.
>>> seq = "A" * 150
>>> width = 60
>>> seq_split = [seq[i:i+width] for i in range(0, len(seq), width)]
>>> print("\n".join(seq_split))

Chunk id: 3996
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
(par défaut, *n* vaut 5) :  
```python
>>> df.head(2)
Paris  Lyon  Nantes  Pau
chat      10    11      12   13
singe     20    21      22   23
```

Chunk id: 235
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*Tkinter*](https://docs.python.org/fr/3/library/tkinter.html#module-tkinter) : interface python avec Tk. Création d'objets graphiques (cf. chapitre 20 *Fenêtres graphiques et Tkinter*).

Chunk id: 1377
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Pour bien comprendre comment cela fonctionne, nous allons suivre un exemple simple avec le site [*Python Tutor*](http://www.pythontutor.com) (déjà utilisé dans les chapitres 9 et 12 sur les

Chunk id: 4350
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
Python prendra cela pour une chaîne de caractères normale et ne mettra pas en place ce mécanisme de remplacement :

Chunk id: 2727
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
...     print(f"L'animal {i} est un(e) {animal}")
...
L'animal 0 est un(e) girafe
L'animal 1 est un(e) tigre
L'animal 2 est un(e) singe
L'animal 3 est un(e) souris
```

Chunk id: 4083
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
0   Source        41 non-null     object
1   Deposit Date  41 non-null     object
2   Length        41 non-null     int64
3   MW            41 non-null     float64

Chunk id: 1100
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#253-operations-illicites
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.3 Opérations illicites
Content:
Notez que Python vous donne des informations dans son message d'erreur. Dans le second exemple, il indique que vous devez utiliser une variable de type *str* c'est-à-dire une chaîne de caractères et

Chunk id: 1813
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
open-box-rem

Chunk id: 3130
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
TypeError: '<' not supported between instances of 'int' and 'list'
```  
Soit on passe plusieurs entiers et / ou *floats* en argument, soit on passe une liste unique.

Chunk id: 558
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
des éléments du tuple (en ligne 10), Python renvoie un message d'erreur. Ce message est similaire à celui que nous avions rencontré quand on essayait de modifier une chaîne de caractères (cf.

Chunk id: 2002
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
de nom en français, correspond à un mécanisme de changement du nom d'un attribut selon si on est à l'intérieur ou à l'extérieur d'une classe.

Chunk id: 544
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
>>>
>>> dict([("girafe", 2), ("singe", 3)])
{'girafe': 2, 'singe': 3}
```  
Si un des sous-éléments a plus de 2 éléments (ou moins), Python renvoie une erreur :  
```python

Chunk id: 3446
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
Un palindrome est un mot ou une phrase dont l'ordre des lettres reste le même si on le lit de gauche à droite ou de droite à gauche. Par exemple, « ressasser » et « engage le jeu que je le gagne »

Chunk id: 4903
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
précédente. Cette méthode reste toutefois peu intuitive car cette instance de la fenêtre principale `self.racine` vaut finalement `None` !

Chunk id: 1791
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
de la classe mère (cf. explications plus bas). Notez bien que le premier argument passé au constructeur de la classe mère sera systématiquement l'instance en cours `self`. Le `print()` en lignes

Chunk id: 3269
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
Pointal, publié aux éditions Dunod. Une partie de cet ouvrage est téléchargeable gratuitement sur le site de [Laurent Pointal](https://perso.limsi.fr/pointal/python:courspython3).

Chunk id: 622
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
open-box-rem  
Dans l'interpréteur interactif, la variable `_` a une signication différente. Elle prend automatiquement la dernière valeur affichée :  
```python
>>> 3
3
>>> _
3
>>> "mésange"

Chunk id: 323
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#881-racine-carree
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.1 Racine carrée
Content:
### 8.8.1 Racine carrée

Chunk id: 1199
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#113-test-dappartenance
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.3 Test d'appartenance
Content:
```python
liste = [1, 3, 5, 7, 9]
>>> 3 in liste
True
>>> 4 in liste
False
>>> 3 not in liste
False
>>> 4 not in liste
True
```

Chunk id: 4454
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
Tout ce que nous avons vu avec les *f-strings* sur la manière de formatter l'affichage d'une variable (après les `:` au sein des accolades) est identique avec la méthode `.format()`. Par exemple

Chunk id: 1052
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
Python reconnaît certains types de variable automatiquement (entier, *float*). Par contre, pour une chaîne de caractères, il faut l'entourer de guillemets (doubles, simples, voire trois guillemets

Chunk id: 2318
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
De manière générale, écrivez des *docstrings* pour les modules, les fonctions, les classes et les méthodes. Lorsque l'explication est courte et compacte comme dans certaines fonctions ou méthodes

Chunk id: 4018
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
sont supérieurs à 15 :  
```python
>>> df[ df["Pau"]>15 ]
Paris  Lyon  Nantes  Pau
singe      20    21      22   23
souris     30    31      32   33
```

Chunk id: 2110
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1973-classe-atome
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.3 Classe `Atome`
Content:
### 19.7.3 Classe `Atome`

Chunk id: 2485
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
## 6.2 Tests à plusieurs cas

Chunk id: 1176
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
liste mais ne renvoient rien, c'est-à-dire qu'elles ne renvoient pas d'objet récupérable dans une variable. Il s'agit d'un exemple d'utilisation de méthode (donc de fonction particulière) qui fait

Chunk id: 1055
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
Dans l'interpréteur, l'affichage direct du contenu d'une chaîne de caractères se fait avec des guillemets simples, quel que soit le type de guillemets utilisé pour définir la chaîne de caractères.

Chunk id: 2440
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Documentez-vous. L'algorithme dont vous avez besoin existe-t-il déjà dans un autre module ? Existe-t-il sous la forme de pseudo-code ? De quels outils mathématiques avez-vous besoin dans votre

Chunk id: 2768
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
```python
>>> i = 0
>>> while i < 10:
...     reponse = input("Entrez un entier supérieur à 10 : ")
...     i = int(reponse)
...
Entrez un entier supérieur à 10 : 4

Chunk id: 2352
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
## 15.3 Outils de contrôle qualité du code

Chunk id: 3281
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
Mais *a contrario* des listes, les chaînes de caractères présentent toutefois une différence notable, ce sont **des listes non modifiables**. Une fois une chaîne de caractères définie, vous ne pouvez

Chunk id: 1322
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
Lignes 4 à 5. La fonction `dir()` nous montre que l'attribut `.couleur` a bien été ajouté à l'objet.  
Lignes 6. La notation `instance.attribut` donne accès à l'attribut de l'objet.

Chunk id: 590
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
et `element` dans la boucle est possible du fait que Python autorise l'affectation multiple du style `indice, element = 0, 75` (voir rubrique suivante).

Chunk id: 3410
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
Le fichier [`UBI4_SCerevisiae.fasta`](https://python.sdv.univ-paris-diderot.fr/data-files/UBI4_SCerevisiae.fasta) contient une séquence d'ADN au format FASTA.

Chunk id: 1619
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
D'autres subtilités concerneront la gestion des noms en cas de définition d'une nouvelle classe héritant d'une classe mère. Ces aspects sont présentés dans la rubrique *Héritage* de ce chapitre.

Chunk id: 4341
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
```python
"Ceci est une chaîne de caractères"
```  
L'équivalent en *f-string* est tout simplement la même chaîne de caractères précédée du caractère `f` **sans espace** entre les deux :  
```python

Chunk id: 970
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
veut mettre un *backslash* littéral (donc `\\`), puis un second niveau *regex* dans lequel on veut retrouver `\1`. Si cela est confus, retenez seulement qu'il faut mettre un `\\` devant le numéro de

Chunk id: 2802
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
Créez une seconde version de votre script, cette fois-ci avec deux boucles `while`.

Chunk id: 983
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
Créez un script `regex_genbank.py` :  
- qui recherche le mot `DEFINITION` en début de ligne dans le fichier GenBank, puis affiche la ligne correspondante ;

Chunk id: 515
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
```python
>>> dico = {"a": 15, "b": 5, "c":20}
>>> sorted(dico, key=dico.get)
['b', 'a', 'c']
```

Chunk id: 2717
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> for i in range(4):
...     print(animaux[i])
...
girafe
tigre
singe
souris
```

Chunk id: 3772
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
- Les opérateurs logiques `&` et `|` s'appliquent sur les *arrays* et sont différents des opérateurs logiques `and` et `or` qui eux s'appliquent sur les booléens (`True` ou `False`) ;

Chunk id: 4299
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#chargement-du-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.1 Chargement du jeu de données
Content:
Affichez les 6 premières lignes du jeu de données.  
Combien de lignes contient le jeu de données ?

Chunk id: 59
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
en anglais), c'est-à-dire savoir là où elles sont visibles. On a vu que les variables créées au sein d'une fonction ne sont pas visibles à l'extérieur de celle-ci car elles étaient **locales** à la

Chunk id: 16
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
#programme principal
print(calc_vals(-5, 5))
```

Chunk id: 3589
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
La méthode `.reshape()` attend que les nouvelles dimensions soient **compatibles** avec la dimension initiale de l'objet *array*, c'est-à-dire que le nombre d'éléments contenus dans les différents

Chunk id: 3050
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
plt.savefig("sin2ori.png")
```  
Ouvrez l'image `sin2ori.png`.  
open-box-rem  
Le module *matplotlib* sera expliqué en détail dans le chapitre 17 *Quelques modules d'intérêt en bioinformatique*.

Chunk id: 4110
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
La colonne `Source` contient des chaînes de caractères, on peut rapidement
déterminer le nombre de protéines pour chaque organisme :  
```python
>>> df["Source"].value_counts()

Chunk id: 3762
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
à fait possible de définir des *arrays* de booléens. La fonction `np.full()` vue ci-dessus nous permet d'en construire facilement :

Chunk id: 208
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
- Pour vous déplacer dans l'aide, utilisez les flèches du haut et du bas pour parcourir les lignes les unes après les autres, ou les touches *page-up* et *page-down* pour faire défiler l'aide page

Chunk id: 310
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
- D'ouvrir le fichier dont le nom est fourni en argument, de compter puis d'afficher le nombre de lignes.  
Par contre, le script ne vérifie pas si le fichier existe bien :  
```bash

Chunk id: 860
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
open-box-rem

Chunk id: 1523
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
attributs de classe est par exemple de définir des constantes (mathématique ou autre), donc cela n'a pas de sens de vouloir les modifier ! Il est également déconseillé de créer des attributs de

Chunk id: 3863
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
```
>>> res_esummary[0].keys()
dict_keys(['Item', 'Id', 'PubDate', 'EPubDate', 'Source', 'AuthorList',
'LastAuthor', 'Title', 'Volume', 'Issue', 'Pages', 'LangList',

Chunk id: 591
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
Dans le même ordre d'idée, nous avons vu précédemment la méthode `.dict_items()` qui permettait d'itérer sur des couples clé / valeur d'un dictionnaire :  
```python

Chunk id: 143
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#127-exercices
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Content:
## 12.7 Exercices  
*Conseil* : pour le second exercice, créez un script puis exécutez-le dans un *shell*.

Chunk id: 2922
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```  
Que se passe-t-il lorsque nous avons un mélange d'arguments positionnels et par mot-clé ? Et bien les arguments positionnels doivent toujours être placés avant les arguments par mot-clé :

Chunk id: 742
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1351-objets-sequentiels
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.1 Objets séquentiels
Content:
### 13.5.1 Objets séquentiels  
| Container             | test d'appartenance et fonction `len()` | itérable | ordonné | indexable | modifiable | hachable |

Chunk id: 1303
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
On se souvient, un nom de classe commence toujours par une majuscule (voir le chapitre 15 *Bonnes pratiques en programmation Python*). Comme d'habitude, cette ligne attend un bloc d'instructions

Chunk id: 1470
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Bien que les deux types d'attributs soient fondamentalement différents au niveau de leur finalité, il existe des similitudes lorsqu'on veut accéder à leur valeur. Le code suivant illustre cela :

Chunk id: 2703
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
type en un autre (voir chapitre 2 *Variables*). Il n'y aucun intérêt à utiliser dans une boucle la construction `for i in list(range(4)):`. C'est même contre-productif. En effet, `range()` se

Chunk id: 551
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
qu'ils sont hachables sous certaines conditions. L'intérêt des tuples par rapport aux listes réside dans leur immutabilité. Cela, accèlère considérablement la manière dont Python accède à chaque

Chunk id: 2882
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
10)` ou encore `range(1, 10, 2)`. Le nombre d'argument est donc laissé libre à l'initiative du programmeur qui développe une nouvelle fonction.

Chunk id: 408
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
d'un élément). Pour autant, l'identifiant de cette liste est resté identique tout du long. Ceci démontre la mutabilité des listes : quelle que soit la manière dont on modifie une liste, celle-ci

Chunk id: 3838
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
relatifs à la transferrine (*transferrin* en anglais):  
```python
>>> from Bio import Entrez
>>> Entrez.email = "votremail@provider.fr"

Chunk id: 4401
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
```python
>>> print(f"accolades sans variable {}")
File "<stdin>", line 1
SyntaxError: f-string: empty expression not allowed
```

Chunk id: 4635
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Ligne 5. Pour quitter l'application, on utilise ici la méthode `.quit()`. Celle-ci casse la `.mainloop()` et arrête ainsi le gestionnaire d'événements. Cela mène à l'arrêt de l'application. Dans le

Chunk id: 5
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
des fonctions, et aussi voir ce qui se passe lorsque ces variables sont des listes. Attention, la plupart des lignes de code ci-dessous sont données à titre d'exemple pour bien comprendre ce qui se

Chunk id: 379
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
- **indexable** (*subscriptable* en anglais) : on peut retrouver un élément par son indice (i.e. sa position dans le container) ou plusieurs éléments avec une tranche ; en général, tout container

Chunk id: 3375
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
chaîne de caractères. Elles sont régulièrement employées pour analyser des données extraites d'un fichier.

Chunk id: 118
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
mois ? Quelqu'un d'autre pourrait-il comprendre votre programme ? Il existe de nombreuses autres [raisons](http://wiki.c2.com/?GlobalVariablesAreBad) que nous ne développerons pas ici, mais libre à

Chunk id: 3720
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
La fonction `transpose()` renvoie la [transposée](https://fr.wikipedia.org/wiki/Matrice_transpos%C3%A9e) d'un *array*. Par exemple, pour une matrice :  
```python

Chunk id: 2241
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
Si le nom du module est trop long, on peut utiliser un alias. L'instruction `from` est tolérée si vous n'importez que quelques fonctions clairement identifiées.  
En résumé :  
```python

Chunk id: 3365
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> chaine = "  \tfonctionne avec les tabulations et les retours à la ligne\n"
>>> chaine.strip()
'fonctionne avec les tabulations et les retours à la ligne'
```

Chunk id: 2735
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
```python
>>> x = 5
>>> x == 5
True
>>> x > 10
False
>>> x < 10
True
```

Chunk id: 1004
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
- affiche le mot `protein`, suivi d'un numéro qui s'incrémente, suivi du numéro d'accession.  
Voici un exemple de sortie attendue :  
```text
protein 00001 O95139
protein 00002 O75438

Chunk id: 2491
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
...     print("Le test est faux !")
...
Le test est faux !
```  
On peut utiliser une série de tests dans la même instruction `if`, notamment pour tester plusieurs valeurs d'une même variable.

Chunk id: 3910
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Lignes 6 et 7. Les fonctions `xlabel()` et `ylabel()` sont utilisées pour donner un nom aux axes.  
Ligne 8. La fonction `title()` définit le titre du graphique.

Chunk id: 489
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
renverra une erreur). Si besoin, nous pouvons les transformer en liste avec la fonction `list()` :

Chunk id: 109
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
De manière générale la règle LGI découle de la manière dont Python gère ce que l'on appelle « les espaces de noms ». C'est cette gestion qui définit la portée (visibilité) de chaque variable. Nous en

Chunk id: 1806
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
*?* ». Cette syntaxe est souvent utilisée lorsqu'une classe hérite d'une autre classe pour faire appel au constructeur de la classe mère. La raison est que nous souhaitons appeler une méthode de la

Chunk id: 1018
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1646-nettoyeur-de-doublons-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.6 Nettoyeur de doublons (exercice +++)
Content:
Téléchargez le fichier [`breves_doublons.txt`](https://python.sdv.univ-paris-diderot.fr/data-files/breves_doublons.txt) qui contient des mots répétés deux fois. Par exemple :  
```text

Chunk id: 3619
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
exhaustive est [ici](https://numpy.org/doc/stable/reference/arrays.ndarray.html#calculation). Par défaut, chacune de ces méthodes effectuera l'opération sur l'*array* entier, quelle que soit sa

Chunk id: 4498
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
## 20.1 Utilité d'une GUI

Chunk id: 1845
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
de n'importe quel attribut depuis l'extérieur. On a vu aussi qu'il était même possible de créer de nouveaux attributs depuis l'extérieur ! Dans d'autres langages orientés objet ceci n'est pas

Chunk id: 4652
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
if __name__ == "__main__":
app = Application()
app.title("Ma Première App :-)")
app.mainloop()
```

Chunk id: 4003
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
et l'étiquette de la ligne :  
```python
>>> df.loc["singe"]
Paris     20
Lyon      21
Nantes    22
Pau       23
Name: singe, dtype: int64
```  
Ici aussi, on peut sélectionner plusieurs lignes :

Chunk id: 277
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
uniforme**. Si on tire beaucoup de nombres, on aura la même probabilité d'obtenir tous les nombres possibles entre 0 et 1. La fonction `random.randint()` tire aussi un entier dans une distribution

Chunk id: 1795
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
avec `print()`. Celle-ci fait également appel à une méthode hértitée de la classe mère nommée `.affiche_conseil()`. Comme on a l'a héritée, elle est directement accessible avec un `self.méthode()`

Chunk id: 1506
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
syntaxe `instance.attribut_de_classe = nouvelle_valeur`. Que se passe-t-il exactement ? La figure @fig:classe_var_instance3 nous montre l'état des variables grâce au site *Python Tutor*. Celui-ci

Chunk id: 4523
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
## 20.2 Quelques concepts liés à la programmation graphique

Chunk id: 4766
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
#Incrémente coord baballe.
self.x += self.dx
self.y += self.dy
#Vérifier que la baballe ne sort pas du canvas (choc élastique).
if self.x < 10:
self.dx = abs(self.dx)
if self.x > 400-self.size-10:

Chunk id: 1837
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
sur un projet, surtout au début de celui-ci, n'est pas chose aisée. Nous vous conseillons de lire d'autres ressources et de vous entraîner sur un maximum d'exemples.

Chunk id: 3274
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#101-preambule
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.1 Préambule
Content:
# 10 Plus sur les chaînes de caractères  
## 10.1 Préambule

Chunk id: 4572
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#204-prise-en-main-du-module-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Content:
plutôt de vous montrer quelques pistes. Pour apprendre à piloter ce module, nous pensons qu'il est intéressant de vous montrer des exemples. Nous allons donc en présenter quelques-uns qui pourraient

Chunk id: 755
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1354-types-de-base
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.4 Types de base
Content:
### 13.5.4 Types de base  
Il est aussi intéressant de comparer ces propriétés avec celles des types numériques de base qui ne sont pas des containers.

Chunk id: 4978
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
Créer une application affichant un compte à rebours dans un *label*. L'utilisateur choisira entre 1 et 240 minutes en passant un argument au lancement du script, par exemple : `python

Chunk id: 212
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
*Entrée*. Par exemple, pour chercher l'aide sur la fonction `randint()`, tapez `/randint` puis *Entrée*.

Chunk id: 2084
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
hérite de la classe `builtins.tuple` (on peut le voir en faisant `help(Citron)`). En ligne 2, on passe en argument le nom de la classe souhaitée (i.e. `Citron`), puis une chaîne de caractères avec

Chunk id: 3013
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#985-sequence-complementaire
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.5 Séquence complémentaire
Content:
Dans le programme principal, à partir de la séquence d'ADN
`seq = ["A", "T", "C", "G", "A", "T", "C", "G", "A", "T", "C"]`

Chunk id: 2033
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
```python
class Citron:
"""Voici la classe Citron.

Chunk id: 1793
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
26-29 illustre qu'après l'appel du constructeur de la classe mère  tous les attributs d'instance (`self.taille`, `self.poids`, etc.) ont bel et bien été créés.

Chunk id: 1037
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
seulement le nom d'une variable (sans aucune autre indication) n'affichera pas la valeur de la variable à l'écran lors de l'exécution (pour autant, cette instruction reste valide et ne générera pas

Chunk id: 4355
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
Même si cela ne présente que peu d'intérêt pour l'instant, il s'agit d'une commande Python parfaitement valide. Nous verrons des exemples plus pertinents par la suite. Cela fonctionne avec n'importe

Chunk id: 910
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
## 16.3 Le module *re*  
### 16.3.1 La fonction `search()`

Chunk id: 4216
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
(ligne 7). Les coordonnées sont toutes enregistrées sur une seule ligne, les unes après les autres.

Chunk id: 1547
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
### 19.2.1 Rappel sur la règle LGI

Chunk id: 4791
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Lignes 40 à 58. On définit une méthode `.move()` qui va gérer le déplacement de la baballe avec des chocs élastiques sur les parois (et faire en sorte qu'elle ne sorte pas du *canvas*).

Chunk id: 1987
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
En Python, il n'existe pas d'attributs privés comme dans d'autres langages orientés objet. L'utilisateur a accès à tous les attributs quels qu'ils soient, même s'ils contiennent un ou plusieurs

Chunk id: 3556
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> np.arange(10, 0, -1)
array([10,  9,  8,  7,  6,  5,  4,  3,  2,  1])
```

Chunk id: 1279
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Dans les chapitres précédents, nous avons déjà mentionné qu'en Python tout est objet. Une variable de type *int* est en fait un objet de type *int*, donc construit à partir de la classe *int*. Pareil

Chunk id: 4298
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#chargement-du-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.1 Chargement du jeu de données
Content:
par défaut avec l'argument `sep="\t"`. Utilisez également l'argument `index_col` pour utiliser la colonne `name` comme index.

Chunk id: 45
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
la variable locale qui récupère cet argument est `nb`. Au sein de la fonction, celle-ci se rappelle elle-même (ligne 5), mais cette fois-ci en passant la valeur 3. Au prochain appel, ce sera avec la

Chunk id: 1625
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
En programmation, le polymorphisme est la capacité d'une fonction (ou méthode) à se comporter différemment en fonction de l'objet qui lui est passé. Une fonction donnée peut donc avoir plusieurs

Chunk id: 213
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
- Vous pouvez également obtenir de l'aide sur une fonction particulière d'un module de la manière suivante :  
`help(random.randint)`  
close-box-rem

Chunk id: 4064
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
- le nombre d'acides aminés qui constituent la protéine (`Length`) ;
- et la masse molaire de la protéine (`MW`).

Chunk id: 867
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`$`  
:   Fin de chaîne de caractères ou de ligne.  
Exemple : la *regex* `ATG$` est retrouvée dans la chaîne de caractères `TGCATG` mais pas dans la chaîne `CCATGTT`.  
`.`

Chunk id: 4378
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
>>> print(f"Ce génome contient {nb_G:d} G et {nb_C:d} C, soit une prop de GC de {prop_GC:.2f}")
Ce génome contient 4500 G et 2575 C, soit une prop de GC de 0.48
>>> perc_GC = prop_GC * 100

Chunk id: 4066
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
La colonne d'entiers tout à gauche est un index automatiquement créé par *pandas*.  
Nous pouvons demander à *pandas* d'utiliser une colonne particulière comme index.

Chunk id: 4176
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
1990-12-31    1
1991-12-31    0
1992-12-31    1
1993-12-31    1
```
Les dates apparaissent maintenant comme le dernier jour de l'année mais désignent

Chunk id: 2856
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
autres). Cette **modularité** améliore la qualité générale et la lisibilité du code. Vous verrez qu'en Python, les fonctions présentent une grande flexibilité.

Chunk id: 1651
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
if __name__ == "__main__":
citron1 = CitronBasique()
print(citron1)
citron2 = CitronCool("jaune foncée", "minuscule")
print(citron2)
```

Chunk id: 1205
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
Techniquement, Python utilise des pointeurs (comme dans le langage de programmation C) vers les mêmes objets. *Python Tutor* l'illustre avec des flèches qui partent des variables `x` et `y` et qui

Chunk id: 4227
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#calcul-de-la-distance
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.4 Calcul de la distance
Content:
Pour chaque atome, affichez le numéro de l'atome et la distance entre carbones alpha consécutifs avec un chiffres après la virgule. Repérez la valeur surprenante.

Chunk id: 903
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
## 16.2 Quelques ressources en ligne

Chunk id: 4012
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-sur-les-lignes-et-les-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.3 Sélection sur les lignes et les colonnes
Content:
```python
>>> df.loc["souris", "Pau"]
33
>>> df.loc[["singe", "souris"], ['Nantes', 'Lyon']]
Nantes  Lyon
singe       22    21
souris      32    31
```

Chunk id: 1965
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
close-box-more

Chunk id: 4400
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
Accolades littérales {} ou { ou } et pour le formatage 10
```  
Une remarque importante, si on ne met pas de variable à formater entre les accolades dans une *f-string*, cela conduit à une erreur :

Chunk id: 185
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
À l'aide du mot-clé `from`, on peut importer une fonction spécifique d'un module donné. Remarquez bien qu'il est inutile de répéter le nom du module dans ce cas, seul le nom de la fonction en

Chunk id: 1910
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
des noms de méthodes que l'on a définies précédemment dans notre classe, mais on ne précise ni argument, ni parenthèse, ni `self` (voir le chapitre 20 *Fenêtres graphiques et Tkinter*). Avec cette

Chunk id: 4132
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
aminés dans la protéine, plus sa masse moléculaire va être élevée.  
Pour vérifier cela graphiquement, on représente la masse moléculaire de

Chunk id: 380
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
sa position dans le container) ou plusieurs éléments avec une tranche ; en général, tout container indexable est ordonné ;

Chunk id: 4043
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
Un autre comportement par défaut de `concat()` est que cette fonction va combiner les *dataframes* en se basant sur leurs index. Il est néanmoins possible de préciser, pour chaque *dataframe*, le nom

Chunk id: 3736
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
>>> np.linalg.eig(a)
(array([1., 2., 3.]), array([[1., 0., 0.],
[0., 1., 0.],
[0., 0., 1.]]))
```  
Ligne 1. La fonction `.diag()` permet de générer une matrice diagonale.

Chunk id: 2043
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
|      Constructeur de la classe Citron.
|
|      Ce constructeur prend deux arguments par mot-clé
|      couleur et taille.
|
|  __str__(self)
|      Redéfinit le comportement avec print().
|

Chunk id: 1076
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
## 2.5 Opérations  
### 2.5.1 Opérations sur les types numériques  
Les quatre opérations arithmétiques de base se font de manière simple sur les types numériques (nombres entiers et *floats*) :

Chunk id: 2669
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
un objet constitué d'autres objets) tel qu'une liste. Nous verrons aussi plus tard d'autres objets séquentiels sur lesquels on peut itérer dans une boucle.

Chunk id: 4292
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1766-analyse-dun-jeu-de-donnees-avec-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Content:
### 17.6.6 Analyse d'un jeu de données avec *pandas*  
Le jeu de données `people.tsv` contient les caractéristiques de quelques individus : prénom, sexe, taille (en cm) et âge (en années).

Chunk id: 3284
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
'f'
>>> animaux[4] = "F"
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
```

Chunk id: 1679
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
## 19.4 Héritage  
### 19.4.1 Prise en main

Chunk id: 1012
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1645-le-defi-du-de-htmliseur-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.5 Le défi du dé-htmliseur (exercice +++)
Content:
### 16.4.5 Le défi du dé-htmliseur (exercice +++)

Chunk id: 833
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
Un carbone alpha est présent dans chaque résidu (acide aminé) d'une protéine. On peut obtenir une bonne approximation du barycentre d'une protéine en calculant le barycentre de ses carbones alpha.

Chunk id: 3737
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
Lignes 12 à 15. La fonction `eig()` renvoie un tuple dont le premier élément (d'indice 0) correspond aux valeurs propres et le second (d'indice 1) aux vecteurs propres. Une façon commode de récupérer

Chunk id: 231
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*os*](https://docs.python.org/fr/3/library/os.html#module-os) : dialogue avec le système d'exploitation (cf. plus bas).

Chunk id: 1714
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
overloading*) qui désigne le fait d'avoir plusieurs définitions d'une fonction selon le nombres d'arguments et/ou leur type (la surcharge n'est pas supportée par Python contrairement à d'autres

Chunk id: 4158
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
[<matplotlib.lines.Line2D object at 0x7f85b933e208>]
>>> plt.xlabel("Taille (nombre d'acides aminés)")
Text(0.5, 0, "Taille (nombre d'acides aminés)")
>>> plt.ylabel("Masse moléculaire (Dalton)")

Chunk id: 4850
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
Pour plus d'informations, vous pouvez consulter la [documentation officielle de Python](https://docs.python.org/3/library/tkinter.ttk.html), ainsi que la documentation très complète du [site du

Chunk id: 2822
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
-1 ou 1 avec la même probabilité. Avant d'utiliser cette instruction vous mettrez au tout début de votre script la ligne

Chunk id: 4326
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```  
Pour afficher deux chaînes de caractères l'une à côté de l'autre, sans espace, on peut soit les concaténer, soit utiliser l'argument par mot-clé `sep` avec une chaîne de caractères vide :

Chunk id: 3254
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
Pour chaque base de la séquence ATCCGACTG, nous souhaitons effectuer deux actions : d'abord afficher la base puis compter une base de plus. Pour indiquer cela, on décalera vers la droite ces deux

Chunk id: 496
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
```python
>>> dico.items()[2]
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'dict_items' object is not subscriptable
>>> for key, val in dico.items():

Chunk id: 1040
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
l'instruction  `x = 2` signifie qu'on attribue la valeur située à droite de l'opérateur `=` (ici, `2`) à la variable située à gauche (ici, `x`). D'autres langages de programmation comme *R* utilisent

Chunk id: 1939
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
classe et d’instance*, l'objet `masse` créé en ligne 16 est un attribut de classe, on peut donc y accéder avec une syntaxe `self.masse` au sein d'une méthode.

Chunk id: 4094
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
Si le format de date utilisé est homogène sur tout le jeu de données et non ambigu,
*pandas* va se débrouiller pour trouver automatiquement le format de date utilisé.

Chunk id: 175
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
objet et `.bidule()` une méthode. Nous vous avions expliqué qu'une *méthode* était une fonction un peu particulière :

Chunk id: 3697
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Le format binaire possède en général l'extension `.npy` ou `.npz` lorsque les données sont compressées. L'avantage d'écrire au format binaire est que cela prend moins de place pour les gros tableaux.

Chunk id: 1430
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
L'exécution de ce code donnera :  
```text
$ python classe_exemple1.py
<__main__.Citron object at 0x7f4e5fb71438>
jaune
Traceback (most recent call last):

Chunk id: 3718
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
bien également les recommandations dans la dernière rubrique *17.1.10 Quelques conseils* sur quand utiliser la concaténation d'*arrays* *NumPy*.

Chunk id: 3367
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
## 10.6 Extraction de valeurs numériques d'une chaîne de caractères

Chunk id: 3228
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
que Python exécutera sous vos yeux (au moment où vous validerez la commande en appuyant sur la touche *Entrée*).

Chunk id: 3980
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
qui est équivalent à `[10, 11, 12, 13]` correspond à la première ligne du *dataframe*.
Notez ici qu'il faut avoir préalablement importer numpy avec l'instruction `import numpy as np`.

Chunk id: 4274
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
cela, pensez à augmenter le paramètre `retmax`. Vos PMID seront stockés dans la liste `pmids` sous forme de chaînes de caractères. Vérifiez sur PubMed que vous avez bien récupéré le bon nombre

Chunk id: 4467
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
fait valable. Si vous débutez Python, nous vous conseillons fortement d'apprendre et d'utiliser les *f-strings*. C'est ce que vous rencontrerez dans la suite de ce cours. Si vous connaissez déjà

Chunk id: 2436
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
mots en français (ou en anglais) les consignes qui vous ont été données ou le cahier des charges qui vous a été communiqué. Dessinez ou construisez des schémas si cela vous aide.

Chunk id: 3341
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
open-box-def

Chunk id: 549
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
Les **tuples** (« n-uplets » en français) sont des objets séquentiels correspondant aux listes (itérables, ordonnés et indexables) mais ils sont toutefois **non modifiables**. On verra plus bas

Chunk id: 3744
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
Lorqu'on a une matrice, on est souvent amené à la parcourir par ligne ou par colonne. Une fonctionnalité bien commode vient du fait que les *arrays NumPy* sont directement itérables par ligne :

Chunk id: 2649
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
entrer soit le caractère `+` si le nombre choisi est plus grand que le nombre proposé par l'ordinateur, soit le caractère `-` si le nombre choisi est plus petit que le nombre proposé par

Chunk id: 173
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
open-box-rem

Chunk id: 3150
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
: Windows, Mac OS X, Linux, Android, iOS, depuis les mini-ordinateurs Raspberry Pi jusqu'aux supercalculateurs.

Chunk id: 229
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*math*](https://docs.python.org/fr/3/library/math.html#module-math) : fonctions et constantes mathématiques de base (sin, cos, exp, pi...).

Chunk id: 744
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1351-objets-sequentiels
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.1 Objets séquentiels
Content:
| liste                 | oui                                     | oui      | oui     | oui       | oui        | non      |

Chunk id: 849
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
Dans ce chapitre, nous ne ferons que quelques rappels sur les expressions régulières. Pour une documentation plus complète, référez-vous à la [page d'aide des expressions

Chunk id: 2592
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
de -57 degrés et -47 degrés respectivement. Bien sûr, il est très rare que l'on trouve ces valeurs parfaites dans une protéine, et il est habituel de tolérer une déviation de $\pm$ 30 degrés autour

Chunk id: 2830
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
$x_n = x_{n-1} + x_{n-2}$  
Par définition, les deux premiers termes sont $x_0 = 0$ et $x_1 = 1$.

Chunk id: 1828
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
def __str__(self):
return Fruit.affiche_conseil(self, "Orange", "Trop bon en jus !")
```

Chunk id: 3899
Number of Tokens: 84
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
temps = [1, 2, 3, 4, 6, 7, 9]
concentration = [5.5, 7.2, 11.8, 13.6, 19.1, 21.7, 29.4]
plt.scatter(temps, concentration, marker="o", color="blue")
plt.xlabel("Temps (h)")

Chunk id: 3567
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> w = np.array([[1, 2], [3, 4], [5, 6]])
>>> w
array([[1, 2],
[3, 4],
[5, 6]])
```

Chunk id: 4815
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
de l'instruction `self.canv.coords()` (dans la méthode `.move()`); ii) de même que pour la méthode `.boom()`, ces deux méthodes prennent un argument après le `self` (`lclick` ou `rclick`) récupérant

Chunk id: 3779
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
il est important de constater que l'*array* renvoyé perd la dimensionnalité de l'array `a` initial, il s'agit systématiquement d'un *array* 1D.

Chunk id: 2760
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
2. Test de la variable d'itération associée à l'instruction `while` (ligne 2).
3. Mise à jour de la variable d'itération dans le corps de la boucle (ligne 4).

Chunk id: 870
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`[A-Z]`  
:   N'importe quelle lettre majuscule.  
Exemple : la *regex* `C[A-Z]T` est retrouvée dans `CAT`, `CBT`, `CCT`...  
`[a-z]`  
:   N'importe quelle lettre minuscule.  
`[0-9]`

Chunk id: 4618
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
l'aurez compris la méthode `.pack()` place les *widgets* les uns en dessous des autres et ajuste la taille de la fenêtre. On verra plus bas que l'on peut passer des arguments à cette méthode pour

Chunk id: 85
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
![Passage d'une liste à une fonction.](img/fct_liste.png){ #fig:fct_liste width=90% }

Chunk id: 4214
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
et le fichier `1bta_CA.txt` est ouvert en écriture (`w`).  
Pour chaque ligne du fichier PDB (ligne 2), si la ligne débute par `ATOM` et le  nom de l'atome est `CA` (ligne 3),

Chunk id: 1747
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
complémentaires* pour la définition d'une exception), puis les fonctions Python de base tout en minuscule. On retrouve par exemple `list` ou `str`, mais il y a aussi `object`. Toutefois ces fonctions

Chunk id: 4579
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
>>> bouton = tk.Button(racine, text="Quitter", fg="red",
...                    command=racine.destroy)
>>> label.pack()
>>> bouton.pack()
>>>
```

Chunk id: 589
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
En fin de compte, la fonction `enumerate()` itère sur une série de *tuples*. Pouvoir séparer `indice` et `element` dans la boucle est possible du fait que Python autorise l'affectation multiple du

Chunk id: 3191
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#14-introduction-au-shell
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.4 Introduction au *shell*
Content:
- du [*shell* PowerShell](https://fr.wikipedia.org/wiki/Windows_PowerShell) fonctionnant sous Windows.

Chunk id: 3466
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
chaque lettre de l'alphabet. Par exemple, « Portez ce vieux whisky au juge blond qui fume » est un pangramme.

Chunk id: 3248
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
## 1.8 Notion de bloc d'instructions et d'indentation

Chunk id: 1420
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
if __name__ == "__main__":
citron1 = Citron()
citron1.affiche_attributs()
```  
Ligne 3. On crée l'attribut `couleur` que l'on accroche à l'instance avec le `self`.

Chunk id: 2648
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Les caractères `[+/-/=]` indiquent à l'utilisateur comment il doit interagir avec l'ordinateur, c'est-à-dire entrer soit le caractère `+` si le nombre choisi est plus grand que le nombre proposé par

Chunk id: 2781
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#544-nombres-pairs-et-impairs
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.4 Nombres pairs et impairs
Content:
### 5.4.4 Nombres pairs et impairs

Chunk id: 2231
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
moindre ligne de code, faites en sorte que lorsque vous pressez la touche tabulation, cela ajoute 4 espaces (et non pas un caractère tabulation).

Chunk id: 3755
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
```  
Par défaut, cela se fait sur les lignes de l'*array* 2D. Cette fonctionnalité provient à nouveau du fait que pour *NumPy* `a[i]` correspond à la ligne d'indice `i` d'un *array* 2D.

Chunk id: 2196
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
» avec une figure en encart, un *shell* (voir figure @fig:jupyterlab-2)... Les possibilités sont infinies !

Chunk id: 4239
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
entourée d'eau (bleu) (coordonnées trouvées [ici](https://zenodo.org/record/153944)). Les atomes de phosphore des groupes phosphates sont représentés en boule de van der Waals brune. Dans cet

Chunk id: 3427
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
avec des acides aminés en code à trois lettres et renvoie une chaîne de caractères avec les acides aminés en code à 1 lettre.

Chunk id: 2481
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
...
```  
Il y a plusieurs remarques à faire concernant ces deux exemples :  
- Dans le premier exemple, le test étant vrai, l'instruction
`print("Le test est vrai !")`

Chunk id: 1085
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
Enfin, il existe des opérateurs « combinés » qui effectue une opération et une affectation en une seule étape :  
```python
>>> i = 0
>>> i = i + 1
>>> i
1
>>> i += 1
>>> i
2
>>> i += 2
>>> i
4
```

Chunk id: 4589
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
`tk.Label`, celui-ci indique la fenêtre parente où doit être dessinée le *label*. Cet argument doit toujours être passé en premier et il est vivement conseillé de le préciser. Nous avons passé un

Chunk id: 1533
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
Dans la [documentation officielle](https://docs.python.org/fr/3/tutorial/classes.html#python-scopes-and-namespaces), un espace de noms est défini comme suit : « *a namespace is a mapping from names

Chunk id: 3103
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
L'instruction `range()` est une fonction spéciale en Python qui  génère des nombres entiers compris dans un intervalle. Lorsqu'elle est utilisée en combinaison avec la fonction `list()`, on obtient

Chunk id: 3165
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#121-python-2-ou-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.1 Python 2 ou Python 3 ?
Content:
Si, néanmoins, vous deviez un jour travailler sur un ancien programme écrit en Python 2, sachez qu'il existe quelques différences importantes entre Python 2 et Python 3. Le chapitre 21 *Remarques

Chunk id: 2114
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1974-classe-atome-amelioree
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.4 Classe `Atome` améliorée
Content:
`.calcule_centre_masse()`. Redéfinissez le comportement avec `print()` (à l'aide de la méthode magique `.__str__()`) de manière à afficher les coordonnées et la masse de l'atome.

Chunk id: 3524
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
Nous allons aborder dans ce chapitre quelques modules très importants en bioinformatique. Le premier *NumPy* permet notamment de manipuler des vecteurs et des matrices. Le module *Biopython* permet

Chunk id: 1218
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
>>> x[1][1] = 77
>>> x
[[1, 2], [3, 77]]
>>> y
[[1, 2], [3, 77]]
```  
La méthode de copie qui **fonctionne à tous les coups** consiste à appeler la fonction `deepcopy()` du module *copy*.

Chunk id: 4148
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```  
Ligne 1. L'instruction `plt.clf()` efface le graphe précédent mais conserve les
noms des axes des abscisses et des ordonnées.

Chunk id: 1450
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
donc pour accéder aux attributs mais aussi aux méthodes, ou plus généralement à tout ce qui est accroché à la classe.

Chunk id: 3401
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
Vous pouvez également accéder à l'aide et à la documentation d'une méthode particulière avec `help()`, par exemple pour la méthode `.split()` :  
```text
>>> help(animaux.split)

Chunk id: 495
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
>>> dico.items()
dict_items([(0, 't'), (1, 'o'), (2, 't'), (3, 'o')])
```  
Celui-ci n'est pas indexable (on ne peut pas retrouver un élément par un indice) mais il est itérable :  
```python

Chunk id: 1803
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Instance Citron
taille: petite, masse: 50
saveur: acide, forme: ellipsoïde
conseil: Bon en tarte :-p !
```

Chunk id: 3179
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
[ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod). Bien sûr, si vous préférez d'autres éditeurs comme *Atom*, *Visual Studio Code*, *Sublime Text*, *emacs*, *vim*, *geany*... utilisez-les

Chunk id: 73
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
L'erreur renvoyée montre que Python pense que `x` est une variable locale qui n'a pas été encore assignée. Si on veut vraiment modifier une variable globale dans une fonction, il faut utiliser le

Chunk id: 4122
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
en une seule fois, il convient alors d'utiliser la méthode `.pivot_table()`
plus complexe mais aussi beaucoup plus puissante :  
```python

Chunk id: 2514
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
|     Vrai    |     OU    |     Vrai    |   Vrai   |
|     Vrai    |     OU    |     Faux    |   Vrai   |
|     Faux    |     OU    |     Vrai    |   Vrai   |

Chunk id: 334
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#884-affichage-temporise
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.4 Affichage temporisé
Content:
Documentation de la fonction `time.sleep()` :  
<https://docs.python.org/fr/3/library/time.html#time.sleep>

Chunk id: 937
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
```python
>>> animaux = "girafe tigre singe"
>>> regex.search(animaux)
>>> animaux = "tigre singe"
>>> regex.search(animaux)
<_sre.SRE_Match object at 0x7fefdaefe718>
>>> animaux = "singe tigre"

Chunk id: 38
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
n! = & n \times n - 1 \times \ldots \times 2 \times 1
\end{split}
$$  
Voici le code Python avec une fonction récursive :  
```python
def calc_factorielle(nb):
if nb == 1:
return 1
else:

Chunk id: 1397
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
d'un attribut d'instance* ci-dessus). La méthode `.__init__()` étant intrinsèquement une fonction, *Python Tutor* nous rappelle qu'elle ne renvoie rien (d'où le `None` dans la case *Return value*)

Chunk id: 1826
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
def __str__(self):
return Fruit.affiche_conseil(self, "Kaki",
"Bon à manger cru, miam !")

Chunk id: 4842
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
vous donnera une vue d'ensemble des différentes méthodes associées à chaque widget.

Chunk id: 1856
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
close-box-rem  
Regardons à quoi pourrait ressembler une telle stratégie en Python :  
```python
class Citron:
def __init__(self, couleur="jaune", masse=0):
self.couleur = couleur

Chunk id: 597
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
On pourrait concevoir la même chose sur 4, 5... éléments. La seule contrainte est d'avoir une correspondance systématique entre le nombre de variables d'itération (par exemple 3 variables dans

Chunk id: 2834
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
l'élément de rang $n$ et l'élément de rang $n - 1$. Ce rapport tend-il vers une constante ? Si oui, laquelle ?

Chunk id: 3633
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
complète (d'indice *i*), une colonne complète (d'indice *j*) ou bien un seul élément. La figure @fig:array2Dlignescolonnes montre comment sont organisés les lignes / colonnes et indices.

Chunk id: 60
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
d'une fonction ne sont pas visibles à l'extérieur de celle-ci car elles étaient **locales** à la fonction. Observez le code suivant :

Chunk id: 863
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
de traduction littérale en français, on peut utiliser les verbes « retrouver » ou « correspondre ». Par exemple, on pourra traduire l'expression « *The regex matches the line* » par « La *regex* est

Chunk id: 2779
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#543-nombres-de-1-a-10-sur-une-ligne
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.3 Nombres de 1 à 10 sur une ligne
Content:
### 5.4.3 Nombres de 1 à 10 sur une ligne  
Avec une boucle, affichez les nombres de 1 à 10 sur une seule ligne.

Chunk id: 3588
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> c = a.reshape((3, 2))
>>> c
array([[0, 1],
[2, 3],
[4, 5]])
>>> c.shape
(3, 2)
```

Chunk id: 586
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
*Boucles et comparaisons*. Cette dernière permettait d'itérer **en même temps** sur les indices et les éléments d'une liste :

Chunk id: 1645
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Nous allons prendre un exemple concret. Imaginons que suite à la création d'une classe, nous souhaitions que Python affiche un message personnalisé lors de l'utilisation de la fonction `print()` avec

Chunk id: 3612
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Ceci peut amener des confusions spécialement pour un *array* 1D `[0 1 2 3 4 5 6 7 8 9]` et une liste contenant les même éléments `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`. Dans ce cas, seule la présence ou

Chunk id: 2844
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
```python
>>> len([0, 1, 2])
3
```  
voici ce qui se passe :  
1. vous appelez `len()` en lui passant une liste en argument (ici la liste `[0, 1, 2]`) ;

Chunk id: 3259
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
une fois l'affichage puis le comptage de chaque base terminés, la ligne correspondante n'est pas indentée (c'est-à-dire qu'elle n'est pas décalée vers la droite).

Chunk id: 3643
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
Bien que cela soit possible, nous vous recommandons tout de même la syntaxe `a[i, j]` qui est plus proche de la [définition mathématiques d'un élément de

Chunk id: 3858
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
![Aperçu de la publication *Known and potential roles of transferrin in iron biology* depuis le site PubMed.](img/entrez-transferrin.png "Aperçu de la publication Known and potential roles of

Chunk id: 1698
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
méthodes et que l'on souhaite en ajouter de nouvelles, il suffit de créer une classe fille héritant d'une classe mère.

Chunk id: 1080
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
L'opérateur `/` effectue une division. Contrairement aux opérateurs `+`, `-` et `*`, celui-ci renvoie systématiquement un *float* :  
```python
>>> 3 / 4
0.75
>>> 2.5 / 2
1.25
```

Chunk id: 4636
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
et arrête ainsi le gestionnaire d'événements. Cela mène à l'arrêt de l'application. Dans le premier exemple dans l'interpréteur, on avait utilisé la méthode `.destroy()` sur la fenêtre principale.

Chunk id: 255
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
La fonction `choice()` tire aléatoirement un élément d'une liste alors que `choices()` (avec un *s* à la fin) réalise plusieurs tirages aléatoires, dont le nombre est précisé par le paramètre `k`.

Chunk id: 2183
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
figure @fig:jupyter-ls illustre cette possibilité avec la commande `ls` qui affiche le contenu d'un répertoire.

Chunk id: 2429
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Ligne 26. Définition d'une classe. On a laissé deux lignes vides avant.  
Lignes 27 à 32. *Docstring* décrivant la classe.

Chunk id: 2621
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-2-plus-optimale-et-plus-rapide-mais-un-peu-plus-compliquee
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)
Content:
déterminé jusqu'à maintenant est nul. Le cas échéant, ce nombre n'est pas premier. Attention, pour cette méthode, il faudra initialiser la liste de nombres premiers avec le premier nombre premier

Chunk id: 3555
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> np.arange(10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
```  
Comme avec `range()`, on peut spécifier en argument une borne de début, une borne de fin et un pas :  
```python

Chunk id: 98
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
## 12.5 Règle LGI

Chunk id: 3109
Number of Tokens: 104
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
```python
>>> list(range(0, 5))
[0, 1, 2, 3, 4]
>>> list(range(15, 20))
[15, 16, 17, 18, 19]
>>> list(range(0, 1000, 200))
[0, 200, 400, 600, 800]
>>> list(range(2, -2, -1))
[2, 1, 0, -1]
```

Chunk id: 1109
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
```python
>>> i = 3
>>> str(i)
'3'
>>> i = '456'
>>> int(i)
456
>>> float(i)
456.0
>>> i = '3.1416'
>>> float(i)
3.1416
```

Chunk id: 3461
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
Les codes ASCII des lettres minuscules de l'alphabet vont de 97 (lettre « a ») à 122 (lettre « z »). La fonction `chr()` prend en argument un code ASCII sous la forme d'un entier et renvoie le

Chunk id: 3609
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
crochets et virgules pour séparer les éléments. Attention toutefois si vous utilisez la fonction `print()` car l'affichage est différent. Le mot *array*, les parenthèses et les virgules disparaissent

Chunk id: 3145
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
vient d'un hommage à la série télévisée *Monty Python's Flying Circus* dont G. van Rossum est fan. La première version publique de ce langage a été publiée en 1991.

Chunk id: 1825
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
```python
class Kaki(Fruit):
def __init__(self, taille=None, masse=None, saveur=None, forme=None):
Fruit.__init__(self, taille, masse, saveur, forme)

Chunk id: 4182
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
`.sort_values()`. Comme on ne veut  connaître que les premières dates
(celles où il y a eu le plus de dépôts), on utilisera également la méthode
`.head()` :  
```python

Chunk id: 3320
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
- Le préfixe `f` mis pour *formatted string* qui met en place l'écriture formattée comme vue au chapitre 3 *Affichage* :  
```python
>>> animal = "renard"
>>> animal2 = "poulain"

Chunk id: 369
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1311-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.1 Définition
Content:
Les containers que nous connaissons depuis le début de ce cours sont les listes et les chaînes de caractères. Même si on ne l'a pas vu explicitement, les objets de type *range* sont également des

Chunk id: 4580
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Ligne 2. On crée la fenêtre principale (vous la verrez apparaître !). Pour cela, on crée une instance de la classe `tk.Tk` dans la variable `racine`. Tous les *widgets* que l'on créera ensuite seront

Chunk id: 3099
Number of Tokens: 89
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
>>> x[::2]
[0, 2, 4, 6, 8]
>>> x[::3]
[0, 3, 6, 9]
>>> x[1:6:3]
[1, 4]
```  
Finalement, on se rend compte que l'accès au contenu d'une liste fonctionne sur le modèle `liste[début:fin:pas]`.

Chunk id: 3137
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4102-saisons
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.2 Saisons
Content:
Créez 4 listes `hiver`, `printemps`, `ete` et `automne` contenant les mois correspondants à ces saisons. Créez ensuite une liste `saisons` contenant les listes `hiver`, `printemps`, `ete` et

Chunk id: 1549
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
> Interne*. Lorsque Python rencontre un objet, il utilise cette règle de priorité pour accéder à la valeur de celui-ci. Si on est dans une fonction (ou une méthode), Python va d'abord chercher

Chunk id: 4529
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
il s'agit de la programmation dite « événementielle ». Jusqu'à maintenant vous avez programmé « linéairement », c'est-à-dire que les instructions du programme principal s'enchaînaient les unes

Chunk id: 732
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
>>> f1
frozenset({1, 3, 4, 5})
>>> f2
frozenset({0, 1, 2, 3, 5})
>>> f1.add(5)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 1642
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
la plupart du temps, destinées au fonctionnement interne de la classe. Nombre d'entre elles sont destinées à changer le comportement de fonctions ou opérateurs internes à Python avec les instances

Chunk id: 1448
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Ligne 4. Nous appelons ici la méthode `.affiche_message()` depuis le constructeur. Pour appeler cette méthode interne à la classe `Citron`, on doit utiliser une syntaxe `self.méthode()`. Le `self`

Chunk id: 3958
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
```python
>>> s = pd.Series([10, 20, 30, 40], index = ['a', 'b', 'c', 'd'])
>>> s
a    10
b    20
c    30
d    40
dtype: int64
```

Chunk id: 1788
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Lignes 20 à 29. Création de la classe `Citron` qui hérite de la classe `Fruit`. Le constructeur de `Citron` prend les mêmes arguments que ceux du constructeur de `Fruit`. La ligne 24 est une étape

Chunk id: 4971
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
Sur la base de l'application précédente, faites une application qui affiche l'heure dans un *label* en se mettant à jour sur l'heure de l'ordinateur une fois par seconde. Vous concevrez une méthode

Chunk id: 4410
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
sein des accolades. Ainsi, il est possible d'y mettre directement une opération ou encore un appel à une fonction :

Chunk id: 2117
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
# 18 Jupyter et ses notebooks

Chunk id: 662
Number of Tokens: 104
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
```python
>>> t = tuple(range(10))
>>> t
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
>>> hash(t)
-4181190870548101704
>>> t2 = ("Plouf", 2, (1, 3))
>>> t2
('Plouf', 2, (1, 3))
>>> hash(t2)
286288423668065022

Chunk id: 4553
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
valeur renvoyée par cet appel qui serait passée à `une_fct()` (n'essayez pas sur notre exemple car cela mènerait à une erreur !). Que se passe-t-il en filigrane lors de l'appel

Chunk id: 2529
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#65-instructions-break-et-continue
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.5 Instructions `break` et `continue`
Content:
...     if i > 2:
...         break
...     print(i)
...
0
1
2
```  
L'instruction `continue` saute à l'itération suivante, sans exécuter la suite du bloc d'instructions de la boucle.  
```python

Chunk id: 701
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
La méthode `.discard()` retire du *set* l'élément passé en argument. Si l'élément n'est pas présent dans le *set*, il ne se passe rien, le *set* reste intact. Comme les *sets* ne sont pas ordonnés ni

Chunk id: 2606
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
Voici un extrait de l'article sur les nombres premiers tiré de l'encyclopédie en ligne
[wikipédia](http://fr.wikipedia.org/wiki/Nombre_premier).

Chunk id: 3936
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
x = np.arange(len(bases))
plt.bar(x, distribution)
plt.xticks(x, bases)
plt.xlabel("Bases")
plt.ylabel("Nombre")
plt.title(f"Distribution des bases\n dans la séquence {sequence}")

Chunk id: 81
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
...     liste[1] = -127
...
>>> liste = [1,2,3]
>>> ma_fonction()
>>> liste
[1, -127, 3]
```  
De même, si vous passez une liste en argument, elle est modifiable au sein de la fonction :  
```python

Chunk id: 2239
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
Dans un script Python, on importe en général un module par ligne. D'abord les modules internes (classés par ordre alphabétique), c'est-à-dire les modules de base de Python, puis les modules externes

Chunk id: 4839
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
décrits dans les rubriques précédentes) sur le [site de l'Institut des mines et de technologie du Nouveau Mexique](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html) (MNT). Par ailleurs,

Chunk id: 4827
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Entry* : demande à l'utilisateur de saisir une valeur / une phrase.
- *Listbox* : affiche une liste d'options à choisir (comme dans la figure @fig:exemple_GUI).

Chunk id: 915
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
dans un test, il sera considéré comme vrai. Regardez cet exemple dans lequel on va rechercher le motif `tigre` dans la chaîne de caractères `"girafe tigre singe"` :

Chunk id: 3480
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
Pour extraire la séquence d'ADN, nous vous proposons d'utiliser un algorithme de « drapeau », c'est-à-dire une variable qui sera à `True` lorsqu'on lira les lignes contenant la séquence et à `False`

Chunk id: 4647
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
ainsi l'utilisation de variables globales. Souvenez-vous, elles sont à bannir définitivement ! Une classe crée un espace de noms propre à votre application, et toutes les variables nécessaires seront

Chunk id: 2106
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1971-classe-rectangle
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.1 Classe `Rectangle`
Content:
- affiche une ligne vide ;
- change le rectangle en carré de 30 m de côté ;
- calcule et affiche la surface de ce carré ;

Chunk id: 4957
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
- Le [site](http://effbot.org/tkinterbook/) de Fredrik Lundh est également très complet.

Chunk id: 3930
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
Ligne 13. La fonction `grid()` affiche une grille.

Chunk id: 3268
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
- Le livre *Apprendre à programmer en Python avec PyZo et Jupyter Notebook* de Bob Cordeau et Laurent Pointal, publié aux éditions Dunod. Une partie de cet ouvrage est téléchargeable gratuitement sur

Chunk id: 2220
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#151-de-la-bonne-syntaxe-avec-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Content:
anciennes PEP (les numéros sont croissants avec le temps). Elle consiste en un nombre important de recommandations sur la syntaxe de Python. Il est vivement recommandé de lire la PEP 8 en entier au

Chunk id: 2709
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
### 5.1.3 Nommage de la variable d'itération

Chunk id: 3678
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Nous vous conseillons vivement de consulter la [documentation complète](https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html) de cette fonction. `np.loadtxt()` contient tout un tas

Chunk id: 1481
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Ligne 14 à 21. Dans le programme principal, on instancie la classe `Citron` sans passer d'argument (les valeurs par défaut `"jaune"`, `"standard"` et `0` seront donc prises), puis on imprime les

Chunk id: 3231
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
l'aide de l'interpréteur, ce qui est très utile pour débugger (c'est-à-dire trouver et corriger les éventuelles erreurs d'un programme). Gardez bien en mémoire cette propriété de Python qui pourra

Chunk id: 19
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
![Appel d'une fonction dans une fonction.](img/appel_fct_ds_fct.png){ #fig:appel_fct_ds_fct width=90% }

Chunk id: 4005
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
```python
>>> df.loc[["singe", "chat"]]
Paris  Lyon  Nantes  Pau
singe     20    21      22   23
chat      10    11      12   13
```

Chunk id: 1588
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
ces dernières `self.saveur` et `self.couleur`. À l'extérieur, on utilisera `instance.saveur` et `instance.couleur`. Il n'y a donc aucun risque de confusion possible avec les variables globales

Chunk id: 2825
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
La [suite de Fibonacci](https://fr.wikipedia.org/wiki/Suite_de_Fibonacci) est une suite mathématique qui porte le nom de Leonardo Fibonacci, un mathématicien italien du XIII$^{\rm e}$ siècle.

Chunk id: 156
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
Les modules sont des programmes Python qui contiennent des fonctions que l'on est amené à réutiliser souvent (on les appelle aussi bibliothèques ou *libraries*). Ce sont des « boîtes à outils » qui

Chunk id: 3257
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
Une fois qu'on aura réalisé ces deux actions sur chaque base, on pourra passer à la suite, c'est-à-dire afficher la taille de la séquence. Pour bien préciser que cet affichage se fait à la fin, donc

Chunk id: 1734
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
*help* indique l'ordre de résolution des méthodes : d'abord la classe `Tk` elle-même, ensuite ses deux mères `Misc` puis `Wm`, et enfin une dernière classe nommée `builtins.object` dont nous allons

Chunk id: 773
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
```python
>>> {i for i in range(10)}
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> {i**2 for i in range(10)}
{0, 1, 64, 4, 36, 9, 16, 49, 81, 25}
>>>

Chunk id: 4613
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
passé dans la fenêtre. C'est normal, ces deux *widgets* existent bien, mais il faut maintenant les placer à l'intérieur de la fenêtre. On appelle pour ça la méthode `.pack()`, avec une notation objet

Chunk id: 3333
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Les méthodes `.lower()` et `.upper()` renvoient un texte en minuscule et en majuscule respectivement. On remarque que l'utilisation de ces méthodes n'altère pas la chaîne de caractères de départ mais

Chunk id: 2466
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.

Chunk id: 3017
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#986-distance-3d
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.6 Distance 3D
Content:
Créez une fonction `calc_distance_3D()` qui calcule la distance euclidienne en trois dimensions entre deux atomes. Testez votre fonction sur les 2 points `A(0,0,0)` et `B(1,1,1)`. Trouvez-vous bien

Chunk id: 1049
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
Dans l'exemple précédent, nous avons stocké un nombre entier (*int*) dans la variable `x`, mais il est tout à fait possible de stocker des *floats*, des chaînes de caractères (*string* ou *str*) ou

Chunk id: 4737
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Ligne 8. On lance la méthode `.creer_widgets()` (qui est elle aussi « accrochée » à la classe par le `self`).

Chunk id: 3499
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
Rappel : la distance euclidienne *d* entre deux points A et B de coordonnées cartésiennes respectives $(x_A, y_A, z_A)$ et $(x_B, y_B, z_B)$ se calcule comme suit :  
$$

Chunk id: 4828
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Listbox* : affiche une liste d'options à choisir (comme dans la figure @fig:exemple_GUI).
- *Radiobutton* : implémente des « boutons radio ».

Chunk id: 1142
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2112-predire-le-resultat-operations
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.2 Prédire le résultat : opérations
Content:
### 2.11.2 Prédire le résultat : opérations  
Essayez de prédire le résultat de chacune des instructions suivantes, puis vérifiez-le dans l'interpréteur Python :  
- `(1+2)**3`
- `"Da" * 4`

Chunk id: 1832
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
de l'héritage dans le chapitre 20 *Fenêtres graphiques et Tkinter* ainsi que dans les exercices du présent chapitre. Avec le module *Tkinter*, chaque objet graphique (bouton, zone de texte, etc.) est

Chunk id: 695
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
>>> s[1] = 5
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'set' object does not support item assignment
```  
Par contre, les *sets* sont itérables :  
```python

Chunk id: 3028
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
une liste de trois éléments contenant respectivement le minimum, le maximum et la moyenne de la liste.

Chunk id: 3836
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
et notamment d'interroger le site [PubMed](https://www.ncbi.nlm.nih.gov/pubmed/).  
Nous allons par exemple utiliser PubMed pour chercher des articles scientifiques

Chunk id: 2306
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Les commentaires qui suivent le code sur la même ligne sont à éviter le plus possible et doivent être séparés du code par au moins deux espaces :  
```python
x = x + 1   #My wonderful comment.
```

Chunk id: 1375
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
continuer la lecture de ce chapitre, retenez simplement que nous avons décidé de nommer la méthode `.__init__()` « constructeur » dans cet ouvrage.

Chunk id: 2756
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
```python
>>> i = 1
>>> while i <= 4:
...     print(i)
...     i = i + 1
...
1
2
3
4
```

Chunk id: 815
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
`compte_mots_n_lettres()` qui prend comme argument une séquence sous la forme d'une chaîne de caractères et le nombre de lettres des mots sous la forme d'un entier.

Chunk id: 1579
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
self.couleur = couleur
print("Dans __init__(), vous venez de créer un citron:",
self.affiche_attributs())

Chunk id: 906
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
- [RegExr](https://regexr.com/) et [ExtendsClass](https://extendsclass.com/regex-tester.html#python) : visualisent tous les endroits où une *regex* est retrouvée dans un texte.

Chunk id: 1153
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1111-append
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.1 `.append()`
Content:
### 11.1.1 `.append()`  
La méthode `.append()`, que l'on a déjà vu au chapitre 4 *Listes*, ajoute un élément à la fin d'une liste :  
```python
>>> a = [1, 2, 3]
>>> a.append(5)
>>> a
[1, 2, 3, 5]

Chunk id: 2079
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
```python
>>> import collections
>>> Citron = collections.namedtuple("Citron", "masse couleur saveur forme")
>>> Citron
<class '__main__.Citron'>

Chunk id: 505
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1325-existence-dune-cle-ou-dune-valeur
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.5 Existence d'une clé ou d'une valeur
Content:
```python
>>> ani2 = {'nom': 'singe', 'poids': 70, 'taille': 1.75}
>>> ani2.values()
dict_values(['singe', 70, 1.75])
>>> "singe" in ani2.values()
True
```

Chunk id: 493
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
Enfin, il existe la méthode `.items()` qui renvoie un nouvel objet `dict_items` :  
```python
>>> dico = {0: "t", 1: "o", 2: "t", 3: "o"}
>>> dico.items()

Chunk id: 4887
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
```  
Lignes 17 à 21. Commentons d'abord le programme principal : ici on crée la fenêtre principale dans l'instance `racine` puis on instancie notre classe en passant `racine` en argument.

Chunk id: 771
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
[article](https://www.datacamp.com/community/tutorials/python-dictionary-comprehension) sur le site *Datacamp*.

Chunk id: 4480
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
Nous aurons de nombreuses occasions de revoir cette notation `objet.méthode()`.

Chunk id: 3540
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
Les objets de type *array* correspondent à des tableaux à une ou plusieurs dimensions et permettent d'effectuer du calcul vectoriel. La fonction `array()` convertit un container (comme une liste ou

Chunk id: 4157
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
<matplotlib.collections.PathCollection object at 0x7f85b97bfef0>
>>> plt.plot(dfz["Length"], dfz["Length"]*lr.slope+lr.intercept, ls=":")
[<matplotlib.lines.Line2D object at 0x7f85b933e208>]

Chunk id: 1526
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
non désirés. Nous verrons plus bas un exemple concret d'attribut de classe qui est très utile, à savoir le concept d'objet de type *property*.

Chunk id: 169
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
>>> import math
>>> math.cos(math.pi / 2)
6.123233995736766e-17
>>> math.sin(math.pi / 2)
1.0
```

Chunk id: 2946
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Dans cet espace, seront stockées toutes les variables *globales* créées dans le programme. Python est maintenant prêt à exécuter le programme principal.

Chunk id: 1784
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
"Citron")
print("Je vais lancer la méthode .affiche_conseil() héritée "
"de la classe Fruit")
return self.affiche_conseil("Citron", "Bon en tarte :-p !")

Chunk id: 4405
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
`print(5*5)`, c'est d'abord la multiplication (`5*5`) qui est évaluée, puis son résultat qui est affiché à l'écran. On peut s'en rendre compte de la manière suivante dans l'interpréteur :

Chunk id: 1852
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
s'appellent aussi des *getters* et *setters* (en français on dit accesseurs et mutateurs). Un des avantages est qu'il est ainsi possible de vérifier l'intégrité des données grâce à ces méthodes : si

Chunk id: 3073
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
>>> a
[15]
>>> a = a + [-5]
>>> a
[15, -5]
```  
puis avec la méthode `.append()` :  
```python
>>> a.append(13)
>>> a
[15, -5, 13]
>>> a.append(-3)
>>> a
[15, -5, 13, -3]
```

Chunk id: 2041
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
|
|  Il s'agit d'une classe assez impressionnante qui crée des objets
|  citrons.
|  Par défaut une instance de Citron contient l'attribut de classe
|  saveur.
|
|  Methods defined here:
|

Chunk id: 1163
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1114-remove
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.4 `.remove()`
Content:
la méthode `.remove()` autant de fois que nécessaire pour retirer toutes les occurences d'un même élément :

Chunk id: 671
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
## 13.4 *Sets* et *frozensets*  
### 13.4.1 Définition et propriétés

Chunk id: 4249
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
- Calculez le $z$ moyen de tous les phosphores (nombre réel) et stockez-le dans la variable `mean_z`. La méthode `.mean()` vous sera utile.

Chunk id: 3640
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
open-box-rem  
- Pour un *array* 2D, si un seul indice est donné, par exemple `a[i]`, on récupère la ligne d'indice `i` sous forme d'*array* 1D :  
```python
>>> a
array([[1, 2],
[3, 4]])
>>> a[0]

Chunk id: 3906
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Lignes 3 et 4. On définit les variables `temps` et `concentration` comme des listes. Les deux listes doivent avoir la même longueur (7 éléments dans le cas présent).

Chunk id: 2544
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
open-box-adv

Chunk id: 4278
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
étape peut prendre une dizaine de minutes, soyez patient. Vous pouvez dans votre boucle afficher un message qui indique où vous en êtes dans la récupération des articles.

Chunk id: 197
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
>>> import random
>>> random.randint(0,10)
2
>>> del random
>>> random.randint(0,10)
Traceback (most recent call last):
File "<stdin>", line 1, in ?
NameError: name 'random' is not defined

Chunk id: 2151
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
![Notebook avec plusieurs cellules de code Python.](img/jupyter-cellule-4.png "Notebook avec plusieurs cellules de code Python"){ #fig:jupyter-cellule-4 width=80% }

Chunk id: 3817
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
est également utilisée par le module *pandas* et ses fameux *dataframes* pour faire de l'analyse de données.

Chunk id: 3934
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
```python
import numpy as np
import matplotlib.pyplot as plt

Chunk id: 163
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
## 8.2 Importation de modules  
Dans les chapitres précédents, nous avons rencontré la notion de module plusieurs fois. Notamment lorsque nous avons voulu tirer un nombre aléatoire :  
```python

Chunk id: 1709
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
fille a donc pris la priorité sur celle de la classe mère. Ce comportement provient de la gestion des espaces de noms par Python, il est traité en détail dans la rubrique suivante.

Chunk id: 4750
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
que l'on peut animer les objets se trouvant à l'intérieur. Nous allons également découvrir une technique intéressante, à savoir, comment « intercepter » des clics de souris générés ou des touches

Chunk id: 1890
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
La méthode pythonique est plus « douce » à lire, on parle aussi de *syntactic sugar* ou littéralement en français « *sucre syntaxique* ». De plus, à l'intérieur de la classe, il faut définir un

Chunk id: 5015
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2086-projet-simulation-dun-pendule
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.6 Projet simulation d'un pendule
Content:
*Tkinter* qui simule le mouvement d'un pendule. En réalisant une application complète de ce genre, un peu plus conséquente, vous serez capable de construire vos propres applications.

Chunk id: 2589
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
angles phi et psi sont deux angles mesurés autour de cette liaison peptidique. Leurs valeurs sont utiles pour définir la conformation spatiale (appelée « structure secondaire ») adoptée par les

Chunk id: 2292
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1516-lignes-vides
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.6 Lignes vides
Content:
### 15.1.6 Lignes vides  
Dans un script, les lignes vides sont utiles pour séparer visuellement les différentes parties du code.

Chunk id: 373
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
- Capacité à supporter le **test d'appartenance**. Souvenez-vous, il permettait de vérifier si un élément était présent dans une liste. Cela fonctionne donc aussi sur les chaînes de caractères ou

Chunk id: 3988
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
La clé associée à chaque colonne est le nom de la colonne.  
Ligne 5. Le *dataframe* est créé avec la fonction `pd.DataFrame()`
à laquelle on passe `data` en argument.

Chunk id: 2457
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
sous la forme d'un « œuf de Pâques » (*easter egg* en anglais) ou encore « fonctionnalité cachée d'un programme » en important un module nommé `this` :

Chunk id: 1237
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1154-formatage-fasta-dune-sequence-avec-la-ligne-de-commentaire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.4 Formatage FASTA d'une séquence (avec la ligne de commentaire)
Content:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
```

Chunk id: 2121
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
La cellule est l'élément de base d'un notebook Jupyter. Elle peut contenir du texte formaté au format Markdown ou du code informatique qui pourra être exécuté.

Chunk id: 1671
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
À la ligne 16, on utilise une notation `instance(arg1, arg2)`, ce qui va automatiquement appeler la méthode magique `.__call__()` qui mettra à jour les deux attributs d'instance `nbcitrons` et `age`

Chunk id: 3922
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
Les étapes supplémentaires par rapport au graphique précédent (figure @fig:pltinteractive) sont :  
Ligne 1. On charge le module *numpy* sous le nom `np`.

Chunk id: 3650
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
Afin d'éviter le problème, vous pouvez soit utiliser la fonction `np.array()` qui crée une nouvelle copie distincte de l'*array* initial, soit la fonction `copy.deepcopy()` comme pour les listes (cf.

Chunk id: 2078
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
faits pour vous ! Ce type de container est issu du très utile module *collections* que nous avions évoqué au Chapitre 13 *Dictionnaires, tuples et sets*.

Chunk id: 2438
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
indépendamment du reste. Pensez à écrire les *docstrings* en même temps que vous écrivez vos fonctions.

Chunk id: 4448
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
```python
>>> x = 32
>>> nom = "John"
>>> print("{} a {} ans".format(nom, x))
John a 32 ans
>>> nb_G = 4500
>>> nb_C = 2575
>>> prop_GC = (nb_G + nb_C)/14800

Chunk id: 3391
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
_init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mo
d__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__'

Chunk id: 4764
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
self.canv.bind("<Button-3>", self.decr)
self.bind("<Escape>", self.stop)
#Lancer la baballe.
self.move()

Chunk id: 47
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
valeur 2, puis finalement 1. Dans ce dernier cas, le test `if nb == 1:` est vrai et l'instruction `return 1` sera exécutée. À ce moment précis de l'exécution, les appels successifs forment une sorte

Chunk id: 131
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
Le code suivant produirait la même sortie :  
```python
def ajoute_un(liste):
for indice in range(len(liste)):
liste[indice] += 1

Chunk id: 402
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
l'on modifie `a`. Toutefois, on voit que son identifiant en ligne 6 est différent de la ligne 3. En fait, l'affectation en ligne 4 `a = 5` écrase l'ancienne variable `a` et en crée une nouvelle, ce

Chunk id: 2383
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```  
Lignes 2 et 3. `pydocstyle` indique que la *docstring* à la ligne 1 du script est sur deux lignes alors qu'elle devrait être sur une seule ligne.

Chunk id: 650
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
n'a pas changé d'identifiant. Si au contraire on essaie de remplacer cette sous-liste par autre chose, Python renvoie une erreur :

Chunk id: 3346
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```  
Attention, dans cet exemple, le séparateur est un seul caractères « `:` » (et non pas une combinaison de un ou plusieurs `:`) conduisant ainsi à une chaîne vide entre `singe` et `souris`.

Chunk id: 3069
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
>>> ani1 * 3
['girafe', 'tigre', 'girafe', 'tigre', 'girafe', 'tigre']
```  
L'opérateur `+` est très pratique pour concaténer deux listes.

Chunk id: 171
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
organisées par « thèmes ». Par exemple, les fonctions gérant les nombres aléatoires avec *random* et les fonctions mathématiques avec *math*. Python possède de nombreux autres modules internes

Chunk id: 1255
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1165-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.5 Séquence d'ADN aléatoire 2
Content:
### 11.6.5 Séquence d'ADN aléatoire 2

Chunk id: 789
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
de caractères passée en argument. Cela crée un objet de type `Counter` qui se comporte ensuite comme un dictionnaire, à une exception près : si on appelle une clé qui n'existe pas dans l'itérable

Chunk id: 2958
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 6.](img/fct_step6.png){ #fig:fct_step6 width=80% }
\

Chunk id: 2007
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
File "./pyscripts/mangling.py", line 11, in <module>
print(citron1.__mass)
AttributeError: 'Citron' object has no attribute '__mass'
```

Chunk id: 4617
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
le bouton va faire apparaître celui-ci juste en dessous du *label* et redimensionner la fenêtre. Vous l'aurez compris la méthode `.pack()` place les *widgets* les uns en dessous des autres et ajuste

Chunk id: 1601
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
attributs et méthodes dont on a besoin, sans avoir aucun risque de conflit de nom avec l'extérieur (variables locales, globales ou provenant de modules). L'utilisation de classes évitera ainsi

Chunk id: 1575
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
On vient de voir qu'un module avait son propre espace de noms, mais qu'en est-il des classes ? En utilisant les exemples vus depuis le début de ce chapitre, vous avez certainement la réponse. Une

Chunk id: 1861
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
#on change les attributs de citron1 avec les setters
citron1.set_couleur("jaune foncé")
citron1.set_masse(100)
print(citron1.get_couleur(), citron1.get_masse())
```

Chunk id: 949
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
qui correspond à la *regex*. Notez que la méthode `.search()` ne renvoie que la première zone qui correspond à l'expression régulière, même s'il en existe plusieurs :

Chunk id: 2286
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
```python
>>> ma_variable = 3
>>> if (ma_variable > 1 and ma_variable < 10
... and ma_variable % 2 == 1 and ma_variable % 3 == 0):
...     print(f"ma variable vaut {ma_variable}")
...

Chunk id: 2455
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
La PEP 20 est une sorte de réflexion philosophique avec des phrases simples qui devraient guider tout programmeur. Comme les développeurs de Python ne manque pas d'humour, celle-ci est accessible

Chunk id: 4329
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
L'écriture formatée est un mécanisme permettant d'afficher des variables avec un certain format, par exemple justifiées à gauche ou à droite, ou encore avec un certain nombre de décimales pour les

Chunk id: 1194
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
Cette méthode est certes plus simple, mais il arrive parfois qu'on doive utiliser des boucles tout de même, comme lorsqu'on lit un fichier. On rappelle que l'instruction `list(seq)` convertit un

Chunk id: 642
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
gardait le même identifiant. C'est toujours le cas ici, même si celle-ci se trouve dans un tuple. Regardons cela :

Chunk id: 2207
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
is read much more often than it is written* » (« le code est plus souvent lu qu'écrit »). Avec l'expérience, vous vous rendrez compte que cela est parfaitement vrai. Alors plus de temps à perdre,

Chunk id: 412
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
de hachage sur celui-ci avec la fonction interne `hash()`. En programmation, la valeur de hachage peut être vue comme une empreinte numérique de l'objet. Elle est obtenue en passant l'objet dans une

Chunk id: 4649
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
```python
import tkinter as tk

Chunk id: 4852
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2072-autres-pistes-a-approfondir
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Content:
### 20.7.2 Autres pistes à approfondir

Chunk id: 1302
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
En Python, le mot-clé `class` permet de créer sa propre classe, suivi du nom de cette classe. On se souvient, un nom de classe commence toujours par une majuscule (voir le chapitre 15 *Bonnes

Chunk id: 3967
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
sont les *dataframes*. Ceux-ci correspondent à des tableaux à deux dimensions
avec des étiquettes pour nommer les lignes et les colonnes.  
open-box-rem

Chunk id: 2847
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
```python
>>> ma_liste.append(5)
```  
1. Vous passez l'entier `5` en argument ;
2. la méthode `append()` ajoute l'entier `5` à l'objet `ma_liste` ;
3. et elle ne renvoie rien.

Chunk id: 424
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
l'immutabilité. En effet, un objet non modifiable est la plupart du temps hachable. Cela permet de l'identifier **en fonction de son contenu**. Par ailleurs, l'hachabilité est une implémentation qui

Chunk id: 3577
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
![Définition des lignes et colonnes dans un *array* 2D.](img/array_2D_lignes_colonnes.png "Définition des lignes et colonnes dans un array 2D"){ #fig:array2Dlignescolonnes width=60% }

Chunk id: 2218
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#151-de-la-bonne-syntaxe-avec-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Content:
## 15.1 De la bonne syntaxe avec la PEP 8

Chunk id: 1089
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
```python
>>> chaine = "Salut"
>>> chaine
'Salut'
>>> chaine + " Python"
'Salut Python'
>>> chaine * 3
'SalutSalutSalut'
```

Chunk id: 880
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`?`  
:   0 à 1 fois le caractère précédent ou l'expression entre parenthèses précédente.  
Exemple : la *regex* `A(CG)?T` est retrouvée dans `AT` ou `ACGT`.  
`{n}`

Chunk id: 1330
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
Une **variable ou attribut d'instance** est une variable accrochée à une instance et qui est spécifique à cette instance. Cet attribut n'existe donc pas forcément pour toutes les instances d'une

Chunk id: 1913
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
- L'instruction `instance.attribut` appellera la méthode `.accesseur()`.
- L'instruction `instance.attribut = valeur` appellera la méthode
`.mutateur()`.

Chunk id: 1853
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
est qu'il est ainsi possible de vérifier l'intégrité des données grâce à ces méthodes : si par exemple on souhaitait avoir un entier seulement, ou bien une valeur bornée, on peut facilement ajouter

Chunk id: 2792
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5410-pyramide
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.10 Pyramide
Content:
```text
*
***
*****
*******
*********
***********
*************
***************
*****************
*******************
```

Chunk id: 4096
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
`Deposit Date` comme une date :  
```python
>>> df["Deposit Date"] = pd.to_datetime(df["Deposit Date"])
```  
L'affichage des données n'est pas modifié :  
```python
>>> df.head()

Chunk id: 1617
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
présent ouvrage. Pour plus d'informations sur les fonctions imbriquées et la directive `nonlocal`, vous pouvez consulter la [documentation

Chunk id: 3040
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
`list_x` et `list_y` représentant les coordonnées d'une fonction mathématique (par exemple $x$ et $sin(x)$). Cette fonction renverra une liste de *floats* représentant la distance entre chaque point

Chunk id: 4212
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
if ligne.startswith("ATOM") and ligne[12:16].strip() == "CA":
x = ligne[30:38]
y = ligne[38:46]
z = ligne[46:54]
f_CA.write(f"{x} {y} {z} ")
```

Chunk id: 4230
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
```text
Lun 12 11 14 12
Mar 12 10 14 11
Mer 11 11 14 13
[...]
```

Chunk id: 3672
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
`np.loadtxt()`. Celle-ci lit un fichier organisé en lignes / colonnes. Par exemple, imaginons que nous ayons un fichier `donnees.dat` contenant :

Chunk id: 3173
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
pour installer Miniconda, Python 3 et les modules supplémentaires qui seront utilisés dans ce cours.

Chunk id: 1342
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
```python
print(Citron.couleur)
```  
Ce code affiche `jaune`. L'attribut de classe est aussi visible depuis n'importe quelle instance :  
```python
class Citron:
couleur = "jaune"

Chunk id: 2971
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
se passait. N'hésitez pas à l'utiliser sur des exemples ponctuels, ce site vous aidera à visualiser ce qui se passe lorsqu'un code ne fait pas ce que vous attendez.

Chunk id: 3937
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
plt.ylabel("Nombre")
plt.title(f"Distribution des bases\n dans la séquence {sequence}")
plt.savefig("distribution_bases.png", bbox_inches="tight", dpi=200)
```

Chunk id: 1542
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
pour cette fonction. *Python Tutor* nous montre cet espace sous la forme d'une zone dédiée (voir les chapitres 9 et 12 sur les fonctions). Si cette fonction appelle une autre fonction, un nouvel

Chunk id: 115
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
dans toutes les fonctions), car « *Ça va plus vite, c'est plus simple* ». C'est un très mauvais calcul, ne serait-ce que parce que vos fonctions ne seront pas réutilisables dans un autre contexte si

Chunk id: 374
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
élément était présent dans une liste. Cela fonctionne donc aussi sur les chaînes de caractères ou tout autre container :

Chunk id: 2479
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
```python
>>> x = 2
>>> if x == 2:
...     print("Le test est vrai !")
...
Le test est vrai !
```
et un second :
```python
>>> x = "souris"
>>> if x == "tigre":
...     print("Le test est vrai !")

Chunk id: 4974
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
pas la méthode `.after()`, cf. rubrique *Un canvas animé dans une classe* ci-dessus). Pour cette mise à jour, vous pourrez utiliser la méthode `.configure()`, par exemple :

Chunk id: 3363
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
La méthode `.strip()` enlève les espaces situés sur les bords de la chaîne de caractère mais pas ceux situés entre des caractères visibles. En réalité, cette méthode enlève n'importe quel combinaison

Chunk id: 4972
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
en se mettant à jour sur l'heure de l'ordinateur une fois par seconde. Vous concevrez une méthode `.mise_a_jour_heure()` qui met à jour l'heure dans le *label* et qui se rappelle elle-même toutes les

Chunk id: 142
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1263-conclusion
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.3 Conclusion
Content:
- Au risque de nous répéter, forcez-vous à utiliser des fonctions en permanence. Pratiquez, pratiquez... et pratiquez encore !

Chunk id: 2974
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
signifie *Don't Repeat Yourself*. Les fonctions permettent de satisfaire ce principe en évitant la duplication de code.

Chunk id: 3759
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Une des grandes puissance des *arrays* *NumPy* est qu'ils supportent les **masques booléens**. Avant de les définir, il est important d'introduire le concept d'*arrays* de booléens. Jusqu'à

Chunk id: 4404
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
la chaîne de caractères qui en résulte qui est affichée à l'écran. Tout comme dans l'instruction `print(5*5)`, c'est d'abord la multiplication (`5*5`) qui est évaluée, puis son résultat qui est

Chunk id: 3135
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4101-jours-de-la-semaine
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.1 Jours de la semaine
Content:
3. Trouvez deux manières pour accéder au dernier jour de la semaine.
4. Inversez les jours de la semaine en une commande.

Chunk id: 1370
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
à chaque instanciation de notre classe, et ne renvoie pas de valeur, il ne possède donc pas de `return`.

Chunk id: 1990
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
open-box-def  
En Python les attributs non publics sont des attributs dont le nom commence par un ou deux caractère(s) *underscore*. Par exemple, `_attribut`, ou `__attribut`.  
close-box-def

Chunk id: 959
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
```python
>>> regex = re.compile("[0-9]+\.[0-9]+")
>>> regex.sub("quelque chose", "pi vaut 3.14 et e vaut 2.72")
'pi vaut quelque chose et e vaut quelque chose'

Chunk id: 4052
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
### 17.5.1 Prise de contact avec le jeu de données  
Une fonctionnalité très intéressante de *pandas* est d'ouvrir très facilement
un fichier au format `.csv` :  
```python

Chunk id: 2431
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 58 à 72. Après les classes, on met les fonctions « classiques ». Avant chaque fonction, on laisse deux lignes vides.

Chunk id: 3358
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> chaine = "Bonjour monsieur le capitaine !"
>>> chaine.startswith("Bonjour")
True
>>> chaine.startswith("Au revoir")
False
```

Chunk id: 362
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
On rappelle que la distance *d* entre deux points A et B de coordonnées respectives $(x_A, y_A)$ et $(x_B, y_B)$ se calcule comme :  
$$
d = \sqrt{(x_B - x_A)^2 + (y_B - y_A)^2}
$$

Chunk id: 4286
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
Ensuite, avec le module *matplotlib*, vous allez pouvoir afficher la distribution des publications en fonction des années :  
```python
import matplotlib.pyplot as plt
plt.bar(x, y)
plt.show()
```

Chunk id: 720
Number of Tokens: 107
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> s1 = set(range(10))
>>> s2 = set(range(3, 7))
>>> s3 = set(range(15, 17))
>>> s1
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> s2
{3, 4, 5, 6}
>>> s3
{16, 15}
>>> s2.issubset(s1)
True

Chunk id: 4306
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
Dans le chapitre 1, nous avons rencontré la fonction `print()` qui affiche une chaîne de caractères (le fameux `"Hello world!"`). En fait, la fonction `print()` affiche l'argument qu'on lui passe

Chunk id: 222
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
'_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_wa
rn', 'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'g

Chunk id: 2328
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Comme indiqué dans le chapitre 14 *Création de modules*, n'oubliez pas que les *docstrings* sont destinées aux utilisateurs des modules, fonctions, méthodes et classes que vous avez développés. Les

Chunk id: 2747
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
```python
>>> "ali" < "alo"
True
>>> "abb" < "ada"
True
```

Chunk id: 896
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
mais il en existe d'autres comme `\r` et `\f` que nous ne développerons pas ici. `\s` est très pratique pour détecter une combinaison d'espace(s) et/ou de tabulation(s).

Chunk id: 4631
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
qui va suivre toutes nos applications *Tkinter* dans des scripts (et non pas dans l'interpréteur), cette ligne sera systématiquement présente. Elle sera souvent à la fin du script, puisque, à l'image

Chunk id: 1368
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
fonctionnement interne de notre classe, et sauf cas extrêmement rare, elle n'est pas supposée être lancée comme une fonction classique par l'utilisateur de la classe. Ce constructeur est exécuté à

Chunk id: 947
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
8
>>> resultat.end()
12
```  
La totalité de la correspondance est donnée par `.group(0)`, le premier élément entre parenthèses est donné par `.group(1)` et le second par `.group(2)`.

Chunk id: 4085
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
dtypes: float64(1), int64(1), object(2)
memory usage: 1.6+ KB
```  
Avec l'argument `memory_usage="deep"`, cette méthode permet surtout de connaitre avec précision

Chunk id: 4519
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
[PyQt](https://pyqt.readthedocs.io), [PyGObject](https://pygobject.readthedocs.io/en/latest/), etc. Nous présentons dans ce chapitre le module *Tkinter* qui est présent de base dans les distributions

Chunk id: 3544
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
>>> type(b)
<type 'numpy.ndarray'>
```  
Nous avons converti la liste `[1, 2, 3]` en *array*. Nous aurions obtenu le même résultat si nous avions converti le tuple `(1, 2, 3)` en *array*.

Chunk id: 3533
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
vous pouvez rapidement les installer avec la commande :

Chunk id: 729
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
l'immutabilité des *frozensets* donne l'assurance de ne pas pouvoir les modifier par erreur. Pour créer un *frozenset* on utilise la fonction interne `frozenset()` qui prend en argument un objet

Chunk id: 126
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
Concernant les fonctions qui modifient une liste, nous vous conseillons de l'indiquer clairement dans votre code. Pour cela, faites en sorte que la fonction renvoie la liste modifiée et de récupérer

Chunk id: 4879
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Comme illustré dans nos exemples, nous vous recommandons pour vos classes applications *Tkinter* d'hériter de la classe mère `tk.Tk` et d'utiliser le constructeur de la classe mère

Chunk id: 3931
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
Ligne 14. Enfin, la fonction `savefig()` enregistre le graphique produit sous la forme d'une image au format png. Des arguments par mot-clé définissent la manière de générer les marges autour du

Chunk id: 4521
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Python (pas besoin *a priori* de faire d'installation de module externe). *Tkinter* permet de piloter la bibliothèque graphique Tk (*Tool Kit*), *Tkinter* signifiant *tk interface*. On pourra noter

Chunk id: 2449
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
! Cela vous permettra également de retrouver plus facilement une erreur lorsque votre programme ne fait pas ce que vous souhaitez.

Chunk id: 3569
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> x = np.array([[[1, 2], [2, 3]], [[4, 5], [5, 6]]])
>>> x
array([[[1, 2],
[2, 3]],

Chunk id: 3867
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
```  
Nous pouvons alors facilement obtenir le titre, le DOI et la date de publication
(`PubDate`) de cet article, ainsi que le journal (`Source`) dans lequel il a été
publié :  
```python

Chunk id: 3389
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
'__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '_
_getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '_

Chunk id: 552
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
dans leur immutabilité. Cela, accèlère considérablement la manière dont Python accède à chaque élément et ils prennent moins de place en mémoire. Par ailleurs, on ne risque pas de modifier un de ses

Chunk id: 4169
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
le 10 février 1992 et la dernière le 22 mars 2018.  
Une autre question est de savoir combien de structures de transferrines ont
été déposées en fonction du temps.

Chunk id: 4224
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#calcul-de-la-distance
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.4 Calcul de la distance
Content:
Créez maintenant une matrice qui contient les coordonnées des $n-1$ premiers carbones alpha et une autre qui contient les coordonnées des $n-1$ derniers carbones alpha. Affichez les dimensions des

Chunk id: 4383
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> print(10) ; print(1000)
10
1000
>>> print(f"{10:>6d}") ; print(f"{1000:>6d}")
10
1000
>>> print(f"{10:<6d}") ; print(f"{1000:<6d}")
10
1000
>>> print(f"{10:^6d}") ; print(f"{1000:^6d}")

Chunk id: 244
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
bâtons...), *pandas* (analyse de données)... Ces modules vous serons présentés dans le chapitre 17 *Quelques modules d'intérêt en bioinformatique*.

Chunk id: 4929
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
instancier la fenêtre principale, si bien qu'il n'est pas obligatoire de passer cette instance en argument d'un *widget*. À ce moment, on peut se demander où est passé cette instance. Heureusement,

Chunk id: 997
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1643-nettoyeur-despaces
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.3 Nettoyeur d'espaces
Content:
Créez un script `cigale_fourmi.py` qui grâce à une *regex* et à la fonction `sub()` remplace plusieurs espaces par un seul espace dans le texte ci-dessus. Le nouveau texte « propre » sera enregistré

Chunk id: 2195
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
L'interface proposée par JupyterLab est très riche. On peut y organiser un notebook Jupyter « classique » avec une figure en encart, un *shell* (voir figure @fig:jupyterlab-2)... Les possibilités

Chunk id: 902
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
tous les A de cette chaîne (8 en tout) seront concernés, bien que `AA`, `AAA`, etc. « fonctionnent » également avec cette *regex*.

Chunk id: 2955
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 4.](img/fct_step4.png){ #fig:fct_step4 width=80% }
\  
- Étape 5 : Python est maintenant prêt à exécuter chaque ligne de code de la fonction.

Chunk id: 2169
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
consultant la page [Wikipédia](https://fr.wikipedia.org/wiki/Markdown) ou directement la [page de référence](https://daringfireball.net/projects/markdown/syntax).

Chunk id: 1605
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
### 19.2.4 Gestion des noms entre les attributs de classe et d'instance

Chunk id: 4240
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
de phosphore des groupes phosphates sont représentés en boule de van der Waals brune. Dans cet exercice on cherche à calculer le centre de masse de la membrane, ainsi que le centre de masse (COM) de

Chunk id: 3107
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
à 10 **exclu**. Nous verrons l'utilisation de la fonction `range()` toute seule dans le chapitre 5 *Boucles et comparaisons*.

Chunk id: 1126
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
passe » à la fonction. Dans l'instruction `type(2)`, c'est l'entier `2` qui est l'argument passé à la fonction `type()`. Pour l'instant, on retiendra qu'une fonction est une sorte de boîte à qui on

Chunk id: 161
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
à une [documentation exhaustive](https://docs.python.org/fr/3/py-modindex.html) sur le site de Python. N'hésitez pas à explorer un peu ce site, la quantité de modules disponibles est impressionnante

Chunk id: 2441
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
sous la forme de pseudo-code ? De quels outils mathématiques avez-vous besoin dans votre algorithme ?

Chunk id: 3260
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
Pratiquement, l'indentation en Python doit être homogène (soit des espaces, soit des tabulations, mais pas un mélange des deux). Une indentation avec 4 espaces est le style d'indentation recommandé

Chunk id: 3132
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4101-jours-de-la-semaine
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.1 Jours de la semaine
Content:
### 4.10.1 Jours de la semaine  
Constituez une liste `semaine` contenant les 7 jours de la semaine.

Chunk id: 1105
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#26-la-fonction-type
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.6 La fonction `type()`
Content:
open-box-warn  
Pour Python, la valeur `2` (nombre entier) est différente de `2.0` (*float*) et est aussi différente de `'2'` (chaîne de caractères).  
close-box-warn

Chunk id: 1700
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
```python
>>> fille = Fille()
>>> isinstance(fille, Fille)
True
>>> isinstance(fille, Mere)
True
```

Chunk id: 3414
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
- le nom du fichier FASTA,
- la longueur de la séquence (c'est-à-dire le nombre de bases qu'elle contient),
- un message vérifiant que le nombre de base est (ou non) un multiple de 3,

Chunk id: 51
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
`calc_factorielle(nb - 1)` soit 1) va être renvoyé à l'appel précédent, puis $3 \times 2 = 6$ (où 3 correspond à `nb` et 2 provient de `calc_factorielle(nb - 1)` soit 2) va être renvoyé à l'appel

Chunk id: 1272
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
presser » permettant d'en extraire le jus. En Python, on utilise une « classe » pour construire un objet. Dans notre exemple, la classe correspondrait au « moule » utilisé pour construire autant

Chunk id: 3872
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
utiliser la fonction `Entrez.efetch()` :  
```python
>>> req_efetch = Entrez.efetch(db="pubmed", id="22294463", rettype="txt")
>>> res_efetch = Entrez.read(req_efetch)
```

Chunk id: 1291
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
mais surtout beaucoup de pratique. Bien structurer ses programmes en POO est un véritable art. Il existe même des langages qui formalisent la construction de programmes orientés objets, par exemple

Chunk id: 583
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
close-box-rem

Chunk id: 2042
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
|  saveur.
|
|  Methods defined here:
|
|  __init__(self, couleur='jaune', taille='standard')
|      Constructeur de la classe Citron.
|
|      Ce constructeur prend deux arguments par mot-clé

Chunk id: 145
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#code
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.1 Prédire la sortie
Subsubsection Name: 12.7.1.1 Code 1
Content:
#### 12.7.1.1 Code 1  
```python
def hello(prenom):
print(f"Bonjour {prenom}")


#Programme principal.
hello("Patrick")
print(x)
```

Chunk id: 2896
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
```python
>>> def carre_cube2(x):
...     return [x**2, x**3]
...
>>> carre_cube2(3)
[9, 27]
```

Chunk id: 1536
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
peut être vu aussi comme une capsule dans laquelle on trouve des noms d'objets. Par exemple, le programme principal ou une fonction représentent chacun un espace de noms, un module aussi, et bien sûr

Chunk id: 1324
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
```python
>>> citron1 = Citron()
>>> citron1.__dict__
{}
>>> citron1.couleur = "jaune"
>>> citron1.__dict__
{'couleur': 'jaune'}
```

Chunk id: 467
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
si nous souhaitions stocker les coordonnées $(x, y, z)$ d'un point dans l'espace : `coors = [0, 1, 2]` pour la version liste, `coors = {"x": 0, "y": 1, "z": 2}` pour la version dictionnaire. Un

Chunk id: 2419
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Description détaillée ligne 1
Description détaillée ligne 2
Description détaillée ligne 3
"""
[...]
return une_chose

Chunk id: 3870
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
>>> res_esummary[0]["PubDate"]
'2012 Aug'
>>> res_esummary[0]["Source"]
'Biometals'
```  
Enfin, pour récupérer le résumé de la publication précédente, nous allons

Chunk id: 123
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
notions d'objet (on peut tout à fait « pythonner » sans cela), retenez la chose suivante sur les fonctions et les variables globales :

Chunk id: 4792
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Lignes 55 et 56. On utilise la méthode `.coords()` de la classe `Canvas`, qui « met à jour » les coordonnées de n'importe quel objet dessiné dans le *canvas* (c'est-à-dire que cela déplace l'objet).

Chunk id: 4050
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
Si vous n'êtes pas familier avec le format de fichier `.csv`, nous vous conseillons
de consulter l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 1232
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1153-formatage-dune-sequence-avec-60-caracteres-par-ligne
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.3 Formatage d'une séquence avec 60 caractères par ligne
Content:
>>> seq_split = [seq[i:i+width] for i in range(0, len(seq), width)]
>>> print("\n".join(seq_split))
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Chunk id: 2332
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Pour autant, la PEP 257 ne dit pas explicitement comment organiser les *docstrings* pour les fonctions et les méthodes. Pour répondre à ce besoin, deux solutions ont émergées :

Chunk id: 4943
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
se révéler parfois limitant. Il existe toutefois une astuce qui utilise les fonctions *lambda* ; nous expliquons brièvement les fonctions lambda dans le chapitre 21 *Remarques complémentaires*.

Chunk id: 2314
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Les *docstrings*, que l'on pourrait traduire par « chaînes de documentation » en français, sont un élément essentiel de nos programmes Python comme on l'a vu au chapitre 14 *Création de modules*. À

Chunk id: 1719
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
fonction du ou des héritage(s) de notre classe (à nouveau, cela provient de la manière dont Python gère les espaces de noms). Prenons l'exemple d'une classe déclarée comme suit `class Fille(Mere1,

Chunk id: 2505
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
Les deux codes pourtant très similaires produisent des résultats très différents. Si vous observez avec attention l'indentation des instructions sur la ligne 5, vous remarquerez que dans le code 1,

Chunk id: 908
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
- [Regular-Expressions.info](https://www.regular-expressions.info) : documentation exhaustive sur les *regex* (il y a même une section sur Python).

Chunk id: 349
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#888-compteur-de-lignes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.8 Compteur de lignes
Content:
$ python compte_lignes.py zoo2.txt
zoo2.txt contient 3 lignes.
$ python compte_lignes.py zoo3.txt
ERREUR : zoo3.txt n'existe pas.
```

Chunk id: 3783
Number of Tokens: 87
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
On peut bien sûr combiner plusieurs conditions avec les opérateurs logiques :  
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> a[(a > 3) | (a % 2 == 0)] = 0
>>> a
array([[1, 0, 3],

Chunk id: 1541
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
l'un par l'autre. Par exemple, à chaque fois que l'on appelle une fonction, un espace de noms est créé pour cette fonction. *Python Tutor* nous montre cet espace sous la forme d'une zone dédiée (voir

Chunk id: 1522
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Même si on peut modifier un attribut de classe, nous vous déconseillons de le faire. Une utilité des attributs de classe est par exemple de définir des constantes (mathématique ou autre), donc cela

Chunk id: 567
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
éléments. La création d'un nouveau tuple à chaque étape s'avère lourde et il n'y a aucune méthode pour faire cela puisque les tuples sont non modifiables. Pour ce genre de tâche, les listes sont

Chunk id: 3999
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.1 Sélection de colonnes
Content:
```python
>>> df["Lyon"]
chat      11
singe     21
souris    31
```  
ou plusieurs colonnes en même temps :  
```python
>>> df[["Lyon", "Pau"]]
Lyon  Pau
chat      11   13
singe     21   23

Chunk id: 2860
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
désigne le code qui est exécuté lorsqu'on lance le script Python, c'est-à-dire toute la suite d'instructions en dehors des fonctions. En général, dans un script Python, on écrit d'abord les fonctions

Chunk id: 826
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
- la coordonnée atomique *y* (`y`) avec une valeur *float*,
- la coordonnée atomique *z* (`z`) avec une valeur *float*.

Chunk id: 30
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
de fois qu'on le veut). Une fonction peut même s'appeler elle-même, cela s'appelle une fonction *récursive* (voir la rubrique suivante). Attention toutefois à retrouver vos petits si vous vous perdez

Chunk id: 4022
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
```  
On peut aussi combiner plusieurs conditions avec `&` pour l'opérateur **et** :  
```python
>>> df[ (df["Pau"]>15) & (df["Lyon"]>25) ]
Paris  Lyon  Nantes  Pau
souris     30    31      32   33

Chunk id: 1345
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
`instance.attribut = nouvelle_valeur` (voir la rubrique *Différence entre les attributs de classe et d'instance*).  
close-box-warn

Chunk id: 1938
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
l'objet de type *property*. Si vous avez bien lu la rubrique *Différence entre les attributs de classe et d’instance*, l'objet `masse` créé en ligne 16 est un attribut de classe, on peut donc y

Chunk id: 1028
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
- Python a « deviné » que la variable était un entier. On dit que Python est un langage au **typage dynamique**.

Chunk id: 3318
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
notera que seule l'utilisation du `print()` mène à l'interprétation des caractères spéciaux comme `\n`, comme expliqué dans la rubrique précédente.

Chunk id: 3357
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
>>> animaux.count("i")
2
>>> animaux.count("z")
0
>>> animaux.count("tigre")
1
```  
La méthode `.startswith()` vérifie si une chaîne de caractères commence par une autre chaîne de caractères :

Chunk id: 1711
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
À ce point, nous pouvons faire une note de sémantique importante. Python utilise le mécanisme de *redéfinition de méthode* (*method overriding*), c'est-à-dire qu'on redéfinit une méthode héritée

Chunk id: 2868
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
Dans l'exemple précédent, nous avons passé un argument à la fonction `carre()` qui nous a renvoyé (ou retourné) une valeur que nous avons immédiatement affichée à l'écran avec l'instruction

Chunk id: 4988
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
Celui-ci se décompose en pseudo-code de la façon suivante :

Chunk id: 416
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
close-box-def  
open-box-warn

Chunk id: 4112
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
Anas platyrhynchos        2
Oryctolagus cuniculus     2
Sus scrofa                1
Name: Source, dtype: int64
```  
Ainsi, 26 protéines sont d'origine humaine (`Homo sapiens`) et 10 proviennent

Chunk id: 4017
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
singe      20    21      22   23
souris     30    31      32   33
```  
Sélectionnons maintenant toutes les lignes pour lesquelles les effectifs à Pau
sont supérieurs à 15 :  
```python

Chunk id: 419
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
dans une fonction de hachage. L'identifiant est quant à lui attribué par Python à la création de l'objet. Il est constant tout le le long de la durée de vie de l'objet, un peu comme une carte

Chunk id: 4935
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
Les lignes 4 et 5 montrent que le bouton est un « enfant » de cette dernière.  
Enfin, ligne 6, on réassigne la destruction de la fenêtre lorsqu'on clique sur le bouton.

Chunk id: 1972
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
open-box-adv

Chunk id: 4009
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
```  
```python
>>> df.iloc[[1,0]]
Paris  Lyon  Nantes  Pau
singe     20    21      22   23
chat      10    11      12   13
```  
On peut également utiliser les tranches (comme pour les listes) :

Chunk id: 2979
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
30.0
>>> temp_in_fahrenheit = 100
>>> (temp_in_fahrenheit - 32) * (5/8)
42.5
```  
Malheureusement il y a une erreur dans la formule de conversion. En effet la formule exacte est :  
$$

Chunk id: 2489
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
... else:
...     print("Le test est faux !")
...
Le test est vrai !
>>> x = 3
>>> if x == 2:
...     print("Le test est vrai !")
... else:
...     print("Le test est faux !")
...
Le test est faux !

Chunk id: 1527
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Si vous souhaitez avoir des attributs modifiables dans votre classe, créez plutôt des attributs d'instance dans le `.__init__()`.  
close-box-adv

Chunk id: 2807
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
2, etc). Pour mieux comprendre ce qui est demandé, la figure @fig:demimatrice indique les cases à parcourir en gris :

Chunk id: 3760
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Avant de les définir, il est important d'introduire le concept d'*arrays* de booléens. Jusqu'à maintenant nous avions définis uniquement des *arrays* avec des types numériques *int* ou *float*. Il

Chunk id: 2071
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
```python
class Citron:
def __init__(self):
self.liste = []
```  
Ainsi, vous aurez des listes réellement indépendantes pour chaque instance.

Chunk id: 3649
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
close-box-warn

Chunk id: 4730
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
diameter = rd.randint(1, 50)
self.canv.create_oval(x, y, x+diameter, y+diameter,
fill=self.rd_col())

Chunk id: 3184
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#13-notations-utilisees
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.3 Notations utilisées
Content:
sont indiqués avec `cette police` pour les éléments ponctuels ou  
```text
sous cette forme,
sur plusieurs lignes,
pour les éléments les plus longs.
```

Chunk id: 2914
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
facultatif. Ce type d'argument ne doit pas être confondu avec les arguments positionnels présentés ci-dessus, dont la syntaxe est `def fct(arg):`.

Chunk id: 4534
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
open-box-def

Chunk id: 2236
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
- mener à un conflit si une de vos fonctions a le même nom ;

Chunk id: 4294
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1766-analyse-dun-jeu-de-donnees-avec-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Content:
| clara | female | 167 | 45|
| serge | male |181 | 44 |
| claire | female | 174 | 31 |
| ... | ... | ... | ... |  
L'objectif de cet exercice est de manipuler ces données avec *pandas*.

Chunk id: 4878
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
#### 20.7.2.3 Hériter de la classe Frame pour vos applications ?

Chunk id: 1936
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
automatiquement la méthode `.set_masse()`. Attention, dans cette commande, la variable `masse` à droite du signe `=` est une variable *locale* passée en argument. Par contre, `self.masse` sera

Chunk id: 4873
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
La méthode `.grid()` permet, grâce à l'utilisation d'une grille, un placement mieux contrôlé des différents *widgets*. La méthode `.place()` place enfin les *widgets* en utilisant les coordonnées de

Chunk id: 4660
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
cela ? On se souvient dans la version linéaire de l'application, on avait utilisé une instanciation classique : `racine = tk.Tk()`. Ici, l'effet de l'appel du constructeur de la classe mère permet

Chunk id: 883
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`{n,m}`  
:   *n* à *m* fois le caractère précédent ou l'expression entre parenthèses précédente.

Chunk id: 1840
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
les livres de [Gérard Swinnen](https://inforef.be/swi/python.htm), [Bob Cordeau et Laurent Pointal](https://perso.limsi.fr/pointal/python:courspython3), et [Vincent

Chunk id: 3348
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animaux = "girafe tigre singe souris"
>>> animaux.split(maxsplit=1)
['girafe', 'tigre singe souris']
>>> animaux.split(maxsplit=2)
['girafe', 'tigre', 'singe souris']
```

Chunk id: 440
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
## 13.2 Dictionnaires  
### 13.2.1 Définition

Chunk id: 4755
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Usage: python tk_baballe.py
- clic gauche: faire grossir la baballe
- clic droit: faire rétrécir la baballe
- clic central: relance la baballe (depuis le  point du clic)
dans une direction aléatoire

Chunk id: 1757
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__',
'__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',
'__str__', '__subclasshook__', '__weakref__']

Chunk id: 357
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
- Choisissez aléatoirement les coordonnées *x* et *y* d'un point entre -1 et 1. Utilisez la fonction `uniform()` du module *random*.
- Calculez la distance entre le centre du cercle et ce point.

Chunk id: 893
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
: remplace n'importe quel « espace blanc » (*whitespace*) (*s* signifie *space*), équivalent à `[ \t\n\r\f]`. La notion d'espace blanc a été abordée dans le chapitre 10 *Plus sur les chaînes de

Chunk id: 4644
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
## 20.5 Construire une application *Tkinter* avec une classe

Chunk id: 3304
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
open-box-rem

Chunk id: 4725
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
width=self.size)
self.canv.pack(side=tk.LEFT)
#boutons
self.bouton_cercles = tk.Button(self, text="Cercle !",
command=self.dessine_cercles)
self.bouton_cercles.pack(side=tk.TOP)

Chunk id: 754
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1353-objets-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.3 Objets *sets*
Content:
| *frozensets*          | oui                                     | oui      | non     | non       | non        | oui      |

Chunk id: 1319
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
par deux caractères *underscores*. On se souvient que les *underscores* indiquent qu'il s'agit de méthodes ou attributs destinés au fonctionnement interne de l'objet. Nous reviendrons sur certains

Chunk id: 2371
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ligne 2. Le bloc `script_quality_not_ok.py:6:1:` désigne le nom du script (`script_quality_not_ok.py`), le numéro de la ligne (6) et le numéro de la colonne (1) où se trouve la non-conformité avec la

Chunk id: 2
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
assimiler toutes les notions (et aussi d'en faire les exercices). Nous avons vu dans ce chapitre 9 le concept puissant et incontournable que représentent les **fonctions**. Nous avons également

Chunk id: 1331
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
à cette instance. Cet attribut n'existe donc pas forcément pour toutes les instances d'une classe donnée, et d'une instance à l'autre il ne prendra pas forcément la même valeur. On peut retrouver

Chunk id: 3372
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
```  
On obtient alors une liste de chaînes de caractères. On transforme ensuite les deux premiers éléments de cette liste en *floats* (avec la fonction `float()`) pour pouvoir les additionner :

Chunk id: 839
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
`calcule_barycentre()`pour afficher, avec deux chiffres significatifs, les coordonnées du barycentre des carbones alpha de la barstar.

Chunk id: 2795
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5410-pyramide
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.10 Pyramide
Content:
```python
reponse = input("Entrez un nombre de lignes (entier positif): ")
N = int(reponse)
```

Chunk id: 3758
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
### 17.1.10 Masques booléens

Chunk id: 634
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
`t[0]` en ligne 6, Python s'exécute et ne renvoie pas de message d'erreur. Or nous avions dit qu'un tuple était non modifiable... Comment cela-est il possible ? Commençons d'abord par regarder

Chunk id: 1948
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
`self._masse`. Pourquoi ? Par exemple, dans l'accesseur, si on met `self.masse` cela signifie que l'on souhaite accéder à la valeur de l'attribut (comme dans le constructeur !). Ainsi, Python

Chunk id: 4099
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
1AIV         Gallus gallus   1997-04-28     686  75929.0
1AOV    Anas platyrhynchos   1996-12-11     686  75731.8
1B3E          Homo sapiens   1998-12-09     330  36505.5
```

Chunk id: 3113
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
Ici la liste est vide car Python a pris la valeur du pas par défaut qui est de 1. Ainsi, si on commence à 10 et qu'on avance par pas de 1, on ne pourra jamais atteindre 0. Python génère ainsi une

Chunk id: 2173
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
La différence notable est l'utilisation de la commande :
`%matplotlib inline`

Chunk id: 1200
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#113-test-dappartenance
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.3 Test d'appartenance
Content:
>>> 3 in liste
True
>>> 4 in liste
False
>>> 3 not in liste
False
>>> 4 not in liste
True
```
La variation avec `not` permet, *a contrario*, de vérifier qu'un élément n'est pas dans une liste.

Chunk id: 3658
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
>>> liste_1[1][1] = -365
>>> liste_2
[[0, 0], [1, -365]]
>>> liste_3
[[0, 0], [1, 1]]
```  
close-box-rem

Chunk id: 4479
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
la méthode `.format()` est liée à `"Joe a {} ans"` qui est un objet de type chaîne de caractères. La méthode renvoie une nouvelle chaîne de caractères avec le bon formatage (ici, `'Joe a 20 ans'`).

Chunk id: 5003
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
tk.Tk.__init__(self)
self.listbox = tk.Listbox(self, height=10, width=4)
self.listbox.pack()
#Ajout des items à la listbox (entiers).
for i in range(1, 10+1):

Chunk id: 3693
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
ou encore [np.load()](https://numpy.org/doc/stable/reference/generated/numpy.load.html) et [np.fromfile()](https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html) permettant de lire des

Chunk id: 2184
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
![Lancement d'une commande Unix.](img/jupyter-ls.png){ #fig:jupyter-ls width=80% }  
open-box-rem

Chunk id: 2887
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
L'opérateur `*` reconnaît plusieurs types (entiers, *floats*, chaînes de caractères, listes). Notre fonction `fois()` est donc capable d'effectuer des tâches différentes ! Même si Python autorise

Chunk id: 3642
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
```python
>>> a
array([[1, 2],
[3, 4]])
>>> a[1, 1]
4
>>> a[1][1]
4
```

Chunk id: 1106
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
## 2.7 Conversion de types

Chunk id: 3093
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
['girafe', 'tigre', 'singe', 'souris']
>>> animaux[:]
['girafe', 'tigre', 'singe', 'souris']
>>> animaux[1:]
['tigre', 'singe', 'souris']
>>> animaux[1:-1]
['tigre', 'singe']
```

Chunk id: 4607
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
peut considérer comme un *widget* contenant d'autres *widgets*), tous les *widgets* fils seront détruits et donc l'application s'arrêtera. Vous voyez par ailleurs que cette méthode `racine.destroy`

Chunk id: 3905
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
donne l'alias `plt` pour l'utiliser plus rapidement ensuite (cet alias est standard, utilisez-la systématiquement).

Chunk id: 4944
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
; nous expliquons brièvement les fonctions lambda dans le chapitre 21 *Remarques complémentaires*. Toutefois, nous ne développons pas leur utilisation avec *Tkinter* et les fonctions *callback* car

Chunk id: 4414
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
Le minimum est -2
>>> entier = 2
>>> print(f"Le type de {entier} est {type(entier)}")
Le type de 2 est <class 'int'>
```

Chunk id: 2657
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
print(animaux[0])
print(animaux[1])
print(animaux[2])
print(animaux[3])
```  
Si votre liste ne contient que 4 éléments, ceci est encore faisable mais imaginez qu'elle en contienne 100 voire 1000 !

Chunk id: 4923
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
et `**kwargs` si vous n'en avez pas besoin, comme nous vous l'avons montré dans les exemples de ce chapitre. Rappelons nous de la PEP 20 (cf. chapitre 15 *Bonnes Pratiques en programmation Python*),

Chunk id: 1408
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
close-box-adv

Chunk id: 1034
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
Lignes 2 et 3. L'interpréteur nous a permis de connaître le contenu de la variable juste en tapant son nom. Retenez ceci car c'est une **spécificité de l'interpréteur Python**, très pratique pour

Chunk id: 144
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1271-predire-la-sortie
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.1 Prédire la sortie
Content:
### 12.7.1 Prédire la sortie  
Prédisez le comportement des codes suivants, sans les recopier dans un script ni dans l'interpréteur Python :

Chunk id: 1864
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
ligne 16 nous testons si la masse est négative, si tel est le cas nous générons une erreur avec le mot-clé `raise` (cf. chapitre 21 *Remarques complémentaires*). Ceci représente un des avantages des

Chunk id: 3973
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
...                         np.arange(20, 24),
...                         np.arange(30, 34)])
>>> df
a   b   c   d
chat    10  11  12  13
singe   20  21  22  23
souris  30  31  32  33
```

Chunk id: 4056
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
est automatiquement utilisée par *pandas* pour nommer les différentes colonnes.
Voici un aperçu des premières lignes :  
```python
>>> df.head()

Chunk id: 2435
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Réfléchissez avec un papier, un crayon... et un cerveau (voire même plusieurs) ! Reformulez avec des mots en français (ou en anglais) les consignes qui vous ont été données ou le cahier des charges

Chunk id: 119
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
que nous ne développerons pas ici, mais libre à vous de consulter de la documentation externe.

Chunk id: 3874
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
```  
La variable `res_efetch` est un pseudo-dictionnaire qui contient une pseudo-liste,
qui contient un pseudo-dictionnaire, qui contient... Oui, c'est compliqué !

Chunk id: 1637
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
```python
>>> 2 + 2
4
>>> "ti" + "ti"
'titi'
```

Chunk id: 4836
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *LabelFrame* : comme *Frame* mais affiche aussi un *label* sur le bord.
- *Toplevel* : pour créer des fenêtres indépendantes.

Chunk id: 828
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
la barstar ainsi que les coordonnées atomiques des carbones alpha des deux premiers résidus (acides aminés).

Chunk id: 2611
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
est premier car 1 et 11 sont les seuls diviseurs de 11. Les nombres 0 et 1 ne sont ni premiers ni composés.*

Chunk id: 936
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
```  
On peut alors utiliser directement cet objet avec la méthode `.search()` :  
```python
>>> animaux = "girafe tigre singe"
>>> regex.search(animaux)
>>> animaux = "tigre singe"

Chunk id: 1676
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
méthodes magiques va bien sûr au-delà du présent ouvrage. Toutefois, si vous souhaitez aller plus loin, nous vous conseillons la [page de Rafe Kettler](https://rszalski.github.io/magicmethods) qui

Chunk id: 4646
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
une classe. Cela présente l'avantage d'encapsuler l'application de manière efficace et d'éviter ainsi l'utilisation de variables globales. Souvenez-vous, elles sont à bannir définitivement ! Une

Chunk id: 266
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
>>> random.randint(0, 10)
1
>>> random.randint(0, 10)
0
>>> random.randint(0, 10)
4
```

Chunk id: 1886
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
De manière générale, une syntaxe avec des *getters* et *setters* du côté client surcharge la lecture. Imaginons que l'on ait une instance nommée `obj` et que l'on souhaite faire la somme de ses trois

Chunk id: 1437
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
méthode d'une classe : il « accroche » n'importe quel attribut qui sera visible partout dans la classe, y compris dans une méthode où il n'a pas été défini.

Chunk id: 2956
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
\  
- Étape 5 : Python est maintenant prêt à exécuter chaque ligne de code de la fonction.  
![Étape 5.](img/fct_step5.png){ #fig:fct_step5 width=80% }
\

Chunk id: 1465
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
sein de la classe (en dehors de toute méthode). En général, les attributs de classe contiennent des propriétés générales à la classe puisqu'ils vont  prendre la même valeur quelle que soit

Chunk id: 3647
Number of Tokens: 98
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
```python
>>> a = np.arange(5)
>>> a
array([0, 1, 2, 3, 4])
>>> b = a
>>> b[2] = -300
>>> b
array([   0,    1, -300,    3,    4])
>>> a
array([   0,    1, -300,    3,    4])
```  
open-box-warn

Chunk id: 4762
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
self.baballe = self.canv.create_oval(self.x, self.y,
self.x+self.size,
self.y+self.size,
width=2, fill="blue")
#Binding des actions.
self.canv.bind("<Button-1>", self.incr)

Chunk id: 3085
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
>>> animaux[-1]
'souris'
>>> animaux[-2]
'singe'
```  
Pour accéder au premier élément de la liste avec un indice négatif, il faut par contre connaître le bon indice :  
```python
>>> animaux[-4]

Chunk id: 414
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
fonction de hachage et dépend du contenu de l'objet. En Python, cette empreinte est comme dans la plupart des langages de programmation un entier. Au sein d'une même session Python, deux objets

Chunk id: 1827
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
class Orange(Fruit):
def __init__(self, taille=None, masse=None, saveur=None, forme=None):
Fruit.__init__(self, taille, masse, saveur, forme)

Chunk id: 2158
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
close-box-warn

Chunk id: 3406
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
(END)
```  
Attention à ne pas mettre les parenthèses à la suite du nom de la méthode. L'instruction correcte est `help(animaux.split)` et non pas `help(animaux.split())`.

Chunk id: 3345
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animaux = "girafe:tigre:singe::souris"
>>> animaux.split(":")
['girafe', 'tigre', 'singe', '', 'souris']
```

Chunk id: 3583
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
4
>>> w = np.array([[1, 2], [3, 4], [5, 6]])
>>> w
array([[1, 2],
[3, 4],
[5, 6]])
>>> w.ndim
2
>>> w.shape
(3, 2)
>>> w.size
6
```

Chunk id: 636
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
![Tuple contenant une liste.](img/tuple_de_listes.png){ #fig:tuple_de_listes width=90% }

Chunk id: 818
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
- le génome de la bactérie *Escherichia coli* (fichier [`NC_000913.fna`](https://python.sdv.univ-paris-diderot.fr/data-files/NC_000913.fna))  
Les deux fichiers sont au format FASTA.

Chunk id: 221
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
os', '_ceil', '_cos', '_e', '_exp', '_hexlify', '_inst', '_log', '_pi',
'_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_wa

Chunk id: 2478
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
l'instruction `if` ainsi qu'une comparaison que nous avons abordée au chapitre précédent. Voici un premier exemple :

Chunk id: 203
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
The following documentation is automatically generated from the Python
source files.  It may be incomplete, incorrect or include features that

Chunk id: 3505
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
```text
1  2 3.80
2  3 3.80
3  4 3.83
4  5 3.82
```  
Modifiez maintenant la fonction `calcule_distance()` pour qu'elle affiche à la fin la moyenne des distances.

Chunk id: 2360
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
close-box-def  
Voici le contenu du script [`script_quality_not_ok.py`](https://python.sdv.univ-paris-diderot.fr/data-files/script_quality_not_ok.py) que nous allons analyser par la suite :

Chunk id: 283
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
et des variables spécifiques à l'interpréteur Python lui-même. Ce module est particulièrement intéressant pour récupérer les arguments passés à un script Python lorsque celui-ci est appelé en ligne

Chunk id: 3056
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
de valeurs (n'oubliez pas les guillemets, simples ou doubles, s'il s'agit de chaînes de caractères) séparées par des **virgules**, et le tout encadré par des **crochets**. En voici quelques exemples

Chunk id: 2801
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
Testez avec une matrice de dimensions 3 $\times$ 3, puis 5 $\times$ 5, et enfin 10 $\times$ 10.

Chunk id: 999
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
### 16.4.4 Liste des protéines humaines

Chunk id: 4548
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
```text
Je suis au début de une_fct() et je vais exécuter la fonction callback :
J'aime bien les fraises !
une_fct() se termine.
```

Chunk id: 1946
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
`self._masse` qui contiendra la vraie valeur de la masse du citron (cela serait vrai pour tout autre objet de type *property*).  
open-box-warn

Chunk id: 4374
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Vous pouvez aussi formater des entiers avec la lettre `d` (ici `d` veut dire *decimal integer*) :  
```python
>>> nb_G = 4500
>>> print(f"Ce génome contient {nb_G:d} guanines")

Chunk id: 178
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
l'objet chaîne de caractères `"{}"` (auquel elle est liée) pour finalement renvoyer une autre chaîne de caractères `"3.14"`.

Chunk id: 944
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
- et qui se termine encore par un ou plusieurs chiffres `[0-9]+`.

Chunk id: 153
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1272-passage-de-liste-a-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.2 Passage de liste à une fonction
Content:
2. Affichez `ma_liste` à l'écran.
3. Appelez la fonction `ajoute_nb_alea()` en lui passant `ma_liste` en argument.
4. Affichez à nouveau `ma_liste` à l'écran.

Chunk id: 756
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1354-types-de-base
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.4 Types de base
Content:
| Objet numérique | test d'appartenance et fonction `len()`| itérable | ordonné | indexable | modifiable | hachable |

Chunk id: 3837
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Nous allons par exemple utiliser PubMed pour chercher des articles scientifiques
relatifs à la transferrine (*transferrin* en anglais):  
```python
>>> from Bio import Entrez

Chunk id: 3509
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
### 10.8.12 Compteur de gènes dans un fichier GenBank

Chunk id: 2258
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
```python
#code recommandé :
ma_variable = 3 + 7
mon_texte = "souris"
mon_texte == ma_variable
#code non recommandé :
ma_variable=3+7
mon_texte="souris"
mon_texte== ma_variable
```

Chunk id: 724
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
Il existe de nombreuses autres méthodes que nous n'abordons pas ici mais qui peuvent être consultées sur la [documentation officielle de

Chunk id: 2691
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
### 5.1.2 Fonction `range()`

Chunk id: 3282
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
ce sont **des listes non modifiables**. Une fois une chaîne de caractères définie, vous ne pouvez plus modifier un de ses éléments. Le cas échéant, Python renvoie un message d'erreur :

Chunk id: 4114
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
### 17.5.4 Statistiques par groupe  
On peut aussi déterminer, pour chaque organisme, la taille et la masse moléculaire
moyennes des transferrines :  
```python
>>> df.groupby(["Source"]).mean()

Chunk id: 4430
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
Néanmoins, nous rappelons ci-dessous son fonctionnement, car il se peut que vous tombiez dessus dans d'anciens livres ou si vous lisez de vieux programmes Python.

Chunk id: 745
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1351-objets-sequentiels
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.1 Objets séquentiels
Content:
| chaîne de caractères  | oui                                     | oui      | oui     | oui       | non        | oui      |

Chunk id: 431
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
5
>>> hash(3.14)
322818021289917443
>>> hash([1, 2, 3])
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
```

Chunk id: 3557
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```  
Un autre avantage de la fonction `arange()` est qu'elle génère des objets *array* qui contiennent des entiers ou des *floats* selon l'argument qu'on lui passe :  
```python
>>> np.arange(10)

Chunk id: 1373
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
« instantiateur » ou « initialisateur », pour signifier qu'il existe une autre méthode appelée `.__new__()` qui participe à la création d'une instance. Vous n'avez bien sûr pas à retenir ces détails

Chunk id: 3407
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#108-exercices
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Content:
## 10.8 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 1122
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
Par ailleurs, nous avons rencontré plusieurs fois des **fonctions** dans ce chapitre, notamment avec `type()`, `int()`, `float()` et `str()`. Dans le chapitre 1 *Introduction*, nous avons également

Chunk id: 3009
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#984-nombres-premiers
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.4 Nombres premiers
Content:
Créez une fonction `est_premier()` qui prend comme argument un nombre entier positif *n* (supérieur à 2) et qui renvoie le booléen `True` si *n* est premier et `False` si *n* n'est pas premier.

Chunk id: 779
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
n'aborderons pas tous ces objets ici, mais nous pouvons citer tout de même certains d'entre eux si vous souhaitez aller un peu plus loin :

Chunk id: 935
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1633-compilation-dexpressions-regulieres
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.3 Compilation d'expressions régulières
Content:
```python
>>> regex = re.compile("^tigre")
>>> regex
<_sre.SRE_Pattern object at 0x7fefdafd0df0>
```  
On peut alors utiliser directement cet objet avec la méthode `.search()` :  
```python

Chunk id: 2599
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
et affiche les valeurs des angles phi et psi et le message adapté *est en hélice* ou *n'est pas en hélice*.

Chunk id: 50
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
de l'appel précédent, puis le résultat $2 \times 1 = 2$ (où 2 correspond à `nb` et 1 provient de `calc_factorielle(nb - 1)` soit 1) va être renvoyé à l'appel précédent, puis $3 \times 2 = 6$ (où 3

Chunk id: 3685
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```text
1.000000000000000000e+00 2.000000000000000000e+00 3.000000000000000000e+00
4.000000000000000000e+00 5.000000000000000000e+00 6.000000000000000000e+00

Chunk id: 4808
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
qui va nous donner des informations sur l'événement généré par l'utilisateur. Dans les lignes 62 et 63, cet objet `mclick` récupère les coordonnées où le clic a eu lieu grâce aux attributs `mclick.x`

Chunk id: 1321
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
Ligne 3. Ici on ajoute un attribut `.couleur` à l'instance `citron1`. Notez bien la syntaxe `instance.attribut` et le point qui lie les deux.

Chunk id: 4847
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
(comme *Canvas* qui n'existe que dans *Tkinter*). Vous pouvez importer le sous-module *ttk* de cette manière : `import tkinter.ttk as ttk`.

Chunk id: 4338
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
Que signifie *f-string* ?  
open-box-def

Chunk id: 4144
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```python
>>> plt.clf()
>>> plt.scatter(dfz["Length"], dfz["MW"])
<matplotlib.collections.PathCollection object at 0x7f85bb4852e8>
>>> plt.xlabel("Taille (nombre d'acides aminés)")

Chunk id: 3501
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
Créez ensuite la fonction `calcule_distance()` qui prend en argument la liste renvoyée par la fonction `trouve_calpha()`, qui calcule les distances interatomiques entre carbones alpha consécutifs et

Chunk id: 1412
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
```python
class Citron:
def __init__(self, masse, couleur="jaune"):
self.masse = masse
self.couleur = couleur

Chunk id: 3964
Number of Tokens: 83
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
>>> s["z"] = 50
>>> s
a     10
b     20
c    300
d     40
z     50
dtype: int64
```  
Enfin, on peut filtrer une partie de la *series* :  
```python
>>> s[s>30]
c    300
d     40
z     50

Chunk id: 3953
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#174-module-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Content:
## 17.4 Module *pandas*

Chunk id: 2761
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
Faites bien attention aux tests et à l'incrémentation que vous utilisez car une erreur mène souvent à des « boucles infinies » qui ne s'arrêtent jamais. Vous pouvez néanmoins toujours stopper

Chunk id: 3114
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
à 10 et qu'on avance par pas de 1, on ne pourra jamais atteindre 0. Python génère ainsi une liste vide. Pour éviter ça, il faudrait, par exemple, préciser un pas de -1 pour obtenir une liste

Chunk id: 4451
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
- Juste après la chaîne de caractères, l'instruction `.format(nom, x)` fournit la liste des variables à insérer, d'abord la variable `nom` puis la variable `x`.

Chunk id: 1728
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
classe en évoquant la commande `help()` sur celle-ci ou une de ses instances. Par exemple, nous verrons dans le chapitre suivant le module *Tkinter*, imaginons que nous créions une instance de la

Chunk id: 2547
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
```python
>>> delta = 0.0001
>>> var = 3.0 - 2.7
>>> 0.3 - delta < var < 0.3 + delta
True
>>> abs(var - 0.3) < delta
True
```

Chunk id: 2811
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
Concevez une seconde version à partir du script précédent, où cette fois on n'affiche plus tous les couples possibles mais simplement la valeur de `N`, et le nombre de cases parcourues. Affichez cela

Chunk id: 2683
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
combinaison des deux), les développeurs recommandent l'utilisation de quatre espaces. Vous pouvez consulter à ce sujet le chapitre 15 *Bonnes pratiques de programmation* en Python.

Chunk id: 2454
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
## 15.6 Pour terminer : la PEP 20

Chunk id: 3237
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
un éditeur de texte, reportez-vous si nécessaire à la rubrique *Installation de Python* en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod)) et entrez le code suivant :

Chunk id: 2459
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.

Chunk id: 3356
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animaux = "girafe tigre"
>>> animaux.count("i")
2
>>> animaux.count("z")
0
>>> animaux.count("tigre")
1
```

Chunk id: 3603
Number of Tokens: 115
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> a = np.arange(0, 6)
>>> a.shape
(6,)
>>> c = np.resize(a, (3, 5))
>>> c.shape
(3, 5)
>>> c
array([[0, 1, 2, 3, 4],
[5, 0, 1, 2, 3],
[4, 5, 0, 1, 2]])
>>> a
array([0, 1, 2, 3, 4, 5])

Chunk id: 2346
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Lignes 18 et 19. La mention du type renvoyé est obligatoire. En dessous, on indique une description de ce qui est renvoyé par la fonction. Cette description est aussi indentée.  
open-box-warn

Chunk id: 4765
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
def move(self):
"""Déplace la baballe (appelée itérativement avec la méthode after)."""
#Incrémente coord baballe.
self.x += self.dx
self.y += self.dy

Chunk id: 3746
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
[7, 8, 9]])
>>> for row in a:
...     print(row, type(row))
...
[1 2 3] <class 'numpy.ndarray'>
[4 5 6] <class 'numpy.ndarray'>
[7 8 9] <class 'numpy.ndarray'>
```

Chunk id: 2605
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
### 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)  
Voici un extrait de l'article sur les nombres premiers tiré de l'encyclopédie en ligne

Chunk id: 2349
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
ce point, et rédigez vos *docstrings* au moment où vous écrivez vos modules, fonctions, classes ou méthodes. Passer une journée (voire plusieurs) à écrire les *docstrings* d'un gros projet est

Chunk id: 4582
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
des fils de cette fenêtre. On pourra d'ailleurs noter que cette classe `tk.Tk` ne s'instancie en général qu'une seule fois par programme. Vous pouvez, par curiosité, lancer une commande `dir(racine)`

Chunk id: 4375
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> nb_G = 4500
>>> print(f"Ce génome contient {nb_G:d} guanines")
Ce génome contient 4500 guanines
```  
ou mettre plusieurs nombres dans une même chaîne de caractères.  
```python

Chunk id: 1359
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
Ligne 7 et 8. On crée l'instance `citron1` de la classe `Citron`, puis on exécute la méthode `.coucou()` avec une syntaxe `instance.méthode()`.

Chunk id: 3705
Number of Tokens: 99
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
>>> a2
array([3, 4])
>>> np.concatenate((a1, a2))
array([0, 1, 3, 4])
>>> np.concatenate((a2, a1))
array([3, 4, 0, 1])
>>> np.concatenate((a1, a2, a1, a2))
array([0, 1, 3, 4, 0, 1, 3, 4])
```

Chunk id: 824
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
chaîne de caractères), qui sélectionne uniquement les lignes contenant des carbones alpha et qui les renvoie sous la forme d'une liste de dictionnaires. Chaque dictionnaire contient quatre clés :

Chunk id: 248
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
10
>>> random.uniform(0, 10)
6.574743184892878
>>> random.uniform(0, 10)
1.1655547702189106
```  
Le module *random* permet aussi de permuter aléatoirement des listes :  
```python

Chunk id: 3592
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> a = np.arange(0, 6)
>>> a
array([0, 1, 2, 3, 4, 5])
>>> a.shape
(6,)
>>> d = a.reshape((3, 4))
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 878
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`+`  
:   1 à *n* fois le caractère précédent ou l'expression entre parenthèses précédente.  
Exemple : la *regex* `A(CG)+T` est retrouvée dans `ACGT`, `ACGCGT`... mais pas dans `AT`.  
`?`

Chunk id: 1863
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Lignes 12 à 18. On définit deux méthodes *setters* pour modifier chaque attribut. Notez qu'en ligne 16 nous testons si la masse est négative, si tel est le cas nous générons une erreur avec le

Chunk id: 808
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
les mots de 2 lettres et leurs occurrences dans la séquence du chromosome I de la levure du boulanger *Saccharomyces cerevisiae* (fichier

Chunk id: 751
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1353-objets-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.3 Objets *sets*
Content:
### 13.5.3 Objets *sets*  
| Container             | test d'appartenance et fonction `len()` | itérable | ordonné | indexable | modifiable | hachable |

Chunk id: 2656
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
```python
animaux = ["girafe", "tigre", "singe", "souris"]
print(animaux[0])
print(animaux[1])
print(animaux[2])
print(animaux[3])
```

Chunk id: 2874
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
Dans ce cas la fonction, `hello()` se contente d'afficher la chaîne de caractères `"bonjour"` à l'écran. Elle ne prend aucun argument et ne renvoie rien. Par conséquent, cela n'a pas de sens de

Chunk id: 730
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
créer un *frozenset* on utilise la fonction interne `frozenset()` qui prend en argument un objet itérable et le convertit (opération de *casting*) :

Chunk id: 4058
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
0   1A8E        Homo sapiens   1998-03-24     329  36408.4
1   1A8F        Homo sapiens   1998-03-25     329  36408.4
2   1AIV       Gallus gallus   1997-04-28     686  75929.0

Chunk id: 1576
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
utilisant les exemples vus depuis le début de ce chapitre, vous avez certainement la réponse. Une classe possède par définition son propre espace de noms qui ne peut être en aucun cas confondu avec

Chunk id: 4683
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
vous pourrez-vous poser la question, « pourquoi ai-je besoin de toute cette structure alors que le code précédent semblait plus direct ? ». La réponse est simple, lorsqu'un projet de GUI grossit, le

Chunk id: 363
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
$$
d = \sqrt{(x_B - x_A)^2 + (y_B - y_A)^2}
$$  
Documentation de la fonction `random.uniform()` :  
<https://docs.python.org/fr/3/library/random.html#random.uniform>

Chunk id: 3572
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
ça devient vite compliqué lorsqu'on dépasse trois dimensions. Retenez qu'un objet *array* à une dimension peut être assimilé à un **vecteur** et un *array* à deux dimensions à une **matrice**. Nous

Chunk id: 3987
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
souris  30  31  32  33
```  
Lignes 1-4. Le dictionnaire `data` contient les données en colonnes.
La clé associée à chaque colonne est le nom de la colonne.

Chunk id: 2304
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
les variables. Pour un programme scientifique, les commentaires et les noms de variables sont en anglais. Ainsi `ma_liste` deviendra `my_list` et `ma_fonction` deviendra `my_function` (par exemple).

Chunk id: 2244
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
### 15.1.3 Règles de nommage  
Les noms de variables, de fonctions et de modules doivent être de la forme :  
```python
ma_variable
fonction_test_27()
mon_module
```

Chunk id: 304
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
print(f"{nom_fichier} contient {taille} lignes.")
```  
Supposons que dans le même répertoire, nous ayons le fichier `zoo1.txt` dont voici le contenu :  
```text
girafe
tigre
singe
souris
```

Chunk id: 705
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Enfin, les *sets* ne supportent pas les opérateurs `+` et `*`.

Chunk id: 1257
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1165-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.5 Séquence d'ADN aléatoire 2
Content:
respectivement la longueur de la séquence et les pourcentages de chacune des 4 bases A, T, G et C. La fonction générera aléatoirement une séquence d'ADN qui prend en compte les contraintes fournies

Chunk id: 3788
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Les masques booléens ne doivent pas être confondus avec les [*masked arrays*](https://numpy.org/doc/1.18/reference/maskedarray.html) qui sont des *arrays* dans lesquels on peut trouver des valeurs

Chunk id: 4078
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
dtype: object
```  
Les colonnes `Length` et `MW` contiennent des valeurs numériques,
respectivement des entiers (`int64`) et des *floats* (`float64`).
Le type `object` est un type par défaut.

Chunk id: 422
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
close-box-warn  
open-box-more  
Pour aller plus loin, vous pouvez consulter la [page Wikipedia sur les fonctions de hachage](https://fr.wikipedia.org/wiki/Fonction_de_hachage).  
close-box-more

Chunk id: 3035
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
Les écarts sur les statistiques entre les différentes listes sont-ils importants ? Relancez votre script avec des listes de 1000 éléments, puis 10 000 éléments. Les écarts changent-ils quand le

Chunk id: 625
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
et être explicite, par exemple `seq_ADN` ou `liste_listes_residus`. On verra dans le chapitre 15 *Bonnes pratiques en programmation Python* que ce style de nommage est appelé *snake_case*. Toutefois,

Chunk id: 4860
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
variables avec les classes `tk.StringVar` pour les chaînes de caractères, `tk.DoubleVar` pour les *floats*, et `tk.IntVar` pour les entiers. Une fois créée, par exemple avec l'instruction `var =

Chunk id: 1909
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Les arguments passés à `property()` sont systématiquement des méthodes dites *callback*, c'est-à-dire des noms de méthodes que l'on a définies précédemment dans notre classe, mais on ne précise ni

Chunk id: 4386
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Notez que `>` spécifie un alignement à droite, `<` spécifie un alignement à gauche et `^` spécifie un alignement centré. Il est également possible d'indiquer le caractère qui servira de remplissage

Chunk id: 611
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
```python
>>> def ma_fonction():
...     return 3, 14
...
>>> x, y = ma_fonction()
>>> print(x, y)
3 14
```

Chunk id: 2392
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
print ((f"4 x 5 = {Multiplie_nombres(4, 5)}")
^ (bad-whitespace)
script_quality_not_ok.py:6:0: C0103: Function name "Multiplie_nombres"
doesn't conform to snake_case naming style (invalid-name)

Chunk id: 3970
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
*dataframes* de *pandas* se rapprochent de ceux trouvés dans R.  
close-box-rem  
Voici comment créer un *dataframe* avec *pandas* à partir
de données fournies comme liste de lignes :  
```python

Chunk id: 2642
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Pour vous guider, voici ce que donnerait le programme avec la conversation précédente :  
```text
Pensez à un nombre entre 1 et 100.

Chunk id: 2797
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
Créez un script qui parcourt chaque élément de la matrice et qui affiche le numéro de ligne et de colonne uniquement avec des boucles `for`.

Chunk id: 2526
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
```python
>>> not True
False
>>> not False
True
>>> not (True and True)
False
```

Chunk id: 4360
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Prenons un exemple. Imaginez maintenant que vous vouliez calculer, puis afficher, la proportion de GC d'un génome. La proportion de GC s'obtient comme la somme des bases Guanine (G) et Cytosine (C)

Chunk id: 1289
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Malgré tous ces avantages, la POO peut paraître difficile à aborder pour le débutant, spécialement dans la conception des programmes / algorithmes. Elle nécessite donc la lecture de nombreux

Chunk id: 3677
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
- par défaut, les données doivent être séparées par n'importe quelle combinaison d'espace(s) et/ou de tabulations.

Chunk id: 4591
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
argument avec le nom `text` pour indiquer, comme vous l'avez deviné, le texte que nous souhaitons voir dans ce *label*. La classe `tk.Label` peut recevoir de nombreux autres arguments, en voici la

Chunk id: 4423
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
## 3.4 Ancienne méthode de formatage des chaînes de caractères  
*Conseil* : Pour les débutants, tout ce qui est écrit dans cette rubrique n'est pas à retenir.

Chunk id: 2673
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
d'instructions le **corps de la boucle**. Comment indique-t-on à Python où ce bloc commence et se termine ? Cela est signalé uniquement par l'**indentation**, c'est-à-dire le décalage vers la droite

Chunk id: 3659
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
### 17.1.6 Construction automatique de matrices

Chunk id: 1129
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
plus généralement un objet. Par exemple, la fonction `type()` renvoie le type de la variable qu'on lui a passé en argument.

Chunk id: 2681
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Outre une meilleure lisibilité, les deux-points et l'**indentation** sont formellement requis en Python. Même si on peut indenter comme on veut (plusieurs espaces ou plusieurs tabulations, mais pas

Chunk id: 3661
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
d'une liste de listes. Le module *NumPy* possède quelques fonctions pratiques pour initialiser des matrices. Par exemple, Les fonctions `zeros()` et `ones()` construisent des objets *array* contenant

Chunk id: 2008
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
La ligne 12 du code a donc conduit à une erreur : Python prétend ne pas connaître l'attribut `.__mass`. On pourrait croire que cela constitue un mécanisme de protection des attributs. En fait il n'en

Chunk id: 1799
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
le constructeur de la classe mère Fruit !
(2) Je suis dans le constructeur de la classe Fruit
Je viens de créer self.taille, self.masse, self.saveur et self.forme

Chunk id: 4007
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
```  
Enfin, on peut aussi sélectionner des lignes avec l'instruction `.iloc`
et l'indice de la ligne (la première ligne ayant l'indice 0) :  
```python
>>> df.iloc[1]
Paris     20
Lyon      21

Chunk id: 511
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1326-methode-get
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.6 Méthode `.get()`
Content:
On peut également indiquer à `.get()` une valeur par défaut si la clé n'existe pas :  
```python
>>> ani2.get("age", 42)
42
```

Chunk id: 698
Number of Tokens: 103
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
>>> s = set(range(5))
>>> s
{0, 1, 2, 3, 4}
>>> s.add(4)
>>> s
{0, 1, 2, 3, 4}
>>> s.add(472)
>>> s
{0, 1, 2, 3, 4, 472}
>>> s.discard(0)
>>> s
{1, 2, 3, 4, 472}
```

Chunk id: 2082
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Lignes 2 à 4. La fonction `namedtuple()` renvoie une classe qui sert à créer de nouveaux objets citrons. Attention cette classe est différente de celles que l'on a rencontrées jusqu'à maintenant, car

Chunk id: 346
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#888-compteur-de-lignes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.8 Compteur de lignes
Content:
Améliorez le script `compte_lignes.py` dont le code a été donné précédemment de façon à ce qu'il renvoie un message d'erreur si le fichier n'existe pas. Par exemple, si les fichiers `zoo1.txt` et

Chunk id: 125
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
### 12.6.2 Modification d'une liste dans une fonction

Chunk id: 2014
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
initialement pour pouvoir retrouver des noms d'attributs identiques lors de l'héritage. Si par exemple une classe mère et une classe fille ont chacune un attribut nommé `__attribut`, le *name

Chunk id: 2422
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 1 à 9. Cette *docstring* décrit globalement le script. Cette *docstring* (ainsi que les autres) seront visibles si on importe le script en tant que module, puis en invoquant la commande

Chunk id: 1104
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#26-la-fonction-type
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.6 La fonction `type()`
Content:
>>> type(z)
<class 'str'>
```  
Nous verrons plus tard ce que signifie le mot *class*.  
open-box-warn

Chunk id: 1305
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
```python
>>> class Citron:
...     pass
...
>>> Citron
<class '__main__.Citron'>
>>> type(Citron)
<class 'type'>
>>> citron1 = Citron()
>>> citron1
<__main__.Citron object at 0x7ff2193a20f0>
>>>

Chunk id: 3152
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- C'est un langage de haut niveau. Il demande relativement peu de connaissance sur le fonctionnement d'un ordinateur pour être utilisé.

Chunk id: 2468
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Namespaces are one honking great idea -- let's do more of those!
>>>
```  
Et si l'aventure et les *easter eggs* vous plaisent, testez également la commande  
```python
>>> import antigravity
```

Chunk id: 4146
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
>>> plt.ylabel("Masse moléculaire (Dalton)")
Text(0, 0.5, 'Masse moléculaire (Dalton)')
>>> plt.savefig("transferrine2.png")
```

Chunk id: 5011
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
if __name__ == "__main__":
app = MaListBox()
app.title("MaListBox")
app.mainloop()
```

Chunk id: 1333
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
close-box-def  
L'instruction `del` fonctionne bien sûr pour détruire un objet (par exemple

Chunk id: 778
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
d'autres types de *containers* qui peuvent se révéler utiles, c'est une véritable mine d'or ! Nous n'aborderons pas tous ces objets ici, mais nous pouvons citer tout de même certains d'entre eux si

Chunk id: 4324
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
le séparateur « `,` ». On peut modifier ce comportement en passant à la fonction `print()` l'argument par mot-clé `sep` :

Chunk id: 2770
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
La fonction `input()` prend en argument un message (sous la forme d'une chaîne de caractères), demande à l'utilisateur d'entrer une valeur et renvoie celle-ci sous forme d'une chaîne de caractères.

Chunk id: 1797
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Lignes 39 à 43. Dans le programme principal, on instancie un objet `Citron`, puis on utilise `print()` sur l'instance.  
L'exécution de ce code affichera la sortie suivante :  
```

Chunk id: 2451
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Discutez avec des gens. Faites tester votre programme par d'autres. Les instructions d'utilisation sont-elles claires ?
- Si vous distribuez votre code :
+ Rédigez une documentation claire.

Chunk id: 2598
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
En utilisant cette liste, créez un script qui teste, pour chaque acide aminé, s'il est ou non en hélice et affiche les valeurs des angles phi et psi et le message adapté *est en hélice* ou *n'est pas

Chunk id: 3778
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
On voit que l'on récupère seulement les éléments de l'*array* `a` qui sastisfont la sélection ! Toutefois, il est important de constater que l'*array* renvoyé perd la dimensionnalité de l'array `a`

Chunk id: 450
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
`"taille"`, `"poids"`) auxquelles on affecte des valeurs (`"girafe"`, `5.0`, `1100`). Vous pouvez mettre autant de clés que vous voulez dans un dictionnaire (tout comme vous pouvez ajouter autant

Chunk id: 1871
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
```  
La fonction interne `raise` nous a permis de générer une erreur car l'utilisateur de la classe (c'est-à-dire nous dans le programme principal) n'a pas rentré une valeur correcte.

Chunk id: 3727
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
open-box-rem  
Dans le module *NumPy*, il existe également des objets de type *matrix* pour lesquels les multiplications de matrices sont différents, mais nous ne les aborderons pas ici.

Chunk id: 2982
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
En écrivant qu'une seule fois la formule de conversion dans une fonction, on applique le principe DRY :  
```python
>>> def convert_fahrenheit_to_celsius(temperature):

Chunk id: 1171
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1117-reverse
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.7 `.reverse()`
Content:
### 11.1.7 `.reverse()`  
La méthode `.reverse()` inverse une liste :  
```python
>>> a = [3, 1, 2]
>>> a.reverse()
>>> a
[2, 1, 3]
```

Chunk id: 837
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
dont les clés (`resid`, `x`, `y` et `z`) sont celles de l'exercice précédent et qui renvoie les coordonnées du barycentre sous la forme d'une liste de *floats*.

Chunk id: 2358
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
qui vont chercher les sources potentielles d'erreurs dans un code informatique. Ces erreurs peuvent être des erreurs de style (PEP 8 et 257) ou des erreurs logiques (manipulation d'une variable,

Chunk id: 1565
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
Lignes 9 et 10. Lorsqu'on exécute `mod.fct()`, la valeur de `i` sera celle définie localement dans cette fonction. Lorsqu'on exécute `mod.fct2()`, la valeur de `j` sera celle définie de manière

Chunk id: 1600
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
crée automatiquement son propre espace de noms**. Cela permet d'encapsuler à l'intérieur tous les attributs et méthodes dont on a besoin, sans avoir aucun risque de conflit de nom avec l'extérieur

Chunk id: 313
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
FileNotFoundError: [Errno 2] No such file or directory: 'zoo3.txt'
```  
La lecture de la partie suivante va nous permettre d'améliorer notre script `compte_lignes.py`.

Chunk id: 1744
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', [...]
'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', [...]

Chunk id: 20
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
L'espace mémoire alloué à `polynome()` est grisé, indiquant que cette fonction est en cours d'exécution. La fonction appelante `calc_vals()` est toujours là (sur un fond blanc) car son exécution

Chunk id: 4392
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
écrire les coordonnées des atomes d'une molécule au format PDB (pour en savoir plus sur ce format, reportez-vous à l'annexe A *Quelques formats de données rencontrés en biologie*).

Chunk id: 1183
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
Cela signifie que la liste est modifiée « sur place », c'est-à-dire **dans la méthode** au moment où elle s'exécute. La liste étant modifiée « en dur » dans la méthode, cette dernière ne renvoie donc

Chunk id: 2444
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
on doit comprendre ce que vous faites. Choisir des noms de variables pertinents permet aussi de réduire les commentaires.

Chunk id: 3339
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
>>> for animal in animaux.split():
...     print(animal)
...
girafe
tigre
singe
souris
```

Chunk id: 3663
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```python
>>> np.zeros((2, 3))
array([[0., 0., 0.],
[0., 0., 0.]])
>>> np.ones((3, 3))
array([[1., 1., 1.],
[1., 1., 1.],
[1., 1., 1.]])
```

Chunk id: 2366
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```  
Ce script est d'ailleurs parfaitement fonctionnel :  
```bash
$ python script_quality_ok.py
2 x 3 = 6
4 x 5 = 20
```

Chunk id: 1999
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Il existe également des attributs dont le nom commence par deux caractères *underscores*. Nous n'avons encore jamais croisé ce genre d'attribut. Ces derniers mettent en place le *name mangling*.

Chunk id: 2044
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
|      couleur et taille.
|
|  __str__(self)
|      Redéfinit le comportement avec print().
|
|  affiche_coucou(self)
|      Méthode inutile qui affiche coucou.
|
[...]
|

Chunk id: 2487
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
instruction `if`. Plutôt que d'utiliser deux instructions `if`, on peut se servir des instructions `if` et `else` :

Chunk id: 4963
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
de nombreuses fonctions avancées (comme par exemple mettre des graphes matplotlib qui se mettent à jour dans la GUI !).

Chunk id: 4436
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
### 3.4.1 L'opérateur `%`

Chunk id: 407
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
La liste `l` a été modifiée en ligne 4 (changement de l'élément d'indice 1) et en ligne 7 (ajout d'un élément). Pour autant, l'identifiant de cette liste est resté identique tout du long. Ceci

Chunk id: 2130
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Pour créer un notebook, cliquez sur le bouton à droite *New* puis sélectionnez *Python 3*. Vous noterez au passage qu'il est également possible de créer un fichier texte, un répertoire ou bien encore

Chunk id: 2031
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Les classes peuvent bien sûr contenir des *docstrings* comme les fonctions et les modules. C'est d'ailleurs une pratique vivement recommandée. Voici un exemple sur notre désormais familière classe

Chunk id: 3037
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
### 9.8.8 Distance à l'origine (exercice +++)

Chunk id: 3798
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
Nous venons de voir une petite partie du module *NumPy* mais vous avez pu en constater son extraordinaire puissance. On pourrait au premier abord être tenté d'abandonner les listes, toutefois elles

Chunk id: 930
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
vous pouvez toujours utiliser l'accroche de début de ligne `^`. Si vous voulez une correspondance exacte comme dans la fonction `fullmatch()`, vous pouvez utiliser les métacaractères `^` et `$`, par

Chunk id: 1885
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
de « pythonique »). En Python, la lisibilité est la priorité. Souvenez-vous du Zen de Python « *Readability counts* » (voir  le chapitre 15).

Chunk id: 1904
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
stratégiques, Python met en place une classe nommée `property`. Celle-ci permet de combiner le maintien de la syntaxe lisible `instance.attribut`, tout en utilisant en filigrane des fonctions pour

Chunk id: 2263
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
#code non recommandé :
ma_liste [1]
mon_dico {"clé"}
ma_fonction (argument)
```  
On met un espace après les caractères `:` et `,` (mais pas avant) :  
```python
#code recommandé :

Chunk id: 4409
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
Une fonctionnalité extrêmement puissante des *f-strings* est de supporter des expressions Python au sein des accolades. Ainsi, il est possible d'y mettre directement une opération ou encore un appel

Chunk id: 1422
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Ligne 4. Nous créons cette fois-ci une variable `var` sans l'accrocher au `self`.  
Ligne 6. Nous créons une nouvelle méthode dans la classe `Citron` qui se nomme

Chunk id: 4407
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
>>> type(f"{perc_GC:10.3f}")
<class 'str'>
```  
Python considère le résultat de l'instruction `f"{perc_GC:10.3f}"` comme une chaîne de caractères et la fonction `type()` nous le confirme.

Chunk id: 629
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
close-box-rem

Chunk id: 441
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
Les **dictionnaires** se révèlent très pratiques lorsque vous devez manipuler des structures complexes à décrire et que les listes présentent leurs limites. Les dictionnaires sont des collections non

Chunk id: 2507
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
l'instruction est indentée deux fois, ce qui signifie qu'elle appartient au bloc d'instructions du test `if`. Dans le code 2, l'instruction de la ligne 5 n'est indentée qu'une seule fois, ce qui fait

Chunk id: 1859
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
def get_masse(self):
return self.masse

def set_masse(self, value):
if value < 0:
raise ValueError("Z'avez déjà vu une masse négative ???")
self.masse = value

Chunk id: 4811
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
du clic. Nous créons ensuite un petit texte dans le canevas et affectons des valeurs aléatoires aux variables de déplacement pour faire repartir la baballe dans une direction aléatoire.

Chunk id: 1736
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
open-box-rem  
En Python, il existe une classe interne nommée `object` qui est en quelque sorte la classe ancêtre de tous les objets. Toutes les classes héritent de `object`.  
close-box-rem

Chunk id: 3310
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
>>> s
'Voici un retour à la ligne\\nEt là une autre ligne'
>>> print(s)
Voici un retour à la ligne\nEt là une autre ligne
```

Chunk id: 3415
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
- un message vérifiant que le nombre de base est (ou non) un multiple de 3,
- le nombre de codons (on rappelle qu'un codon est un bloc de 3 bases),
- les 10 premières bases,

Chunk id: 904
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
Nous vous conseillons de tester systématiquement vos expressions régulières sur des exemples simples. Pour vous aider, nous vous recommandons plusieurs sites internet :

Chunk id: 106
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
Dans le module principal x vaut -15
```  
Dans la fonction, `x` a pris la valeur qui lui était définie localement en priorité sur la valeur définie dans le module principal.  
open-box-adv

Chunk id: 1543
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
les chapitres 9 et 12 sur les fonctions). Si cette fonction appelle une autre fonction, un nouvel espace est créé, bien distinct de la fonction appelante (ce nouvel espace peut donc contenir un objet

Chunk id: 2588
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
Dans une protéine, les différents acides aminés sont liés entre eux par une liaison peptidique. Les angles phi et psi sont deux angles mesurés autour de cette liaison peptidique. Leurs valeurs sont

Chunk id: 4042
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
```python
>>> pd.concat([df1, df2], axis=1, join="inner")
Lyon  Paris  Nantes  Strasbourg
chat      10      3       3           5
souris    17     20       9          10
```

Chunk id: 2284
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
ne sont pas séparées par des virgules. À partir du moment où elles sont entre parenthèses, Python les concatène automatiquement.

Chunk id: 1666
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Certaines méthodes magiques font des choses assez impressionnantes. Par exemple, la méthode `.__call__()` crée des instances que l'on peut appeler comme des fonctions ! Dans cet exemple, nous allons

Chunk id: 4672
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
l'appel à la méthode `.quit()` se fait par `self.quit` puisque la fenêtre est instanciée dans la variable `self`. Par ailleurs, on ne met ni parenthèses ni arguments à `self.quit` car il s'agit d'une

Chunk id: 3536
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#171-module-numpy
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Content:
Le module [*NumPy*](http://numpy.scipy.org/) est incontournable en bioinformatique. Il permet d'effectuer des calculs sur des vecteurs ou des matrices, élément par élément, via un nouveau type

Chunk id: 4784
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
un format spécial : par exemple `"<Button-1>"` correspond à un clic gauche de la souris (de même `"<Button-2>"` et `"<Button-3>"` correspondent aux clics central et droit respectivement). Le deuxième

Chunk id: 3316
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
disparu lorsqu'on demande à Python d'afficher le contenu de la variable `s`. Comme dans `var = 2 + 2`, d'abord Python évalue `2 + 2` et c'est ce résultat qui est affecté à la variable `var`. Enfin,

Chunk id: 3802
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
- les opérations vectorielles (éléments par éléments) ;
- lorsque vous souhaitez manipuler des objets mathématiques (vecteurs, matrices, etc.) et les outils associés (algèbre linéaire) ;

Chunk id: 4749
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Dans ce dernier exemple, nous allons illustrer la puissance du *widget canvas* en vous montrant que l'on peut animer les objets se trouvant à l'intérieur. Nous allons également découvrir une

Chunk id: 3042
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
La figure @fig:sin2ori montre un exemple sur quelques points de la fonction $sin(x)$ (courbe en trait épais). Chaque trait pointillé représente la distance que l'on cherche à calculer entre les

Chunk id: 1191
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
...
>>> seq_list
['C', 'A', 'A', 'A', 'G', 'G', 'T', 'A', 'A', 'C', 'G', 'C']
```

Chunk id: 3079
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
indice négatif :       -4       -3       -2        -1
```  
ou encore :  
```text
liste          : ["A", "B", "C", "D", "E", "F"]
indice positif :   0    1    2    3    4    5

Chunk id: 3657
Number of Tokens: 91
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
```python
>>> liste_1 = [[0, 0], [1, 1]]
>>> liste_2 = list(liste_1)
>>> liste_3 = copy.deepcopy(liste_1)
>>> liste_1[1][1] = -365
>>> liste_2
[[0, 0], [1, -365]]
>>> liste_3
[[0, 0], [1, 1]]
```

Chunk id: 2462
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.

Chunk id: 406
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
```python
>>> l = [1, 2, 3]
>>> id(l)
140318850324832
>>> l[1] = -15
>>> id(l)
140318850324832
>>> l.append(5)
>>> id(l)
140318850324832
```

Chunk id: 4339
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
*f-string* est le diminutif de *formatted string literals*. Mais encore ? Dans le chapitre précédent, nous avons vu les chaînes de caractères ou encore *strings* qui étaient représentées par un texte

Chunk id: 3266
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
- Le livre *Apprendre à programmer avec Python 3* de Gérard Swinnen. Cet ouvrage est téléchargeable gratuitement sur le site de [Gérard Swinnen](http://www.inforef.be/swi/python.htm). Les éditions

Chunk id: 2699
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
que l'on peut itérer directement dessus. Pour Python, il s'agit d'un nouveau type, par exemple dans l'instruction `x = range(3)` la variable `x` est de type *range* (tout comme on avait les types

Chunk id: 321
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
Il existe de nombreuse autres fonctions dans le module *os*, n'hésitez pas à consulter la documentation.

Chunk id: 2608
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
et positifs (qui sont alors 1 et lui-même). Cette définition exclut 1, qui n'a qu'un seul diviseur entier positif. Par opposition, un nombre non nul produit de deux nombres entiers différents de 1

Chunk id: 1811
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
en mettant explicitement son nom. Ce mécanisme est assez souvent utilisé dans le module *Tkinter* (voir chapitre 20) pour la construction d'interfaces graphiques, nous en verrons de nombreux

Chunk id: 5005
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
#Ajout de l'entier i (tk.END signifie en dernier).
self.listbox.insert(tk.END, i)
#Selection du premier élément de listbox.
self.listbox.select_set(0)
#Liaison d'une méthode quand clic sur listbox.

Chunk id: 4717
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
### 20.6.2 Un *canvas* encapsulé dans une classe

Chunk id: 2224
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
On a vu que l'indentation est obligatoire en Python pour séparer les blocs d'instructions. Cela vient d'un constat simple, l'indentation améliore la lisibilité d'un code. Dans la PEP 8, la

Chunk id: 4939
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
méthodes dont le nom commence par `winfo`. Par exemple, la méthode `.winfo_toplevel()` renvoie la même information que l'attribut `.master` (une référence vers le *widget* parent).

Chunk id: 4221
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#construction-de-la-matrice-de-coordonnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.3 Construction de la matrice de coordonnées
Content:
Avec la fonction `array()` du module *NumPy*, convertissez la liste de coordonnées en `array`. Avec la fonction `reshape()` de *NumPy*, construisez ensuite une matrice à deux dimensions contenant les

Chunk id: 3277
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
## 10.2 Chaînes de caractères et listes  
Les chaînes de caractères peuvent être considérées comme des listes (de caractères) un peu particulières :  
```python
>>> animaux = "girafe tigre"

Chunk id: 3926
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
Ligne 11. On construit ensuite la variable `y` à partir de la formule modélisant l'évolution de la concentration en fonction du temps. Cette manipulation n'est possible que parce que `x` est du type

Chunk id: 1094
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
appelle ce comportement **redéfinition des opérateurs**. Nous serons amenés à revoir cette notion dans le chapitre 19 *Avoir la classe avec les objets*.

Chunk id: 4841
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
(MNT). Par ailleurs, la [page *Universal widget methods*](https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/universal.html) vous donnera une vue d'ensemble des différentes méthodes associées à

Chunk id: 3060
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
>>> tailles
[5, 2.5, 1.75, 0.15]
>>> mixte
['girafe', 5, 'souris', 0.15]
```  
Lorsque l'on affiche une liste, Python la restitue telle qu'elle a été saisie.

Chunk id: 3302
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
```python
>>> var = "f-string"
>>> f"voici une belle {var}"
'voici une belle f-string'
```

Chunk id: 2959
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
\  
- Étape 7 : Python s'apprête à renvoyer la variable *locale* `y` au programme principal. *Python Tutor* nous indique le contenu de la valeur renvoyée.

Chunk id: 2749
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
vers la droite (le premier caractère avec le premier, le deuxième avec le deuxième, etc). Dès qu'un caractère est différent entre l'une et l'autre des deux chaînes, il considère que la chaîne la plus

Chunk id: 2058
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Méthode inutile qui affiche coucou.
```  
L'attribut `.__doc__` est automatiquement créé par Python au moment de la mise en mémoire de la classe (ou module, méthode, fonction, etc.).

Chunk id: 726
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
### 13.4.3 *Frozensets*

Chunk id: 4840
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
Nouveau Mexique](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html) (MNT). Par ailleurs, la [page *Universal widget

Chunk id: 193
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
random.randint(0,2)
```  
Il est également possible de définir un alias (un nom plus court) pour un module :  
```python
>>> import random as rand
>>> rand.randint(1, 10)
6

Chunk id: 1140
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2111-nombres-de-friedman
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.1 Nombres de Friedman
Content:
Déterminez si les expressions suivantes correspondent à des nombres de Friedman. Pour cela, vous les écrirez en Python puis exécuterez le code correspondant.  
- $7 + 3^6$
- $(3 + 4)^3$
- $3^6 - 5$

Chunk id: 3489
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
on ajoute à seq la ligne (sans espace, chiffre et retour à la ligne)
si la ligne contient ORIGIN:
drapeau <- Vrai
```

Chunk id: 564
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
4 bien qu'ils aient le même nom. Comme on a vu plus haut, ceci est dû à l'opérateur d'affectation utilisé en ligne 6 (`t = t + (2,)`) qui crée un nouvel objet distinct de celui de la ligne 1. Cet

Chunk id: 4305
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
# 3 Affichage  
## 3.1 La fonction `print()`

Chunk id: 2559
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#673-minimum-dune-liste
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.3 Minimum d'une liste
Content:
### 6.7.3 Minimum d'une liste

Chunk id: 4528
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
L'utilisation d'une GUI va amener une nouvelle manière d'aborder le déroulement d'un programme, il s'agit de la programmation dite « événementielle ». Jusqu'à maintenant vous avez programmé «

Chunk id: 4138
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
Text(0, 0.5, 'Masse moléculaire (Dalton)')
>>> plt.savefig("transferrine1.png")
```  
On obtient un graphique similaire à celui de la figure @fig:transferrine (A)

Chunk id: 2053
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Toutes les *docstrings* d'une classe sont en fait stockées dans un attribut spécial nommé `instance.__doc__`. Cet attribut est une chaîne de caractères contenant la *docstring* générale de la classe.

Chunk id: 2012
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Le *name mangling* est donc un mécanisme qui transforme le nom `self.__attribut` à l'intérieur de la classe en `instance._NomClasse__attribut` à l'extérieur de la classe. Ce mécanisme a été conçu

Chunk id: 1717
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
### 19.4.2 Ordre de résolution des noms

Chunk id: 463
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
```python
>>> ani1["taille"]
5.0
```

Chunk id: 4219
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#lecture-des-coordonnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.2 Lecture des coordonnées
Content:
Affichez à l'écran le nombre total de coordonnées.

Chunk id: 1664
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
- `.__len__()` : redéfinit le comportement de la fonction `len()` ;
- `.__getitem__()` : redéfinit le comportement pour récupérer un élément ;

Chunk id: 4896
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
sans passer d'instance de fenêtre Tk. Voici un exemple avec les lignes qui changent seulement (tout le reste est identique au code précédent) :

Chunk id: 172
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
et les fonctions mathématiques avec *math*. Python possède de nombreux autres modules internes (c'est-à-dire présent de base lorsqu'on installe Python).

Chunk id: 3502
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
`trouve_calpha()`, qui calcule les distances interatomiques entre carbones alpha consécutifs et affiche ces distances sous la forme :

Chunk id: 3585
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Et la méthode `.reshape()` renvoie un nouvel *array* avec les dimensions spécifiées :  
```python
>>> a = np.arange(0, 6)
>>> a
array([0, 1, 2, 3, 4, 5])
>>> a.shape
(6,)
>>> b = a.reshape((2, 3))

Chunk id: 3803
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
- tout ce qui est numérique de manière générale.  
Utilisez les listes :

Chunk id: 1901
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Python, pour des raisons de lisibilité, il faudra dans la mesure du possible conserver une syntaxe `instance.attribut` pour l'accès aux attributs d'instance, et une syntaxe `instance.attribut =

Chunk id: 2388
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```bash
$ pylint script_quality_not_ok.py
************* Module script_quality_not_ok
script_quality_not_ok.py:6:29: C0326: Exactly one space required after comma

Chunk id: 2430
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 27 à 32. *Docstring* décrivant la classe.  
Lignes 33, 42 et 46. Avant chaque méthode de la classe, on laisse une ligne vide.

Chunk id: 1818
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Ce mécanisme n'est pas obligatoirement utilisé, mais il est très utile lorsqu'une classe fille a besoin d'initialiser des attributs définis dans la classe mère. On le croise donc souvent car :

Chunk id: 1388
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
vrai pour n'importe quel autre nom d'instance). *Python Tutor* nous indique cela par une flèche pointant vers un espace nommé `Citron instance`. La signification du `self` est expliquée en détail

Chunk id: 1439
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
`self` fait qu'elle n'est plus accessible en dehors de `.__init__()`. C'est exactement comme pour les fonctions classiques, `var` est finalement une variable locale au sein de la méthode

Chunk id: 3702
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
fonctions dans *NumPy*, nous développerons celle qui nous parait la plus intuitive et directe : `np.concatenate()`.

Chunk id: 4718
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Voici un exemple un peu plus conséquent d'utilisation du *widget canvas* qui est inclus dans une classe. Il s'agit d'une application dans laquelle il y a une zone de dessin, un bouton dessinant des

Chunk id: 1737
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
close-box-rem  
Pour vous en convaincre, nous pouvons recréer une classe vide :  
```python
>>> class Citron:
...     pass
```  
Puis ensuite regarder l'aide sur l'une de ses instances :  
```python

Chunk id: 1442
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
(cf. chapitres 9 et 12 sur les fonctions). Ainsi, Python renvoie une erreur car `var` n'existe pas lorsque `.affiche_attributs()` est en exécution.

Chunk id: 62
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
...
>>> ma_fonction()
x vaut 2 dans la fonction
>>> print(x)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
NameError: name 'x' is not defined
```

Chunk id: 3529
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
offertes par *NumPy*, notamment en proposant des algorithmes couramment utilisés en calcul scientifique.

Chunk id: 186
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
bien qu'il est inutile de répéter le nom du module dans ce cas, seul le nom de la fonction en question est requis.

Chunk id: 4172
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
```python
>>> df["Deposit Date"].value_counts().head()
1999-01-07    2
2000-09-04    2
2002-11-18    2
2003-03-10    1
2001-07-24    1
Name: Deposit Date, dtype: int64
```

Chunk id: 4745
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
pas dans une variable car on ne souhaite ni les réutiliser ni changer leurs propriétés par la suite. Vous pourrez noter ici l'avantage de programmer avec une classe, le *canvas* est directement

Chunk id: 3199
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
```text
PS C:\Users\pierre> python
Python 3.7.1 (default, Dec 10 2018, 22:54:23) [MSC v.1915 64 bit (AMD64)] [...]
Type "help", "copyright", "credits" or "license" for more information.
>>>
```

Chunk id: 2879
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
Le nombre d'arguments que l'on peut passer à une fonction est variable. Nous avons vu ci-dessus des fonctions auxquelles on passait 0 ou 1 argument. Dans les chapitres précédents, vous avez rencontré

Chunk id: 3664
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```  
Par défaut, les fonctions `zeros()` et `ones()` génèrent des *floats*, mais vous pouvez demander des entiers en passant le type (par exemple `int`, `float`, etc.) en second argument :

Chunk id: 4674
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Lignes 11 et 12. On place les deux *widgets* dans la fenêtre avec la méthode `.pack()`.

Chunk id: 1283
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
La POO permet de rédiger du code plus compact et mieux ré-utilisable. L'utilisation de classes évite l'utilisation de variables globales en créant ce qu'on appelle un *espace de noms* propre à chaque

Chunk id: 4561
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
Lorsqu'on est dans `une_fct()` on pourra utiliser bien sûr des arguments lors de l'appel de notre fonction *callback* si on le souhaite. Notez enfin que dans `une_fct()` la fonction *callback* reçue

Chunk id: 1629
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
ASCII si l'argument est une chaîne de caractères, et elle va trier par ordre croissant lorsque l'argument est une liste d'entiers :

Chunk id: 4248
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
dans un *array* 2D (matrice) `coors_P`. La dimensionnalité de cette matrice est $n \times 3$, avec $n$ le nombre de phosphores.

Chunk id: 264
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
va alors produire une **série donnée** de nombres pseudo-aléatoires qui dépendent de cette graine. Si on change la graine, la série de nombres change.

Chunk id: 3827
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
Définition d'une séquence :  
```python
>>> import Bio
>>> from Bio.Seq import Seq
>>> ADN = Seq("ATATCGGCTATAGCATGC")
>>> ADN
Seq('ATATCGGCTATAGCATGC')
```

Chunk id: 1561
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
def fct2():
print("Dans module, j global:", j)

Chunk id: 4061
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
```  
Nous avons 5 colonnes de données :  
- l'identifiant de la structure (`PDB ID`) ;
- l'organisme d'où provient cette protéine (`Source`) ;

Chunk id: 3096
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
On peut aussi préciser le pas en ajoutant un symbole deux-points supplémentaire et en indiquant le pas par un entier.  
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]

Chunk id: 1842
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
close-box-more

Chunk id: 795
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
### 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN

Chunk id: 1646
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
que Python affiche un message personnalisé lors de l'utilisation de la fonction `print()` avec une instance de cette classe. La méthode magique qui permettra cela est nommée `.__str__()` : elle

Chunk id: 3584
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
>>> w
array([[1, 2],
[3, 4],
[5, 6]])
>>> w.ndim
2
>>> w.shape
(3, 2)
>>> w.size
6
```  
Et la méthode `.reshape()` renvoie un nouvel *array* avec les dimensions spécifiées :  
```python

Chunk id: 1362
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
```  
Vous l'aurez deviné, ce code affichera `acide` à l'écran. Comme pour les fonctions, une valeur retournée par une méthode est récupérable dans une variable, ici `saveur_citron1`.

Chunk id: 3447
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
à droite ou de droite à gauche. Par exemple, « ressasser » et « engage le jeu que je le gagne » sont des palindromes.

Chunk id: 1548
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
Comme vu dans le chapitre 9 *Fonctions*, la règle LGI peut être résumée ainsi : *Local > Global > Interne*. Lorsque Python rencontre un objet, il utilise cette règle de priorité pour accéder à la

Chunk id: 3947
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Ligne 16. Enfin, on enregistre le graphique généré au format png.

Chunk id: 3488
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
Lire toutes les lignes du fichier:
si la ligne contient //:
drapeau <- Faux
si drapeau est Vrai:
on ajoute à seq la ligne (sans espace, chiffre et retour à la ligne)
si la ligne contient ORIGIN:

Chunk id: 4008
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
```python
>>> df.iloc[1]
Paris     20
Lyon      21
Nantes    22
Pau       23
Name: singe, dtype: int64
```  
```python
>>> df.iloc[[1,0]]
Paris  Lyon  Nantes  Pau
singe     20    21      22   23

Chunk id: 345
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#888-compteur-de-lignes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.8 Compteur de lignes
Content:
### 8.8.8 Compteur de lignes

Chunk id: 1785
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
if __name__ == "__main__":
#On crée un citron.
citron1 = Citron(taille="petite", saveur="acide",
forme="ellipsoïde", masse=50)
print(citron1)
```

Chunk id: 4106
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
25%    331.000000  36542.300000
50%    337.000000  37229.300000
75%    679.000000  75298.500000
max    696.000000  77067.900000
```  
On apprend ainsi que la masse moléculaire (colonne `MW`)

Chunk id: 1835
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
open-box-more  
À ce stade, nous pouvons émettre deux remarques :

Chunk id: 2018
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
if __name__ == "__main__":
citron1 = Citron()
citron1.print_masse()
```

Chunk id: 421
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
d'identité. Tout objet a un un identifiant, mais il doit être hachable pour avoir une valeur de hachage.

Chunk id: 3402
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
```text
>>> help(animaux.split)
Help on built-in function split:

Chunk id: 4128
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
L'argument `values` indique sur quelles colonnes les statistiques sont calculées.  
Enfin, `aggfunc` liste les statistiques calculées, ici la valeur minimale et maximale.

Chunk id: 4444
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
Le signe `%` est rappelé une seconde fois (`% (nb_G, nb_C, prop_GC)`) pour indiquer les variables à formater.

Chunk id: 1235
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1154-formatage-fasta-dune-sequence-avec-la-ligne-de-commentaire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.4 Formatage FASTA d'une séquence (avec la ligne de commentaire)
Content:
```python
>>> com = "Séquence de 150 alanines"
>>> seq = "A" * 150
>>> width = 60
>>> seq_split = [seq[i:i+width] for i in range(0, len(seq), width)]
>>> print(">"+com+"\n"+"\n".join(seq_split))

Chunk id: 579
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
```python
>>> tuple([1,2,3])
(1, 2, 3)
>>> tuple("ATGCCGCGAT")
('A', 'T', 'G', 'C', 'C', 'G', 'C', 'G', 'A', 'T')
```  
open-box-rem

Chunk id: 1849
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
open-box-rem

Chunk id: 1969
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
le moyen de contrôler cet accès avec la classe *property*. Toutefois, cela peut parfois alourdir inutilement le code, ce qui va à l'encontre de certains préceptes de la PEP 20 comme « *Sparse is

Chunk id: 554
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
Pratiquement, on utilise les parenthèses au lieu des crochets pour les créer :  
```python
>>> t = (1, 2, 3)
>>> t
(1, 2, 3)
>>> type(t)
<class 'tuple'>
>>> t[2]
3
>>> t[0:2]
(1, 2)
>>> t[2] = 15

Chunk id: 2538
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
les nombres flottants (comme un rapport de nombres binaires). Ainsi certaines valeurs de *float* ne peuvent être qu'approchées. Une manière de s'en rendre compte est d'utiliser l'écriture formatée en

Chunk id: 1172
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1118-count
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.8 `.count()`
Content:
### 11.1.8 `.count()`  
La méthode `.count()` compte le nombre d'éléments (passés en argument) dans une liste :  
```python
>>> a = [1, 2, 4, 3, 1, 1]
>>> a.count(1)
3
>>> a.count(4)
1
>>> a.count(23)

Chunk id: 534
Number of Tokens: 84
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13210-liste-de-dictionnaires
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.10 Liste de dictionnaires
Content:
```python
>>> animaux = [ani1, ani2]
>>> animaux
[{'nom': 'girafe', 'poids': 1100, 'taille': 5.0}, {'nom': 'singe',
'poids': 70, 'taille': 1.75}]
>>>
>>> for ani in animaux:
...     print(ani["nom"])

Chunk id: 1538
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
close-box-def

Chunk id: 1810
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
`ClasseMere.__init__()` on indique sans ambiguïté qu'on appelle le constructeur de la classe mère, en mettant explicitement son nom. Ce mécanisme est assez souvent utilisé dans le module *Tkinter*

Chunk id: 1839
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
de lire des ressources supplémentaires. En langue française, vous trouverez les livres de [Gérard Swinnen](https://inforef.be/swi/python.htm), [Bob Cordeau et Laurent

Chunk id: 3684
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```  
Ceci générera le fichier `out.dat` contenant les lignes suivantes :  
```text
1.000000000000000000e+00 2.000000000000000000e+00 3.000000000000000000e+00

Chunk id: 2179
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
- `%history` liste toutes les commandes Python lancées dans un notebook (voir figure @fig:jupyter-history).  
![*Magic command* `%whos`.](img/jupyter-whos.png){ #fig:jupyter-whos width=80% }

Chunk id: 1710
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
open-box-rem

Chunk id: 1846
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
de nouveaux attributs depuis l'extérieur ! Dans d'autres langages orientés objet ceci n'est pas considéré comme une bonne pratique. Il est plutôt recommandé de définir une *interface*, c'est-à-dire

Chunk id: 4594
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
qui construisent un *widget*, les arguments possibles pour la mise en forme de celui-ci sont nombreux, si bien qu'ils sont toujours des arguments par mot-clé. Si on ne précise pas un de ces arguments

Chunk id: 2437
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Découpez en fonctions chaque élément de votre programme. Vous pourrez ainsi tester chaque élément indépendamment du reste. Pensez à écrire les *docstrings* en même temps que vous écrivez vos

Chunk id: 1572
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
principal / fonction / méthode appelant un composant de ce module. Enfin, les variables globales créées dans notre programme principal ne sont pas accessibles dans le module lorsque celui-ci est en

Chunk id: 3335
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Pour mettre en majuscule la première lettre seulement, vous pouvez faire :  
```python
>>> x[0].upper() + x[1:]
'Girafe'
```
ou plus simplement utiliser la méthode adéquate :
```python

Chunk id: 4583
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
qu'une seule fois par programme. Vous pouvez, par curiosité, lancer une commande `dir(racine)` ou `help(racine)`, vous verrez ainsi les très nombreuses méthodes et attributs associés à un tel objet

Chunk id: 2385
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Lignes 6 et 7. Dans la *docstring* de la fonction `Multiplie_nombres()` (ligne 7 du script), il manque un point à la fin de la première ligne.

Chunk id: 3472
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
### 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)

Chunk id: 615
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
>>> print(x, y)
3 14
```  
open-box-adv  
Lorsqu'une fonction renvoie plusieurs valeurs sous forme de tuple, ce sera bien sûr la forme `x, y = ma_fonction()` qui sera privilégiée.  
close-box-adv

Chunk id: 556
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
(1, 2)
>>> t[2] = 15
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
```

Chunk id: 3688
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
les données comme des *floats* en notation scientifique. Bien sûr il existe de nombreuses [options possibles](https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html) permettant de

Chunk id: 1009
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
Le numéro d'accession `O95139` se situe entre le premier et le second symbole `|` (symbole *pipe*). Attention, il faudra « échapper » ce symbole car il a une signification particulière dans une

Chunk id: 3506
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
La distance inter-carbone alpha dans les protéines est très stable et de l'ordre de 3,8 angströms. Observez avec attention les valeurs que vous avez calculées pour la protéine barstar. Repérez une

Chunk id: 1754
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
```python
>>> class Citron:
...     pass
...
>>> c = Citron()
>>> dir(c)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__',

Chunk id: 1451
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Lignes 6 et 7. La méthode `.affiche_message()` est exécutée. On peut se poser la question *Pourquoi passer l'argument self à cette méthode alors qu'on ne s'en sert pas dans celle-ci ?*

Chunk id: 3808
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
les fonctions de lecture de fichier de *NumPy* pour quelque raison que ce soit, il est tout à fait classique de faire grandir une liste au fur et à mesure de la lecture du fichier puis de la

Chunk id: 3945
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Ligne 12. La fonction `xtics()` redéfinit les étiquettes (c'est-à-dire le nom des bases) sur l'axe des abscisses.

Chunk id: 1460
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
d'instance `couleur` prendra ainsi cette valeur au lieu de celle par défaut (`"jaune"`). À noter, l'instanciation affichera le message `Le citron c'est trop bon !` puisque la méthode

Chunk id: 3404
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any

Chunk id: 2776
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#542-boucle-et-jours-de-la-semaine
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.2 Boucle et jours de la semaine
Content:
### 5.4.2 Boucle et jours de la semaine  
Constituez une liste `semaine` contenant les 7 jours de la semaine.

Chunk id: 4977
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
### 20.8.3 Compte à rebours

Chunk id: 734
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
>>> f1.union(f2)
frozenset({0, 1, 2, 3, 4, 5})
>>> f1.intersection(f2)
frozenset({1, 3, 5})
```

Chunk id: 680
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Ceci optimise l'accès à chaque élément du *set*. Pour rappel, les objets hachables que nous connaissons sont les chaînes de caractères, les tuples, les entiers, les *floats*, les booléens et les

Chunk id: 64
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
de retour dans le module principal (dans ce cas, il s'agit de l'interpréteur Python), il ne la connaît plus, d'où le message d'erreur.

Chunk id: 4936
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
Ces attributs `.master` et `.children` existent pour tous *widgets* et sont bien pratiques lorsqu'on crée de grosses applications graphiques (où on utilise souvent des *widgets* parents contenant

Chunk id: 2660
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
La variable `animal` est appelée **variable d'itération**, elle prend successivement les différentes valeurs de la liste `animaux` à chaque itération de la boucle. On verra un peu plus loin dans ce

Chunk id: 2301
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
à 120% sûr que votre code ne sera lu que par des francophones. Dans la mesure où vous allez souvent développer des programmes scientifiques, nous vous conseillons d'écrire vos commentaires en

Chunk id: 3321
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
```python
>>> animal = "renard"
>>> animal2 = "poulain"
>>> s = f"Le {animal} est un animal gentil\nLe {animal2} aussi"
>>> s
'Le renard est un animal gentil\nLe poulain aussi'
>>> print(s)

Chunk id: 137
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1263-conclusion
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.3 Conclusion
Content:
### 12.6.3 Conclusion

Chunk id: 2476
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
Les **tests** sont un élément essentiel à tout langage informatique si on veut lui donner un peu de complexité car ils permettent à l'ordinateur de prendre des décisions. Pour cela, Python utilise

Chunk id: 4979
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
entre 1 et 240 minutes en passant un argument au lancement du script, par exemple : `python tk_compte_a_rebours.py 34` signifiera un compte à rebours de 34' (le programme vérifiera qu'il s'agit d'un

Chunk id: 2009
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
On pourrait croire que cela constitue un mécanisme de protection des attributs. En fait il n'en est rien, car on va voir que l'attribut est toujours accessible et modifiable. Si on modifiait le

Chunk id: 477
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
des éléments du dictionnaire ainsi que des comparaisons de clés entre dictionnaires extrêmement efficaces. Même si on a vu que deux objets pouvaient avoir la même valeur de hachage, par exemple `a =

Chunk id: 3523
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
# 17 Quelques modules d'intérêt en bioinformatique

Chunk id: 3325
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
La *f-string* remplace le contenu des variables situées entre les accolades et interprète le `\n` comme un retour à la ligne. Pour rappel, consultez le chapitre 3 si vous souhaitez plus de détails

Chunk id: 3380
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
de chaînes de caractères en une chaîne de caractères est particulière puisqu'elle fait appelle à la méthode `.join()`.

Chunk id: 3596
Number of Tokens: 96
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
(3, 3)
>>> a
array([[0, 1, 2],
[3, 4, 5],
[0, 0, 0]])
```  
```python
>>> b = np.arange(0, 10)
>>> b.shape
(10,)
>>> b.resize((2, 3), refcheck=False)
>>> b.shape
(2, 3)
>>> b
array([[0, 1, 2],

Chunk id: 4004
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
Pau       23
Name: singe, dtype: int64
```  
Ici aussi, on peut sélectionner plusieurs lignes :  
```python
>>> df.loc[["singe", "chat"]]
Paris  Lyon  Nantes  Pau
singe     20    21      22   23

Chunk id: 4290
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
#étiquetage des axes et du graphique
plt.xlabel("Années")
plt.ylabel("Nombre de publications")
plt.title("Distribution des publications qui mentionnent la barstar")

Chunk id: 1177
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
variable. Il s'agit d'un exemple d'utilisation de méthode (donc de fonction particulière) qui fait une action mais qui ne renvoie rien. Pensez-y dans vos utilisations futures des listes : même si

Chunk id: 960
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
'pi vaut quelque chose et e vaut quelque chose'
>>> regex.sub("quelque chose", "pi vaut 3.14 et e vaut 2.72", count=1)
'pi vaut quelque chose et e vaut 2.72'
```

Chunk id: 397
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
qui ont la même valeur. L'identifiant peut être assimilé à l'adresse mémoire de l'objet qui elle aussi est unique. En Python, on utilise la fonction interne `id()` qui prend en argument un objet et

Chunk id: 2373
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
8. Ensuite, `pycodestyle` fournit un code et un message explicatif. Ici, il faut deux lignes vides avant la fonction `Multiplie_nombres()`.

Chunk id: 1082
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
Pour obtenir le quotient et le reste d'une division entière (voir [ici](https://fr.wikipedia.org/wiki/Division_euclidienne) pour un petit rappel sur la division entière), on utilise respectivement

Chunk id: 3156
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- Il est relativement *simple* à prendre en main[^footnote].
- Enfin, il est très utilisé en bioinformatique et plus généralement en analyse de données.

Chunk id: 1941
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Notez bien l'utilisation de `self.masse` dans le constructeur (en ligne 4) plutôt que `self._masse`. Comme `self.masse` appelle la méthode `.set_masse()`, cela permet de contrôler si la valeur est

Chunk id: 3101
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#46-fonction-len
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.6 Fonction `len()`
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> len(animaux)
4
>>> len([1, 2, 3, 4, 5, 6, 7, 8])
8
```

Chunk id: 2815
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
On imagine une puce qui se déplace aléatoirement sur une ligne, en avant ou en arrière, par pas de 1 ou -1. Par exemple, si elle est à l'emplacement 0, elle peut sauter à l'emplacement 1 ou -1; si

Chunk id: 4118
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Sus scrofa             696.000000  77067.900000
```  
La méthode `.groupby()` rassemble d'abord les données suivant la colonne

Chunk id: 4304
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selections-et-statistiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.6 Sélections et statistiques
Content:
#### 17.6.6.6 Sélections et statistiques  
Déterminez l'âge moyen des individus qui mesurent plus de 1,80 m.  
Déterminez la taille maximale des femmes qui ont plus de 35 ans.

Chunk id: 3595
Number of Tokens: 91
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> a = np.arange(0, 6)
>>> a.shape
(6,)
>>> a.resize((3, 3), refcheck=False)
>>> a.shape
(3, 3)
>>> a
array([[0, 1, 2],
[3, 4, 5],
[0, 0, 0]])
```  
```python
>>> b = np.arange(0, 10)

Chunk id: 1099
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#253-operations-illicites
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.3 Opérations illicites
Content:
>>> "toto" + 2
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
```

Chunk id: 4770
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
def boom(self, mclick):
"""Relance la baballe dans une direction aléatoire au point du clic."""
self.x = mclick.x
self.y = mclick.y
self.canv.create_text(self.x, self.y, text="Boom !", fill="red")

Chunk id: 2413
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
class UneSuperClasse():
"""Résumé de la docstring décrivant la classe.

Description détaillée ligne 1
Description détaillée ligne 2
Description détaillée ligne 3
"""

Chunk id: 4648
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
crée un espace de noms propre à votre application, et toutes les variables nécessaires seront ainsi des attributs de cette classe. Reprenons notre petit exemple avec un label et un bouton :

Chunk id: 4311
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
Hello world!
>>> print("Hello world!", end="")
Hello world!>>>
```  
Ligne 1. On a utilisé l'instruction `print()` classiquement en passant la chaîne de caractères `"Hello world!"` en argument.

Chunk id: 1927
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Ligne 17. Il s'agit de la commande clé pour mettre en place le système : `masse` devient ici un objet de type *property* (si on regarde son contenu avec une syntaxe `NomClasse.attribut_property`,

Chunk id: 4310
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```python
>>> print("Hello world!")
Hello world!
>>> print("Hello world!", end="")
Hello world!>>>
```

Chunk id: 1790
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
importante que nous n'avons encore jamais vue : l'instruction `Fruit.__init__()` est un appel au constructeur de la classe mère (cf. explications plus bas). Notez bien que le premier argument passé

Chunk id: 3467
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
Créez la fonction `pangramme()` qui utilise la fonction `get_alphabet()` précédente, qui prend en argument une chaîne de caractères (`xxx`) et qui renvoie `xxx est un pangramme` si cette chaîne de

Chunk id: 2525
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
```python
>>> True or False
True
```  
Enfin, on peut utiliser l'opérateur logique de négation `not` qui inverse le résultat d'une condition :  
```python
>>> not True
False
>>> not False
True

Chunk id: 3351
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
-1
```  
Si l'élément recherché est trouvé, alors l'indice du début de l'élément dans la chaîne de caractères est renvoyé. Si l'élément n'est pas trouvé, alors la valeur `-1` est renvoyée.

Chunk id: 1233
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1153-formatage-dune-sequence-avec-60-caracteres-par-ligne
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.3 Formatage d'une séquence avec 60 caractères par ligne
Content:
>>> print("\n".join(seq_split))
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
```

Chunk id: 1016
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1645-le-defi-du-de-htmliseur-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.5 Le défi du dé-htmliseur (exercice +++)
Content:
Nous vous conseillons tout d'abord d'ouvrir le fichier HTML dans un éditeur de texte et de bien l'observer. N'hésitez pas à vous aider des sites mentionnés dans les ressources en ligne

Chunk id: 4247
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
- Récupérez les coordonnées des atomes de phosphore depuis le fichier `coors_P.dat` et stockez-les dans un *array* 2D (matrice) `coors_P`. La dimensionnalité de cette matrice est $n \times 3$, avec

Chunk id: 2973
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
L'acronyme [DRY](https://www.earthdatascience.org/courses/intro-to-earth-data-science/write-efficient-python-code/intro-to-clean-code/dry-modular-code/) signifie *Don't Repeat Yourself*. Les

Chunk id: 435
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
des boucles ou générer des listes de nombres. Toutefois, on a vu ci-dessus qu'ils étaient aussi des containers. Ils sont ordonnés, indexables, itérables, hachables et non modifiables.

Chunk id: 2228
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
Afin de toujours utiliser cette règle des 4 espaces pour l'indentation, il est essentiel de régler correctement votre éditeur de texte. Consultez pour cela l'annexe *Installation de Python*

Chunk id: 3451
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
Testez ensuite si les expressions suivantes sont des palindromes :  
- `radar`
- `never odd or even`
- `karine alla en Iran`
- `un roc si biscornu`

Chunk id: 4536
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
action de la part de l'utilisateur. C'est lui qui effectuera une action lors de l'interaction de l'utilisateur avec chaque *widget* de la GUI. Ainsi, l'exécution du programme sera réellement guidée

Chunk id: 425
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
l'identifier **en fonction de son contenu**. Par ailleurs, l'hachabilité est une implémentation qui permet un accès rapide aux éléments des containers de type dictionnaire ou *set* (cf. rubriques

Chunk id: 4151
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
En réalisant une régression linéaire, on détermine les paramètres de
la droite qui passent le plus proche possible des points du graphique.  
```python
>>> from scipy.stats import linregress

Chunk id: 4276
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
En utilisant maintenant la méthode `Entrez.esummary()` dans une boucle, récupérez la date de publication de chaque article. Stockez l'année sous forme d'un nombre entier dans la liste `years`. Cette

Chunk id: 3960
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
Ainsi, pour appeler le premier élément de la série, on peut utiliser son index,
comme pour une liste (0 pour le premier élément) ou son étiquette (ici, `"a"`) :  
```python
>>> s[0]
10
>>> s["a"]
10

Chunk id: 963
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
>>> phrase = "pi vaut 3.14 et e vaut 2.72"
>>> regex.sub("approximativement \\1", phrase)
'pi vaut approximativement 3 et e vaut vaut approximativement 2'

Chunk id: 1881
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
des attributs. De plus, nous avons pu mettre une valeur aberrante (masse négative) sans que cela ne génère une erreur !

Chunk id: 2700
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
l'instruction `x = range(3)` la variable `x` est de type *range* (tout comme on avait les types *int*, *float*, *str* ou *list*) à utiliser spécialement avec les boucles.

Chunk id: 1445
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
```python
class Citron:
def __init__(self, couleur="jaune"):
self.couleur = couleur
self.affiche_message()

Chunk id: 2708
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
une liste de 1 million d'éléments dans la mémoire puis itérerait dessus, d'où une énorme perte de temps !

Chunk id: 921
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
### 16.3.2 Les fonctions `match()` et `fullmatch()`

Chunk id: 4041
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
```  
Par défaut, *pandas* va conserver le plus de lignes possible. Si on ne souhaite conserver que les lignes communes aux deux *dataframes*, il faut ajouter l'argument `join="inner"` :  
```python

Chunk id: 2613
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-1-peu-optimale-mais-assez-intuitive
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.1 Méthode 1 (peu optimale mais assez intuitive)
Content:
#### 6.7.9.1 Méthode 1 (peu optimale mais assez intuitive)

Chunk id: 4105
Number of Tokens: 92
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
mean   477.341463  52816.090244
std    175.710217  19486.594012
min    304.000000  33548.100000
25%    331.000000  36542.300000
50%    337.000000  37229.300000
75%    679.000000  75298.500000

Chunk id: 1216
Number of Tokens: 105
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
```python
>>> x = [[1, 2], [3, 4]]
>>> x
[[1, 2], [3, 4]]
>>> y = x[:]
>>> x[1][1] = 55
>>> x
[[1, 2], [3, 55]]
>>> y
[[1, 2], [3, 55]]
```  
et  
```python
>>> y = list(x)
>>> x[1][1] = 77
>>> x

Chunk id: 258
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
les mêmes résultats même si on utilise des nombres aléatoires. Pour cela, on peut définir ce qu'on appelle la « graine aléatoire ».

Chunk id: 1627
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
close-box-def

Chunk id: 4403
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
Si on donne une *f-string* à la fonction `print()`, Python évalue d'abord la *f-string* et c'est la chaîne de caractères qui en résulte qui est affichée à l'écran. Tout comme dans l'instruction

Chunk id: 3309
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
>>> print(s)
Voici un retour à la ligne
Et là une autre ligne
>>> s = r"Voici un retour à la ligne\nEt là une autre ligne"
>>> s
'Voici un retour à la ligne\\nEt là une autre ligne'
>>> print(s)

Chunk id: 2989
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
### 9.8.1 Carré et factorielle  
Reprenez l'exemple précédent à l'aide du site [*Python Tutor*](http://www.pythontutor.com) :  
```python
#définition d'une fonction carre()
def carre(x):
y = x**2

Chunk id: 3082
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
pouvez accéder au dernier élément d'une liste à l'aide de l'indice `-1` sans pour autant connaître la longueur de cette liste. L'avant-dernier élément a lui l'indice `-2`, l'avant-avant dernier

Chunk id: 3979
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
d'une liste de valeurs correspondantes à des lignes. Ainsi `np.arange(10, 14)`
qui est équivalent à `[10, 11, 12, 13]` correspond à la première ligne du *dataframe*.

Chunk id: 4581
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
de la classe `tk.Tk` dans la variable `racine`. Tous les *widgets* que l'on créera ensuite seront des fils de cette fenêtre. On pourra d'ailleurs noter que cette classe `tk.Tk` ne s'instancie en

Chunk id: 1220
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
## 11.5 Liste de compréhension  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 4666
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 6. On appelle la méthode `self.creer_widgets()` de notre classe `Application`. Pour rappel, le `self` avant le `.creer_widgets()` indique qu'il s'agit d'une méthode de notre classe (et non pas

Chunk id: 209
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
les unes après les autres, ou les touches *page-up* et *page-down* pour faire défiler l'aide page par page.

Chunk id: 4657
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
nous héritons ainsi de toutes les méthodes et attributs de cette classe mère, mais nous pouvons en outre en ajouter de nouvelles/nouveaux (on parle aussi de « redéfinition » de la classe `tk.Tk`) !

Chunk id: 3694
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
permettant de lire des données au format binaire. De même, il existe des fonctions ou méthodes permettant d'écrire au format binaire :

Chunk id: 719
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> s1.difference(s2)
{4}
>>> s2.difference(s1)
{0, 2}
```  
Enfin, deux autres méthodes sont très utiles :  
```python
>>> s1 = set(range(10))
>>> s2 = set(range(3, 7))

Chunk id: 4001
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.1 Sélection de colonnes
Content:
>>> df[["Lyon", "Pau"]]
Lyon  Pau
chat      11   13
singe     21   23
souris    31   33
```
Pour la sélection de plusieurs colonnes, les étiquettes d'intérêt sont rassemblées dans une liste.

Chunk id: 455
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
itérait dessus, l'ordre n'était pas garanti. Depuis Python 3.7 (inclus), ce comportement a changé, un dictionnaire est toujours affiché dans le même ordre que celui utilisé pour le remplir. De même,

Chunk id: 2311
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
True
```
Vous constatez dans l'exemple ci-dessus que pour Python, c'est exactement la même chose. Et à notre connaissance, il n'existe pas de recommandation officielle sur le sujet.

Chunk id: 1186
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
close-box-rem  
- Certaines méthodes ou instructions des listes décalent les indices d'une liste (par exemple `.insert()`, `del`, etc.).

Chunk id: 678
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
version 3.6), les *sets* sont non ordonnés. La manière dont Python les affiche n'a pas de sens en tant que tel et peut être différente de celle utilisée lors de leur création.

Chunk id: 2969
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
le chapitre 12. D'ici là, essayez de vous entraîner au maximum avec les fonctions. C'est un concept ardu, mais il est impératif de le maîtriser.

Chunk id: 3792
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
4))
>>> a
array([[0.58704728, 0.50212977, 0.70652863, 0.24158108],
[0.93102132, 0.41864373, 0.45807961, 0.98288744],
[0.48198211, 0.16877376, 0.14431518, 0.74784176],

Chunk id: 474
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
Pourquoi les clés doivent être des objets hachables ? C'est la raison d'être des dictionnaires, d'ailleurs ils sont aussi appelés [table de hachage](https://fr.wikipedia.org/wiki/Table_de_hachage)

Chunk id: 443
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
d'objets (ceci est vrai jusqu'à la version 3.6 de Python, voir remarque ci-dessous). Il ne s'agit pas d'objets séquentiels comme les listes ou chaînes de caractères, mais plutôt d'objets dits de

Chunk id: 1423
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
`.affiche_attributs()`. Comme pour le constructeur, cette méthode prend comme premier argument une variable obligatoire, que nous avons à nouveau nommée `self`. Il s'agit encore une fois d'une

Chunk id: 2567
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#675-notes-et-mention-dun-etudiant
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.5 Notes et mention d'un étudiant
Content:
Affichez la valeur de la moyenne avec deux décimales. Affichez aussi la mention obtenue sachant que la mention est « passable » si la moyenne est entre 10 inclus et 12 exclus, « assez bien » entre 12

Chunk id: 3895
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
|     1     |          3.5         |
|     2     |          5.8         |
|     3     |          9.1         |
|     4     |         11.8         |
|     6     |         17.5         |

Chunk id: 4361
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
GC d'un génome. La proportion de GC s'obtient comme la somme des bases Guanine (G) et Cytosine (C) divisée par le nombre total de bases (A, T, C, G) du génome considéré. Si on a, par exemple, 4500

Chunk id: 2635
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
2. le nombre se trouve entre 50 et 100, on propose 75 ( 50 + (100-50)/2 ).
3. le nombre se trouve entre 75 et 100, on propose 87 ( 75 + (100-75)/2 ).

Chunk id: 14
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
```python
#définition des fonctions
def polynome(x):
return (x**2 - 2*x + 1)

Chunk id: 1873
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
en Python, on peut très bien accéder et modifier les attributs même si on a des *getters* et des *setters* dans la classe. Imaginons la même classe `Citron` que ci-dessus, mais on utilise le

Chunk id: 404
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
ce n'est pas la valeur de `a` qui a été changée puisque l'identifiant n'est plus le même. Le même raisonnement peut être tenu pour les autres types numériques comme les *floats* et booléens. Si on

Chunk id: 9
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
ci-dessous avec le site [*Python Tutor*](http://www.pythontutor.com/) afin de suivre l'état des variables lors de l'exécution des exemples.

Chunk id: 4689
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
Le *widget* [*canvas*](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/canvas.html) de *Tkinter* est très puissant. Il permet de dessiner des formes diverses (lignes, cercles, etc.), et même de les

Chunk id: 2046
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Python formate automatiquement l'aide comme il le fait avec les modules (voir chapitre 14 *Création de modules*). Comme nous l'avons dit dans le chapitre 15 *Bonnes pratiques en programmation

Chunk id: 989
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
fait sur le site de restriction de l'ADN qui correspond à une séquence particulière de nucléotides (bases).

Chunk id: 3329
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
qui vont au delà de ce cours. Pour en savoir plus, vous pouvez consulter la [documentations officielle](https://docs.python.org/fr/3/reference/lexical_analysis.html#grammar-token-stringprefix).

Chunk id: 5001
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
```python
import tkinter as tk

Chunk id: 3627
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
Avec `axis=1` on fait une opération similaire mais en faisant varier les colonnes. On récupère ainsi une valeur par ligne :  
```python
>>> a.max(axis=1)
array([7, 6, 3, 5])
```

Chunk id: 2447
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Testez toujours votre code sur un jeu de données **simple** pour pouvoir comprendre rapidement ce qui se passe. Par exemple, une séquence de 1000 bases est plus facile à gérer que le génome humain

Chunk id: 1877
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
#on change les attributs de citron1 avec les setters
citron1.set_couleur("jaune foncé")
citron1.set_masse(100)
print(citron1.get_couleur(), citron1.get_masse())
#on les rechange sans les setters

Chunk id: 4390
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Vous voyez tout de suite l'énorme avantage de l'écriture formatée. Elle vous permet d'écrire en colonnes parfaitement alignées. Nous verrons que ceci est très pratique si l'on veut écrire les

Chunk id: 2393
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
doesn't conform to snake_case naming style (invalid-name)
script_quality_not_ok.py:4:0: W0611: Unused import os (unused-import)

Chunk id: 239
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
Enfin, notez qu'il existe de nombreux autres modules externes qui ne sont pas installés de base dans Python mais qui sont très utilisés en bioinformatique et en analyse de données. Citons-en

Chunk id: 4424
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
Dans les premières versions de Python jusqu'à la 2.6, il fallait utiliser l'opérateur `%`, puis de la version 2.7 jusqu'à la 3.5 il était plutôt conseillé d'utiliser la méthode `.format()` (voir la

Chunk id: 475
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
ils sont aussi appelés [table de hachage](https://fr.wikipedia.org/wiki/Table_de_hachage) dans d'autres langages comme Perl. Convertir chaque clé en sa valeur de hachage permet un accès très rapide à

Chunk id: 3789
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
qui sont des *arrays* dans lesquels on peut trouver des valeurs manquantes ou invalides.

Chunk id: 1379
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
```python
class Citron:
def __init__(self):
self.couleur = "jaune"

Chunk id: 525
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
par exemple, pas le cas pour le dictionnaire `ani2` car les valeurs sont des valeurs numériques et une chaîne de caractères :

Chunk id: 4834
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *tkMessageBox* : affiche une boîte avec un message.  
Il existe par ailleurs des *widgets* qui peuvent contenir d'autres widgets et qui organisent le placement de ces derniers :

Chunk id: 1081
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
```python
>>> 3 / 4
0.75
>>> 2.5 / 2
1.25
```  
L'opérateur puissance utilise les symboles `**` :  
```python
>>> 2**3
8
>>> 2**4
16
```

Chunk id: 3978
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
Lignes 3-5. L'argument `data` fournit le contenu du *dataframe*, sous la forme
d'une liste de valeurs correspondantes à des lignes. Ainsi `np.arange(10, 14)`

Chunk id: 3738
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
aux valeurs propres et le second (d'indice 1) aux vecteurs propres. Une façon commode de récupérer ces éléments est d'utiliser cette fonction avec l'affectation multiple :

Chunk id: 3743
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
### 17.1.9 Parcours de matrice et affectation de lignes / colonnes

Chunk id: 4068
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
des identifiants uniques :  
```python
>>> df = pd.read_csv("transferrin_report.csv", index_col="PDB ID")
>>> df.head()
Source Deposit Date  Length       MW
PDB ID

Chunk id: 1304
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
pratiques en programmation Python*). Comme d'habitude, cette ligne attend un bloc d'instructions indenté définissant le corps de la classe. Voyons un exemple simple dans l'interpréteur :

Chunk id: 3648
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
array([   0,    1, -300,    3,    4])
```  
open-box-warn  
Par défaut la copie d'*arrays* se fait par référence comme pour tous les containers en Python (listes, *tuples*, dictionnaires, etc.).

Chunk id: 941
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
```python
>>> regex = re.compile("([0-9]+)\.([0-9]+)")
```  
Dans cet exemple, on recherche un nombre décimal, c'est-à-dire une chaîne de caractères :

Chunk id: 2767
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
La boucle `while` combinée à la fonction `input()` peut s'avérer commode lorsqu'on souhaite demander à l'utilisateur une valeur numérique. Par exemple :  
```python
>>> i = 0
>>> while i < 10:

Chunk id: 644
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
Nous confirmons ici le schéma de *Python Tutor*, c'est bien la même liste que l'on considère `l1` ou `t[0]` puisqu'on a le même identifiant. Maintenant, on modifie cette liste via la variable `l1` ou

Chunk id: 4856
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
d'un *label*), vous ne pouvez pas utiliser une variable Python ordinaire, il faudra utiliser une variable *Tkinter* dite de contrôle. Par exemple, si on souhaitait afficher les coordonnées de notre

Chunk id: 2484
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
- Comme avec les boucles `for` et `while`, la ligne qui contient l'instruction `if` se termine par le caractère deux-points « `:` ».

Chunk id: 2839
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
renvoie le cosinus de la variable `angle` exprimé en radian. Vous connaissez aussi des fonctions internes à Python comme `range()` ou `len()`. Pour l'instant, une fonction est à vos yeux une sorte de

Chunk id: 2159
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
## 18.3 Le format Markdown  
Dans le tout premier exemple (figure @fig:jupyter-exemple), nous avons vu qu'il était possible de mettre du texte au format Markdown dans une cellule.

Chunk id: 33
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
Une fonction récursive est une fonction qui s'appelle elle-même. Les fonctions récursives permettent d'obtenir une efficacité redoutable dans la résolution de certains algorithmes comme le [tri

Chunk id: 3757
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
```python
>>> c1, c2, c3 = a.T
>>> c1
array([1, 4, 7])
>>> c2
array([2, 5, 8])
>>> c3
array([3, 6, 9])
```

Chunk id: 2335
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
*NumPy* qui est un module complémentaire à Python, très utilisé en analyse de données et dont on parlera dans le chapitre 17 *Quelques modules d'intérêt en bioinformatique*.

Chunk id: 3012
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#985-sequence-complementaire
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.5 Séquence complémentaire
Content:
### 9.8.5 Séquence complémentaire  
Créez une fonction `seq_comp()` qui prend comme argument une liste de bases et qui renvoie la séquence complémentaire d'une séquence d'ADN sous forme de liste.

Chunk id: 415
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
la plupart des langages de programmation un entier. Au sein d'une même session Python, deux objets hachables qui ont un contenu identique auront strictement la même valeur de hachage.

Chunk id: 2467
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
>>>
```

Chunk id: 314
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
## 8.7 Module *os* : interaction avec le système d'exploitation  
Le module [*os*](https://docs.python.org/fr/3/library/os.html#module-os) gère l'interface avec le système d'exploitation.

Chunk id: 3261
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
mais pas un mélange des deux). Une indentation avec 4 espaces est le style d'indentation recommandé (voir le chapitre 15 *Bonnes pratiques en programmation Python*).

Chunk id: 1156
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1112-insert
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.2 `.insert()`
Content:
### 11.1.2 `.insert()`  
La méthode `.insert()` insère un objet dans une liste à un indice déterminé :  
```python
>>> a = [1, 2, 3]
>>> a.insert(2, -15)
>>> a
[1, 2, -15, 3]
```

Chunk id: 561
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
lorsqu'on essaie de modifier un élément d'un objet non modifiable.   Si vous voulez ajouter un élément (ou le modifier), vous devez créer un nouveau tuple :

Chunk id: 4384
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
>>> print(f"{10:<6d}") ; print(f"{1000:<6d}")
10
1000
>>> print(f"{10:^6d}") ; print(f"{1000:^6d}")
10
1000
>>> print(f"{10:*^6d}") ; print(f"{1000:*^6d}")
**10**
*1000*

Chunk id: 4261
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#requete-avec-un-mot-cle
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.1 Requête avec un mot-clé
Content:
#### 17.6.5.1 Requête avec un mot-clé  
Sur le site de [PubMed](https://www.ncbi.nlm.nih.gov/pubmed/),
cherchez combien d'articles scientifiques sont relatifs à la barstar.

Chunk id: 2861
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
en dehors des fonctions. En général, dans un script Python, on écrit d'abord les fonctions puis le programme principal. Nous aurons l'occasion de revenir sur cette notion de programme principal plus

Chunk id: 4909
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
instancier l'application et à lancer le gestionnaire d'événements (les choses seront ainsi mieux « partitionnées »). C'est donc la méthode que nous vous recommandons.

Chunk id: 890
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `A(CG|TT)C` est retrouvée dans `ACGC` ou `ATTC`.  
Enfin, il existe des caractères spéciaux qui sont bien commodes et qui peuvent être utilisés en tant que métacaractères :

Chunk id: 713
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
[('c', 15), ('g', 10), ('t', 11), ('a', 10)]
```  
Les *sets* permettent aussi l'évaluation d'union ou d'intersection mathématiques en conjonction avec les opérateurs respectivement `|` et `&` :

Chunk id: 2624
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
La recherche par [dichotomie](https://fr.wikipedia.org/wiki/Dichotomie) est une méthode qui consiste à diviser (en général en parties égales) un problème pour en trouver la solution. À titre

Chunk id: 3104
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
dans un intervalle. Lorsqu'elle est utilisée en combinaison avec la fonction `list()`, on obtient une liste d'entiers. Par exemple :

Chunk id: 1959
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
open-box-more

Chunk id: 2205
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
que vous vous y retrouviez, mais s'il fait plusieurs dizaines voire centaines de lignes, vous serez perdus.

Chunk id: 1492
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
if __name__ == "__main__":
citron1 = Citron()
citron1.affiche_attributs()
```  
Ce code va afficher la phrase :  
```text
attribut de classe: acide
attribut d'instance: jaune
```

Chunk id: 750
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1352-objects-de-mapping
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.2 Objects de *mapping*
Content:
| dictionnaire          | oui                                     | oui sur les clés | oui$^*$  | non       | oui        | non      |  
$^*$ à partir de Python 3.7 uniquement

Chunk id: 3440
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1085-distance-de-hamming
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.5 Distance de Hamming
Content:
### 10.8.5 Distance de Hamming

Chunk id: 3939
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
```  
On obtient alors le graphique de la figure @fig:distribution.  
![Distribution des bases.](img/distribution_bases.png "Distribution des bases"){ #fig:distribution width=70% }

Chunk id: 3431
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|    Arginine   |       Arg      |       R       |
|   Asparagine  |       Asn      |       N       |
|   Aspartate   |       Asp      |       D       |

Chunk id: 1360
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
Une méthode étant une fonction, elle peut bien sûr retourner une valeur :  
```python
class Citron:
def recup_saveur(self):
return "acide"

Chunk id: 4559
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
nous confirme cela (cf. figure @fig:fonction_callback_pythontutor).

Chunk id: 4789
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Ligne 36. De même, on peut « intercepter » un événement lié à l'appui sur une touche, ici la touche Esc.

Chunk id: 4732
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
if __name__ == "__main__":
app = AppliCanevas()
app.title("Mon Canevas Psychédélique !")
app.mainloop()
```

Chunk id: 609
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
l'expression *tuple unpacking* que l'on pourrait traduire par « désempaquetage de tuple ». Cela signifie que l'on décompose le *tuple* initial `1, 2, 3` en 3 variables différentes.

Chunk id: 3204
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Python 3.7.1 (default, Dec 14 2018, 19:28:38)
[GCC 7.3.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```  
Les blocs

Chunk id: 2285
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
On peut aussi utiliser les parenthèses pour évaluer un expression trop longue :  
```python
>>> ma_variable = 3
>>> if (ma_variable > 1 and ma_variable < 10

Chunk id: 452
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
open-box-rem

Chunk id: 1634
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
close-box-def

Chunk id: 3877
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
... ['Abstract']['AbstractText'][0]
'Transferrin is an abundant serum metal-binding protein best known
for its role in iron delivery. The human disease congenital atransf

Chunk id: 4517
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Il existe beaucoup de modules pour construire des applications graphiques. Par exemple : [*Tkinter*](https://wiki.python.org/moin/TkInter), [wxpython](http://www.wxpython.org/),

Chunk id: 988
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
Une enzyme de restriction est une protéine capable de couper une molécule d'ADN. Cette coupure se fait sur le site de restriction de l'ADN qui correspond à une séquence particulière de nucléotides

Chunk id: 2517
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
|     Vrai    |     ET    |     Vrai    |   Vrai   |
|     Vrai    |     ET    |     Faux    |   Faux   |
|     Faux    |     ET    |     Vrai    |   Faux   |

Chunk id: 1876
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
```python
if __name__ == "__main__":
#définition de citron1
citron1 = Citron()
print(citron1.get_couleur(), citron1.get_masse())
#on change les attributs de citron1 avec les setters

Chunk id: 4982
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
Quitter » au cas où on veuille quitter avant la fin. À la fin du rebours, le programme affichera 10 fois la phrase « C'est fini !!! » dans le *shell* et quittera automatiquement le script. Une image

Chunk id: 57
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
## 12.3 Portée des variables

Chunk id: 1426
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
On peut appeler cette référence comme on veut, toutefois nous vous conseillons vivement de l'appeler `self` car c'est une convention générale en Python. Ainsi, quelqu'un qui lira votre code

Chunk id: 1202
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
```python
>>> x = [1, 2, 3]
>>> y = x
>>> y
[1, 2, 3]
>>> x[1] = -15
>>> x
[1, -15, 3]
>>> y
[1, -15, 3]
```

Chunk id: 592
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
```python
>>> dico = {"pinson": 2, "merle": 3}
>>> for cle, valeur in dico.items():
...     print(cle, valeur)
...
pinson 2
merle 3
>>> for bidule in dico.items():
...     print(bidule, type(bidule))

Chunk id: 3952
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
- Enfin, des [*cheat sheets*](https://github.com/matplotlib/cheatsheets) de *matplotlib* sont aussi disponibles.  
close-box-more

Chunk id: 4612
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Lignes 6 et 7. Vous avez noté que lors de la création de ce *label* et de ce bouton, rien ne s'est passé dans la fenêtre. C'est normal, ces deux *widgets* existent bien, mais il faut maintenant les

Chunk id: 149
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1272-passage-de-liste-a-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.2 Passage de liste à une fonction
Content:
### 12.7.2 Passage de liste à une fonction

Chunk id: 107
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
open-box-adv  
Même si Python peut reconnaître une variable ayant le même nom que ses propres fonctions ou variables internes, évitez de les utiliser car ceci rendra votre code confus !

Chunk id: 2753
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
## 5.3 Boucles `while`

Chunk id: 77
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
## 12.4 Portée des listes  
open-box-warn

Chunk id: 2659
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
>>> for animal in animaux:
...     print(animal)
...
girafe
tigre
singe
souris
```  
Commentons en détails ce qu'il s'est passé dans cet exemple :

Chunk id: 238
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
Vous verrez dans le chapitre 14 *Création de module* comment créer votre propre module lorsque vous souhaitez réutiliser souvent vos propres fonctions.

Chunk id: 399
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
close-box-def  
Maintenant que l'identifiant est défini, regardons l'exemple suivant qui montre l'immutabilité des entiers.  
```python
>>> a = 4
>>> id(a)
140318876873440
>>> a = 5
>>> id(a)

Chunk id: 783
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
- les [compteurs](https://docs.python.org/fr/3/library/collections.html#collections.Counter) dont un exemple est montré ci-dessous ;

Chunk id: 725
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
que nous n'abordons pas ici mais qui peuvent être consultées sur la [documentation officielle de Python](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset).

Chunk id: 859
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
```  
Ici, `egrep` affiche toutes les lignes du fichier du virus de l'herpès (`herp_virus.gbk`) dans lesquelles la *regex* `^DEF` (c'est-à-dire le mot `DEF` en début de ligne) est retrouvée.

Chunk id: 2524
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
...         print("le test est vrai")
...
le test est vrai
```  
Vous pouvez aussi tester directement l'effet de ces opérateurs à l'aide de `True` et `False` (attention à respecter la casse).

Chunk id: 155
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
# 8 Modules  
## 8.1 Définition

Chunk id: 4502
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Les arguments passés à la ligne de commande sont tout à fait classiques dans le monde de la bioinformatique. Toutefois, il se peut que vous développiez un programme pour une communauté plus large,

Chunk id: 1064
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#23-nommage
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.3 Nommage
Content:
Enfin, Python est sensible à la casse, ce qui signifie que les variables `TesT`, `test` et `TEST` sont différentes.

Chunk id: 1185
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
rien. L'explication du mécanisme sous-jacent vous sera donnée dans la rubrique 12.4 *Portée des listes* du chapitre 12 *Plus sur les fonctions*.

Chunk id: 2765
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
Ici, nous avons omis de mettre à jour la variable `i` dans le corps de la boucle. Par conséquent, la boucle ne s'arrêtera jamais (sauf en pressant *Ctrl-C*) puisque la condition `i < 10` sera

Chunk id: 3864
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'LastAuthor', 'Title', 'Volume', 'Issue', 'Pages', 'LangList',
'NlmUniqueID', 'ISSN', 'ESSN', 'PubTypeList', 'RecordStatus', 'PubStatus',

Chunk id: 3411
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
Créez une fonction `lit_fasta()` qui prend comme argument le nom d'un fichier FASTA sous la forme d'une chaîne de caractères, lit la séquence dans le fichier FASTA et la renvoie sous la forme d'une

Chunk id: 91
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
Si vous voulez éviter les problèmes de modification malencontreuse d'une liste dans une fonction, utilisez des tuples (ils seront présentés dans le chapitre 13 *Dictionnaires et tuples*), Python

Chunk id: 4130
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Notez que les valeurs renvoyées sont d'abord les valeurs minimales pour `Length`
et `MW` puis les valeurs maximales pour `Length` et `MW`.

Chunk id: 1264
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1167-triangle-de-pascal-exercice
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.7 Triangle de Pascal (exercice +++)
Content:
### 11.6.7 Triangle de Pascal (exercice +++)  
Voici le début du triangle de Pascal :  
```text
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
[...]
```

Chunk id: 4030
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
>>> df2 = pd.DataFrame.from_dict(data2)
>>> df2.index = ["chat", "souris", "lapin"]
>>> df2
Nantes  Strasbourg
chat         3           5
souris       9          10
lapin       14           8
```

Chunk id: 1603
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
l'utilisation de variables globales qui, on l'a vu aux chapitres 9 et 12 sur les fonctions, sont à proscrire absolument. Tout cela concourt à rendre le code plus lisible.

Chunk id: 951
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1635-la-methode-findall
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.5 La méthode `.findall()`
Content:
### 16.3.5 La méthode `.findall()`  
Pour récupérer chaque zone, s'il y en a plusieurs, vous pouvez utiliser la méthode `.findall()` qui renvoie une liste des éléments en correspondance.  
```python

Chunk id: 1110
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
On verra au chapitre 7 *Fichiers* que ces conversions sont essentielles. En effet, lorsqu'on lit ou écrit des nombres dans un fichier, ils sont considérés comme du texte, donc des chaînes de

Chunk id: 1943
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
dès l'instanciation. C'est donc une pratique que nous vous recommandons. Si on avait utilisé `self._masse`, il n'y aurait pas eu d'appel à la fonction mutateur et on aurait pu mettre n'importe quoi,

Chunk id: 1391
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Étape 3 (voir figure @fig:classe_constructeur3). Un nouvel attribut est créé s’appelant `self.couleur`. La chaîne de caractères `couleur` est ainsi « accrochée » (grâce au caractère point) à

Chunk id: 1318
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
Lignes 1 et 2. L'objet possède de nombreuses méthodes ou attributs qui commencent et qui se terminent par deux caractères *underscores*. On se souvient que les *underscores* indiquent qu'il s'agit de

Chunk id: 388
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
Qu'en est-il des objets que nous connaissons ? Les listes sont modifiables, on peut modifier un ou plusieurs de ses éléments. Tous les autres types que nous avons vus précédemment sont quant à eux

Chunk id: 1294
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Après la lecture de ce chapitre, vous verrez d'un autre œil de nombreux exemples évoqués dans les chapitres précédents, et vous comprendrez sans doute de nombreuses subtilités qui avaient pu vous

Chunk id: 1143
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2112-predire-le-resultat-operations
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.2 Prédire le résultat : opérations
Content:
- `(1+2)**3`
- `"Da" * 4`
- `"Da" + 3`
- `("Pa"+"La") * 2`
- `("Da"*4) / 2`
- `5 / 2`
- `5 // 2`
- `5 % 2`

Chunk id: 540
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
une forme particulière : un objet séquentiel contenant d'autres objets séquentiels de 2 éléments. Par exemple, une liste de listes de 2 éléments :

Chunk id: 1659
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Nous avons donc redéfini comment la fonction `print()` se comportait avec une instance de la classe `CitronCool`. Notez que `str(citron2)` donnerait le même message que `print(citron2)`.

Chunk id: 3617
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
de faire des calculs de base comme `.mean()` pour la moyenne, `.sum()` pour la somme, `.std()` pour l'écart-type, `.max()` pour extraire le maximum, `.min()` pour extraire le minimum, etc. La liste

Chunk id: 3403
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
split(...)
S.split([sep [,maxsplit]]) -> list of strings

Chunk id: 4398
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
### 3.2.4 Autres détails sur les *f-strings*  
Si on veut afficher des accolades littérales avec les *f-strings*, il faut les doubler pour échapper au formatage :  
```python

Chunk id: 4933
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
{'!button': <tkinter.Button object .!button>}
>>> bouton["command"] = racine.destroy
```  
Ligne 1. On « récupère » l'instance de la fenêtre principale dans la variable racine.

Chunk id: 4650
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
class Application(tk.Tk):
def __init__(self):
tk.Tk.__init__(self)
self.creer_widgets()

Chunk id: 4021
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
```python
>>> df[ df["Pau"]>15 ]["Lyon"]
singe     21
souris    31
Name: Lyon, dtype: int64
```  
On peut aussi combiner plusieurs conditions avec `&` pour l'opérateur **et** :  
```python

Chunk id: 3748
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
est lié au fait que l'utilisation d'un indiçage unique `a[i]` pour un *array* 2D correspond à sa ligne d'indice `i` (cf. rubrique *Indices* ci-dessus).

Chunk id: 3140
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4102-saisons
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.2 Saisons
Content:
1. `saisons[2]`
2. `saisons[1][0]`
3. `saisons[1:2]`
4. `saisons[:][1]`. Comment expliquez-vous ce dernier résultat ?

Chunk id: 987
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
### 16.4.2 Enzyme de restriction

Chunk id: 2601
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
[-124.9, 156.7] n'est pas en hélice
[-66.2, -30.8] est en hélice
```  
D'après vous, quelle est la structure secondaire majoritaire de ces 15 acides aminés ?  
open-box-rem

Chunk id: 3148
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
Ce langage de programmation présente de nombreuses caractéristiques intéressantes :

Chunk id: 638
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
de liste (par exemple `liste1 = liste2`), ceci est attendu car par défaut Python crée une copie par référence (cf. Chapitre 11 *Plus sur les listes*). Donc, qu'on raisonne en tant que premier élément

Chunk id: 1344
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
```text
jaune
jaune
```  
open-box-warn  
Même si on peut retrouver un attribut de classe avec une syntaxe `instance.attribut`, un tel attribut ne peut pas être modifié avec une syntaxe

Chunk id: 3686
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
4.000000000000000000e+00 5.000000000000000000e+00 6.000000000000000000e+00
7.000000000000000000e+00 8.000000000000000000e+00 9.000000000000000000e+00
```

Chunk id: 4293
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1766-analyse-dun-jeu-de-donnees-avec-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Content:
Par exemple :  
| name | sex | size | age |
| ---- | --- | ---- | --- |
| simon | male | 175 | 33 |
| clara | female | 167 | 45|
| serge | male |181 | 44 |
| claire | female | 174 | 31 |

Chunk id: 1665
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
- `.__getitem__()` : redéfinit le comportement pour récupérer un élément ;
- `.__getslice__()` : redéfinit le comportement avec les tranches.

Chunk id: 3752
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
On se souvient de l'affectation multiple `x, y = 1, 2` qui permettait d'affecter des valeurs à plusieurs variables à la fois. Et bien, il est possible d'utiliser cette fonctionnalité aussi avec les

Chunk id: 3370
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
```  
On souhaite extraire les valeurs `3.4` et `17.2` pour ensuite les additionner.  
Dans un premier temps, on découpe la chaîne de caractères avec la méthode `.split()` :  
```python

Chunk id: 3097
Number of Tokens: 117
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> animaux[0:3:2]
['girafe', 'singe']
>>> x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x[::1]

Chunk id: 3291
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
que ceux-ci ne soient pas confondus avec les guillemets de déclaration de la chaîne de caractères, vous pouvez utiliser `\'` ou `\"`.

Chunk id: 3976
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
L'argument `columns` indique le nom des colonnes, sous forme d'une liste.  
Ligne 2. L'argument `index` définit le nom des lignes, sous forme de liste.

Chunk id: 303
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
if len(sys.argv) != 2:
sys.exit("ERREUR : il faut exactement un argument.")

nom_fichier = sys.argv[1]
taille = 0
with open(nom_fichier, "r") as f_in:
taille = len(f_in.readlines())

Chunk id: 986
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
- Vous trouverez des explications sur le format GenBank et des exemples de code dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 4629
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
évoqué ci-dessus. C'est lui qui interceptera la moindre action de l'utilisateur, et qui lancera les portions de code associées à chacune de ses actions. Bien sûr, comme nous développerons dans ce qui

Chunk id: 1604
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
Dans le chapitre 20 *Fenêtres graphiques et Tkinter*, vous verrez une démonstration de l'utilité de tout encapsuler dans une classe afin d'éviter les variables globales.

Chunk id: 4082
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Data columns (total 4 columns):
#Column        Non-Null Count  Dtype
---  ------        --------------  -----
0   Source        41 non-null     object
1   Deposit Date  41 non-null     object

Chunk id: 2960
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 7.](img/fct_step7.png){ #fig:fct_step7 width=80% }
\

Chunk id: 1281
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
pour les *float* et *string*. Mais également pour les *list*, *tuple*, *dict*, etc. Voilà pourquoi nous avons rencontré de nombreuses notations et mots de vocabulaire associés à la POO depuis le

Chunk id: 2780
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#543-nombres-de-1-a-10-sur-une-ligne
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.3 Nombres de 1 à 10 sur une ligne
Content:
Avec une boucle, affichez les nombres de 1 à 10 sur une seule ligne.  
*Conseil* : n'hésitez pas à relire le début du chapitre 3 *Affichage* qui discute de la fonction `print()`.

Chunk id: 2679
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
non indentée par rapport au `for`). Notez également que chaque instruction du corps de la boucle doit être indentée de la même manière (ici 4 espaces).

Chunk id: 743
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1351-objets-sequentiels
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.1 Objets séquentiels
Content:
|:----------------------|:---------------------------------------:|:--------:|:-------:|:---------:|:----------:|:--------:|

Chunk id: 4913
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
#programme principal
if __name__ == "__main__":
[...]
app = MonApplication()
[...]
```

Chunk id: 3061
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#42-utilisation
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.2 Utilisation
Content:
## 4.2 Utilisation  
Un des gros avantages d'une liste est que vous pouvez appeler ses éléments par leur position. Ce numéro est appelé **indice** (ou *index*) de la liste.  
```text

Chunk id: 2984
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
...
>>> temp_in_fahrenheit = 60
>>> convert_fahrenheit_to_celsius(temp_in_fahrenheit)
15.555555555555557
>>> temp_in_fahrenheit = 80
>>> convert_fahrenheit_to_celsius(temp_in_fahrenheit)

Chunk id: 4598
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
l'utilisation des arguments par mot-clé dans un ordre quelconque. Comme nous l'avons vu dans le chapitre 9 *Fonctions*, souvenez vous que leur utilisation dans le désordre implique qu'il faudra

Chunk id: 1556
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
### 19.2.2 Gestion des noms dans les modules  
Les modules représentent aussi un espace de noms en soi. Afin d'illustrer cela, jetons un coup d’œil à ce programme `test_var_module.py` :  
```python

Chunk id: 1738
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
...     pass
```  
Puis ensuite regarder l'aide sur l'une de ses instances :  
```python
Help on class Citron in module __main__:

Chunk id: 990
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
Pour chacune des enzymes ci-dessous, déterminez les expressions régulières qui décrivent leurs sites de restriction. Le symbole N correspond aux bases A, T, C ou G. W correspond à A ou T . Y

Chunk id: 2029
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
close-box-adv

Chunk id: 3010
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#984-nombres-premiers
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.4 Nombres premiers
Content:
à 2) et qui renvoie le booléen `True` si *n* est premier et `False` si *n* n'est pas premier. Déterminez tous les nombres premiers de 2 à 100. On souhaite avoir une sortie similaire à celle-ci :

Chunk id: 1455
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Testez les deux pour voir ! Dans cette dernière instruction, on appelle la méthode accrochée à la classe `Citron` et on lui passe explicitement l'instance `citron1` en tant qu'argument. La notation

Chunk id: 512
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1327-tri-par-cles
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.7 Tri par clés
Content:
### 13.2.7 Tri par clés  
On peut utiliser la fonction `sorted()` vue précédemment avec les listes pour trier un dictionnaire par ses clés :  
```python

Chunk id: 873
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`[^AB]`  
:   N'importe quel caractère sauf A et B.  
Exemple : la *regex* `CG[^AB]T` est retrouvée dans `CG9T`, `CGCT`... mais pas dans `CGAT` ni dans `CGBT`.  
`\`

Chunk id: 940
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
L'intérêt de l'objet de type `SRE_Match` renvoyé par Python lorsqu'une *regex* trouve une correspondance dans une chaîne de caractères est de pouvoir ensuite récupérer certaines zones précises :

Chunk id: 3915
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
```python
import numpy as np
import matplotlib.pyplot as plt

Chunk id: 513
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1327-tri-par-cles
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.7 Tri par clés
Content:
```python
>>> ani2 = {'nom': 'singe', 'taille': 1.75, 'poids': 70}
>>> sorted(ani2)
['nom', 'poids', 'taille']
```  
Les clés sont triées ici par ordre alphabétique.

Chunk id: 2233
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
### 15.1.2 Importation des modules  
Comme on l'a vu au chapitre 8 *Modules*, le chargement d'un module se fait avec l'instruction `import module` plutôt qu'avec `from module import *`.

Chunk id: 481
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1323-iteration-sur-les-cles-pour-obtenir-les-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.3 Itération sur les clés pour obtenir les valeurs
Content:
### 13.2.3 Itération sur les clés pour obtenir les valeurs  
Si on souhaite voir toutes les associations clés / valeurs, on peut itérer sur un dictionnaire de la manière suivante :  
```python

Chunk id: 1119
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
Toutefois, Python est un langage dit « orienté objet », il se peut que dans la suite du cours nous employions le mot **objet** pour désigner une variable. Par exemple, « une variable de type entier »

Chunk id: 1038
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
à l'écran lors de l'exécution (pour autant, cette instruction reste valide et ne générera pas d'erreur).

Chunk id: 393
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
open-box-def

Chunk id: 787
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
>>> compo_seq
Counter({'a': 7, 't': 7, 'c': 7, 'g': 5})
>>> type(compo_seq)
<class 'collections.Counter'>
>>> compo_seq["a"]
7
>>> compo_seq["n"]
0
```

Chunk id: 4433
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
à l'opérateur `%`. Vous la croiserez sans doute très fréquemment dans des programmes et ouvrages récents. Heureusement elle a un fonctionnement relativement proche des *f-strings*, donc vous ne serez

Chunk id: 991
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
sites de restriction. Le symbole N correspond aux bases A, T, C ou G. W correspond à A ou T . Y correspond à C ou T. R correspond à A ou G.

Chunk id: 2617
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-2-plus-optimale-et-plus-rapide-mais-un-peu-plus-compliquee
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)
Content:
#### 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)

Chunk id: 2933
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
## 9.6 Variables locales et variables globales

Chunk id: 1036
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
chasser (*debugger*) les erreurs dans un programme. Par contre, la ligne d'un script Python qui contient seulement le nom d'une variable (sans aucune autre indication) n'affichera pas la valeur de la

Chunk id: 4875
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
la fenêtre principale. Nous ne développerons pas plus ces méthodes, mais voici de la documentation supplémentaire en accès libre :

Chunk id: 1686
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
```python
class Mere1:
#contenu de la classe mère 1

Chunk id: 2086
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
des mots séparés par des espaces qui correspondront aux attributs (on pourrait aussi passer une liste `["masse", "couleur", "saveur", "forme"]`).

Chunk id: 1393
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
en cours référencée par le `self`. *Python Tutor* nous montre cela par une flèche qui pointe depuis le `self` vers la variable `couleur` (qui se trouve elle-même dans l'espace nommé `Citron

Chunk id: 40
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
#prog principal
print(calc_factorielle(4))
```

Chunk id: 2593
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
parfaites dans une protéine, et il est habituel de tolérer une déviation de $\pm$ 30 degrés autour des valeurs idéales de ces angles.

Chunk id: 4696
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
racine = tk.Tk()
canv = tk.Canvas(racine, bg="white", height=200, width=200)
canv.pack()
canv.create_oval(0, 0, 200, 200, outline="red", width=10)

Chunk id: 4614
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
à l'intérieur de la fenêtre. On appelle pour ça la méthode `.pack()`, avec une notation objet `widget.pack()` : à ce moment précis, vous verrez votre label apparaître ainsi que la fenêtre qui se

Chunk id: 668
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
Mettre une ou des liste(s) dans un tuple a cette autre conséquence néfaste de le rendre non hachable. Ceci le rend inutilisable comme clé de dictionnaire ou, on le verra ci-après, comme élément d'un

Chunk id: 2133
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Le notebook fraîchement créé ne contient qu'une cellule vide.  
![Nouveau notebook.](img/jupyter-nouveau-notebook-vide.png "Nouveau notebook"){ #fig:jupyter-nouveau-notebook-vide width=80% }

Chunk id: 3881
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
s and mice deficient in transferrin exhibit anemia and a paradoxica
l iron overload attributed to deficiency in hepcidin, a peptide hor

Chunk id: 3780
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
La grande puissance de ce mécanisme est que l'on peut utiliser les masques booléens pour modifier les éléments que l'on sélectionne :  
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])

Chunk id: 451
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
mettre autant de clés que vous voulez dans un dictionnaire (tout comme vous pouvez ajouter autant d'éléments que vous voulez dans une liste).

Chunk id: 4238
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
L'image de gauche de la figure @fig:exo_get_leaflet montre le cliché d'une membrane de POPC (cyan) entourée d'eau (bleu) (coordonnées trouvées [ici](https://zenodo.org/record/153944)). Les atomes de

Chunk id: 1879
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
citron1.masse = -15
print(citron1.get_couleur(), citron1.get_masse())
```  
Cela donnera la sortie suivante :  
```text
jaune 0
jaune foncé 100
pourpre profond -15
```

Chunk id: 4697
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
canv.pack()
canv.create_oval(0, 0, 200, 200, outline="red", width=10)
canv.create_line(0, 0, 200, 200, fill="black", width=10)
canv.create_line(0, 200, 200, 0, fill="black", width=10)

Chunk id: 2932
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```  
Nous verrons, dans le chapitre 20 *Fenêtres graphiques et Tkinter*, que l'utilisation d'arguments par mot-clé est systématique lorsqu'on crée un objet graphique (une fenêtre, un bouton, etc.).

Chunk id: 2824
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
### 5.4.14 Suite de Fibonacci (exercice +++)

Chunk id: 3070
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
```  
L'opérateur `+` est très pratique pour concaténer deux listes.  
Vous pouvez aussi utiliser la méthode `.append()` lorsque vous souhaitez ajouter un seul élément à la fin d'une liste.

Chunk id: 3515
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
Lorsque la ligne contient le mot `complement` le gène est situé sur le brin complémentaire, sinon il est situé sur le brin direct. Votre code devra récupérer le premier et le second nombre indiquant

Chunk id: 967
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
correspondants dans la chaîne de caractères substituée. On notera que la syntaxe générale pour récupérer des groupes dans les outils qui gèrent les *regex* est `\1`, `\2`, etc. Toutefois, Python nous

Chunk id: 4728
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
def rd_col(self):
return rd.choice(("black", "red", "green", "blue", "yellow", "magenta",
"cyan", "white", "purple"))

Chunk id: 851
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
## 16.1 Définition et syntaxe

Chunk id: 4686
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
rend quasi-obligatoire l'utilisation de variables globales, ce qui on l'a vu, est à proscrire définitivement ! Dans la suite du chapitre, nous verrons quelques exemples qui illustrent cela (cf. la

Chunk id: 616
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
Quand une fonction renvoie plusieurs valeurs mais que l'on ne souhaite pas les utiliser toutes dans la suite du code, on peut utiliser le nom de variable `_` (caractère *underscore*) pour indiquer

Chunk id: 4783
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
méthode prend en argument le type d'événement à capturer en tant que chaîne de caractères avec un format spécial : par exemple `"<Button-1>"` correspond à un clic gauche de la souris (de même

Chunk id: 4331
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
*floats*. L'écriture formatée est incontournable lorsqu'on veut créer des fichiers organisés en « belles colonnes » comme par exemple les fichiers PDB (pour en savoir plus sur ce format,

Chunk id: 3919
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
x = np.linspace(min(temps), max(temps), 50)
y = 2 + 3 * x
plt.plot(x, y, color='green', ls="--")
plt.grid()
plt.savefig("concentration_vs_temps.png", bbox_inches='tight', dpi=200)
```

Chunk id: 3943
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Ligne 10. On définit la position en abscisse des barres. Dans cet exemple, la variable `x` vaut `array([0, 1, 2, 3])`.

Chunk id: 1829
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
```  
Cet exemple illuste la puissance de l'héritage et du polymorphisme et la facilité avec laquelle on les utilise en Python. Pour chaque fruit, on utilise la méthode

Chunk id: 4272
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
#### 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar

Chunk id: 805
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
d'une chaîne de caractères, lit la séquence dans le fichier FASTA et la renvoie sous la forme d'une chaîne de caractères. N'hésitez pas à vous inspirer d'un exercice similaire du chapitre 10 *Plus

Chunk id: 4537
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
avec chaque *widget* de la GUI. Ainsi, l'exécution du programme sera réellement guidée par les actions de l'utilisateur.

Chunk id: 2746
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
des caractères spéciaux (comme `#` ou `~`) entre eux. Enfin, on peut comparer des chaînes de caractères de plusieurs caractères :

Chunk id: 164
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
>>> import random
>>> random.randint(0, 10)
4
```  
Regardons de plus près cet exemple :

Chunk id: 3287
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
dans le chapitre 2 *Variables*) peuvent vous aider. Vous pouvez également générer une liste, qui elle est modifiable, puis revenir à une chaîne de caractères (voir plus bas).

Chunk id: 2149
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
une cellule antérieure sera disponible dans les cellules suivantes. Par exemple, dans la figure @fig:jupyter-cellule-4, nous avons quatre cellules. Vous remarquerez que pour les cellules 3 et 4, le

Chunk id: 3750
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
```python
>>> for col in a.T:
...     print(col, type(col))
...
[1 4 7] <class 'numpy.ndarray'>
[2 5 8] <class 'numpy.ndarray'>
[3 6 9] <class 'numpy.ndarray'>
```

Chunk id: 2616
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-1-peu-optimale-mais-assez-intuitive
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.1 Méthode 1 (peu optimale mais assez intuitive)
Content:
lesquels le reste de la division entière est égal à 0 (1 et lui-même). Si ce n'est pas un nombre premier, il aura plus de deux nombres pour lesquels le reste de la division entière est égal à 0.

Chunk id: 2541
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
'0.299999999999999988897769753748434595763683319091796875000000'
>>> f"{3 - 2.7:.60f}"
'0.299999999999999822364316059974953532218933105468750000000000'
```

Chunk id: 4984
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
![Compte à rebours.](img/tk_compte_a_rebours.png){ #fig:tk_compte_a_rebours width=50% }

Chunk id: 170
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
En résumé, l'utilisation de la syntaxe `import module` permet d'importer tout une série de fonctions organisées par « thèmes ». Par exemple, les fonctions gérant les nombres aléatoires avec *random*

Chunk id: 667
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
open-box-adv

Chunk id: 1930
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
0x7fd3615aeef8>`). Qu'est-ce que cela signifie ? Et bien la prochaine fois qu'on voudra accéder au contenu de cet attribut `.masse`, Python appellera la méthode `.get_masse()`, et quand on voudra le

Chunk id: 3576
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
montre la figure @fig:array2Dlignescolonnes. Les indices indiqués dans cette figure seront définis un peu plus loin dans la rubrique *Indices*.

Chunk id: 4804
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
time.sleep(0.05) #attendre 50 ms
```  
Le temps de 50 ms donne 20 images (ou clichés) par seconde. Si vous diminuez ce temps, vous aurez plus d'images par secondes et donc un « film » plus fluide.

Chunk id: 1742
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
avoir une liste de toutes ces fonctions internes en un coup d'œil. Regardons cela avec les deux instructions `import builtins` puis `dir(builtins)` :

Chunk id: 4054
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
```  
Le contenu est chargé sous la forme d'un *dataframe* dans la variable `df`.  
Le fichier contient 41 lignes de données plus une ligne d'en-tête. Cette dernière

Chunk id: 269
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Ainsi, à chaque fois qu'on relance Python, la graine sera différente car ce nombre de secondes sera différent.

Chunk id: 4059
Number of Tokens: 91
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
2   1AIV       Gallus gallus   1997-04-28     686  75929.0
3   1AOV  Anas platyrhynchos   1996-12-11     686  75731.8
4   1B3E        Homo sapiens   1998-12-09     330  36505.5
```

Chunk id: 2414
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Description détaillée ligne 1
Description détaillée ligne 2
Description détaillée ligne 3
"""

def __init__(self):
"""Résumé de la docstring décrivant le constructeur.

Chunk id: 3885
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
ease and model organisms indicate that transferrin is an essential
regulator of hepcidin expression. In this paper, we review current

Chunk id: 3933
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
### 17.3.3 Représentation sous forme de diagramme en bâtons  
On souhaite maintenant représenter graphiquement la distribution des différentes bases dans une séquence d'ADN.  
```python

Chunk id: 1236
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1154-formatage-fasta-dune-sequence-avec-la-ligne-de-commentaire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.4 Formatage FASTA d'une séquence (avec la ligne de commentaire)
Content:
>>> print(">"+com+"\n"+"\n".join(seq_split))
>séquence de 150 alanines
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Chunk id: 2752
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
de la chaîne de caractères sont ignorés dans la comparaison), comme dans l'exemple `"abb" < "ada"` ci-dessus.

Chunk id: 4037
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
souris   NaN     9.0    NaN        10.0
lapin    NaN    14.0    NaN         8.0
```

Chunk id: 696
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
```  
Par contre, les *sets* sont itérables :  
```python
>>> for element in s:
...     print(element)
...
1
2
4
```  
Les *sets* ne peuvent être modifiés que par des méthodes spécifiques.

Chunk id: 4945
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
Toutefois, nous ne développons pas leur utilisation avec *Tkinter* et les fonctions *callback* car cela dépasse le cadre de cet ouvrage. Pour de plus amples explications sur cette question, vous

Chunk id: 4091
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
### 17.5.2 Conversion en date  
Le type `object` correspond la plupart du temps à des chaînes de caractères.
C'est tout à fait légitime pour la colonne `Source`. Mais on sait par contre

Chunk id: 4533
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
l'utilisateur qui décide quand et où il clique dans l'interface, il va falloir mettre en place ce qu'on appelle un « gestionnaire d'événements ».

Chunk id: 196
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Enfin, pour vider de la mémoire un module déjà chargé, on peut utiliser l'instruction `del` :  
```python
>>> import random
>>> random.randint(0,10)
2
>>> del random
>>> random.randint(0,10)

Chunk id: 4995
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
### 20.8.5 Polygone de Sierpinski (exercice +++)

Chunk id: 3041
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
Cette fonction renverra une liste de *floats* représentant la distance entre chaque point de la fonction et l'origine (de coordonnées $(0,0)$).

Chunk id: 2865
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
Notez que la syntaxe de `def` utilise les deux-points comme les boucles `for` et `while` ainsi que les tests `if`, un bloc d’instructions est donc attendu. De même que pour les boucles et les tests,

Chunk id: 2846
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
Autre exemple, si vous appelez la méthode `ma_liste.append()` (n'oubliez pas, une **méthode** est une **fonction** qui agit sur l'objet auquel elle est attachée par un point) :  
```python

Chunk id: 4526
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
avec votre programme Python de manière conviviale. Par exemple, dans la fenêtre sur la figure @fig:exemple_GUI, les boutons, les listes de choix, ou encore la zone de texte sont des *widgets*.

Chunk id: 1175
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
- De nombreuses méthodes mentionnées précédemment (`.append()`, `.sort()`, etc.) modifient la liste mais ne renvoient rien, c'est-à-dire qu'elles ne renvoient pas d'objet récupérable dans une

Chunk id: 298
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
print(f"Argument vaut : {sys.argv[1]}")
```  
Puis on l'exécute sans argument :
```text
$ python test.py
ERREUR : il faut exactement un argument.
```
et avec un argument :
```text

Chunk id: 2278
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
particulièrement utile pour préciser les arguments d'une fonction ou d'une méthode, lors de sa création ou lors de son utilisation :

Chunk id: 869
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`[ABC]`  
:   Le caractère A ou B ou C (un seul caractère).  
Exemple : la *regex* `T[ABC]G` est retrouvée dans `TAG`, `TBG` ou `TCG`, mais pas dans `TG`.  
`[A-Z]`

Chunk id: 82
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
```python
>>> def ma_fonction(x):
...     x[1] = -15
...
>>> y = [1,2,3]
>>> ma_fonction(y)
>>> y
[1, -15, 3]
```

Chunk id: 1314
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
### 19.1.2 Ajout d'un attribut d'instance

Chunk id: 282
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Le module [*sys*](https://docs.python.org/fr/3/library/sys.html#module-sys) contient des fonctions et des variables spécifiques à l'interpréteur Python lui-même. Ce module est particulièrement

Chunk id: 4472
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
*RealPython*: sur l'[écriture formatée](https://realpython.com/python-string-formatting) et sur les [*f-strings*](https://realpython.com/python-f-strings/)

Chunk id: 1534
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
un espace de noms est défini comme suit : « *a namespace is a mapping from names to objects* ». Un espace de noms, c'est finalement une correspondance entre des noms et des objets. Un espace de noms

Chunk id: 3384
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
Attention, la méthode `.join()` ne s'applique qu'à une liste de chaînes de caractères.  
```python
>>> maliste = ["A", 5, "G"]
>>> " ".join(maliste)
Traceback (most recent call last):

Chunk id: 3181
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
À toute fin utile, on rappelle que les logiciels *Microsoft Word*, *WordPad* et *LibreOffice Writer* ne sont pas des éditeurs de texte, ce sont des traitements de texte qui ne peuvent pas et ne

Chunk id: 4060
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
4   1B3E        Homo sapiens   1998-12-09     330  36505.5
```  
Nous avons 5 colonnes de données :  
- l'identifiant de la structure (`PDB ID`) ;

Chunk id: 3235
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
plus complexe. Comme tout langage informatique, on peut enregistrer ces instructions dans un fichier, que l'on appelle communément un script (ou programme) Python.

Chunk id: 4626
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Ligne 6. Le bouton a été créé en ligne 5, mais on voit qu'il est possible de préciser une option de rendu du widget après cette création (ici on met le texte en rouge avec l'option `"fg"`). La

Chunk id: 4
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
Dans ce chapitre, nous allons aller un peu plus loin sur la visibilité de ces variables dans et hors des fonctions, et aussi voir ce qui se passe lorsque ces variables sont des listes. Attention, la

Chunk id: 1691
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
```python
class Mere:
def bonjour(self):
return "Vous avez le bonjour de la classe mère !"

Chunk id: 1489
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Au sein des méthodes, on accède également de la même manière aux attributs de classe ou d'instance, avec une syntaxe `self.attribut` :  
```python
class Citron:
saveur = "acide" #attribut de classe

Chunk id: 224
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
etrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate',
'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 's

Chunk id: 760
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1354-types-de-base
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.4 Types de base
Content:
| booléen         |  non                                   | non      | non     | non       | non        | oui      |

Chunk id: 4710
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
(*i.e.* la coordonnée $(0,0)$) est en haut à gauche. Les $x$ vont de gauche à droite, et les $y$ vont de haut en bas.

Chunk id: 1607
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
conseillons vivement de lire attentivement la rubrique *Différence entre les attributs de classe et d'instance*. La chose importante à retenir sur cette question est la suivante : si un attribut de

Chunk id: 2898
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
```python
>>> z1, z2 = carre_cube2(3)
>>> z1
9
>>> z2
27
```  
Cela permet de récupérer plusieurs valeurs renvoyées par une fonction et de les affecter à la volée à des variables différentes.

Chunk id: 2817
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
Avec une boucle `while`, simuler le mouvement de cette puce de l'emplacement initial 0 à l'emplacement final 5 (voir le schéma de la figure @fig:saut-de-puce). Combien de sauts sont nécessaires pour

Chunk id: 2362
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
import os

def Multiplie_nombres(nombre1,nombre2 ):
"""Multiplication de deux nombres entiers
Cette fonction ne sert pas à grand chose.

Chunk id: 4317
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```python
>>> print("Hello") ; print("Joe")
Hello
Joe
>>> print("Hello", end="") ; print("Joe")
HelloJoe
>>> print("Hello", end=" ") ; print("Joe")
Hello Joe
```

Chunk id: 2510
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
## 6.4 Tests multiples

Chunk id: 895
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Les espaces blancs les plus classiques sont l'espace ` `, la tabulation `\t`, le retour à la ligne `\n`, mais il en existe d'autres comme `\r` et `\f` que nous ne développerons pas ici. `\s` est très

Chunk id: 4919
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
Ainsi certains auteurs laissent toujours ces `*args` et `**kwargs` au cas où on en ait besoin dans le futur. Cela est bien utile lorsqu'on distribue notre classe à la communauté et que l'on souhaite

Chunk id: 2246
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
Les constantes sont écrites en majuscules :  
```python
MA_CONSTANTE
VITESSE_LUMIERE
```  
Les noms de classes (chapitre 19) et les exceptions (chapitre 21) sont de la forme :  
```python
MaClasse

Chunk id: 4870
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
les uns contre les autres et redimensionne la fenêtre automatiquement. Avec l'option `side=` et les variables `tk.BOTTOM`, `tk.LEFT`, `tk.TOP` et `tk.RIGHT` on place facilement les *widgets* les uns

Chunk id: 3562
Number of Tokens: 117
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> v = np.arange(4)
>>> v
array([0, 1, 2, 3])
>>> v + 1
array([1, 2, 3, 4])
>>> v + 0.1
array([ 0.1,  1.1,  2.1,  3.1])
>>> v * 2
array([0, 2, 4, 6])
>>> v * v
array([0, 1, 4, 9])
```

Chunk id: 4092
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
C'est tout à fait légitime pour la colonne `Source`. Mais on sait par contre
que la colonne `Deposit Date` est une date sous la forme
*année-mois-jour*.

Chunk id: 4816
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
`.boom()`, ces deux méthodes prennent un argument après le `self` (`lclick` ou `rclick`) récupérant ainsi des informations sur l'événement de l'utilisateur. Même si on ne s'en sert pas, cet argument

Chunk id: 2623
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
### 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)

Chunk id: 1077
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
```python
>>> x = 45
>>> x + 2
47
>>> x - 2
43
>>> x * 3
135
>>> y = 2.5
>>> x - y
42.5
>>> (x * 10) + y
452.5
```

Chunk id: 585
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
Pratiquement, nous avons déjà croisé les tuples avec la fonction `enumerate()` dans le chapitre 5 *Boucles et comparaisons*. Cette dernière permettait d'itérer **en même temps** sur les indices et

Chunk id: 707
Number of Tokens: 83
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> import random
>>> liste = [random.randint(0, 9) for i in range(10)]
>>> liste
[7, 9, 6, 6, 7, 3, 8, 5, 6, 7]
>>> set(liste)
{3, 5, 6, 7, 8, 9}
```

Chunk id: 4234
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
[`np.loadtxt()`](https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html) et son argument `usecols` vous seront utiles.

Chunk id: 3198
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
`python`  
La commande précédente va lancer l'**interpréteur Python**. Vous devriez obtenir quelque chose de ce style pour Windows :  
```text
PS C:\Users\pierre> python

Chunk id: 1964
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
le [site programiz](https://www.programiz.com/python-programming/property) ou le livre de [Vincent Legoff](https://openclassrooms.com/fr/courses/235344-apprenez-a-programmer-en-python).

Chunk id: 4309
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
on ne veut pas afficher ce retour à la ligne, on peut utiliser l'argument par « mot-clé » `end` :

Chunk id: 4314
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
Ligne 4. L'effet de l'argument `end=""` est que les trois chevrons `>>>` se retrouvent collés après la chaîne de caractères `"Hello world!"`.

Chunk id: 4187
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
1998-12-31    3
1999-12-31    3
2002-12-31    3
Name: Deposit Date, dtype: int64
```  
En 2001, cinq structures de transferrine ont été déposées dans la PDB. La deuxième

Chunk id: 3739
Number of Tokens: 89
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
```python
>>> eigvals, eigvecs = np.linalg.eig(a)
>>> eigvals
array([1., 2., 3.])
>>> eigvecs
array([[1., 0., 0.],
[0., 1., 0.],
[0., 0., 1.]])
>>> eigvecs[0]
array([1., 0., 0.])
>>> eigvecs[1]

Chunk id: 4365
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Le résultat obtenu présente trop de décimales (seize dans le cas présent). Pour écrire le résultat plus lisiblement, vous pouvez spécifier dans les accolades `{}` le format qui vous intéresse. Dans

Chunk id: 2851
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
quelque chose. L'algorithme utilisé au sein de la fonction n'intéresse pas directement l'utilisateur. Par exemple, il est inutile de savoir comment la fonction `math.cos()` calcule un cosinus. On a

Chunk id: 4475
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#35-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.5 Note sur le vocabulaire et la syntaxe
Content:
Revenons quelques instants sur la notion de **méthode** abordée dans ce chapitre avec `.format()`. En Python, on peut considérer chaque variable comme un objet sur lequel on peut appliquer des

Chunk id: 1042
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
Enfin, dans l'instruction `x = y - 3`, l'opération `y - 3` est d'abord évaluée et ensuite le résultat de cette opération est affecté à la variable `x`.

Chunk id: 1436
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
dans le constructeur. Vous voyez ici l'intérêt principal de l'argument `self` passé en premier à chaque méthode d'une classe : il « accroche » n'importe quel attribut qui sera visible partout dans la

Chunk id: 2248
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
```  
open-box-rem  
Le style recommandé pour nommer les variables et les fonctions en Python est
appelé *snake_case*. Il est différent du *CamelCase* utilisé pour les noms des

Chunk id: 4287
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
```python
import matplotlib.pyplot as plt
plt.bar(x, y)
plt.show()
```  
Vous pouvez également ajouter un peu de cosmétique et enregistrer le graphique sur votre disque dur :  
```python

Chunk id: 2763
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
l'exécution d'un script Python à l'aide de la combinaison de touches *Ctrl-C* (c'est-à-dire en pressant simultanément les touches *Ctrl* et *C*). Par exemple :

Chunk id: 1125
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
Ce qui se trouve entre les parenthèses d'une fonction est appelé **argument** et c'est ce que l'on « passe » à la fonction. Dans l'instruction `type(2)`, c'est l'entier `2` qui est l'argument passé à

Chunk id: 1978
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
- même si un jour vous décidez de modifier votre classe et de mettre en place un contrôle d'accès à certains attributs avec des objets *property*, cela ne changera rien du côté client. Ce dernier

Chunk id: 154
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1272-passage-de-liste-a-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.2 Passage de liste à une fonction
Content:
4. Affichez à nouveau `ma_liste` à l'écran.  
Comment expliquez-vous le résultat obtenu ?

Chunk id: 1006
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
protein 00003 Q8N4C6
[...]
protein 20371 Q8IZJ1
protein 20372 Q9UKP6
protein 20373 Q96HZ7
```  
*Conseils* :

Chunk id: 436
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
```python
>>> r = range(3)
>>> r[0]
0
>>> r[0:1]
range(0, 1)
>>> for i in r:
...     print(i)
...
0
1
2
>>> r[2] = 10
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 1039
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
Sachez par ailleurs que l'opérateur d'affectation `=` s'utilise dans un certain sens. Par exemple, l'instruction  `x = 2` signifie qu'on attribue la valeur située à droite de l'opérateur `=` (ici,

Chunk id: 2154
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
![Notebook avec une cellule ré-exécutée.](img/jupyter-cellule-4-mauvais-ordre.png "Notebook avec une cellule ré-executée."){ #fig:jupyter-cellule-4-mauvais-ordre width=80% }  
open-box-warn

Chunk id: 3680
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
telles ou telles lignes / colonnes, ignorer des lignes de commentaire, changer le séparateur par défaut (par exemple la virgule `,` pour les fichiers .csv), etc., qui peuvent se révéler commodes.

Chunk id: 2663
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
fois que la ligne contenant le `for` est exécutée (si elle existait déjà son contenu serait écrasé). Une fois la boucle terminée, cette variable d'itération `animal` n'est pas détruite et conserve la

Chunk id: 3940
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Prenons le temps d'examiner les différentes étapes du script précédent :  
Lignes 4 à 6. On définit les variables `sequence`, `bases` et `distribution` qu'on utilise ensuite.

Chunk id: 2203
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
d'autre, mais également, et surtout, par soi-même. Essayez de relire un code que vous avez écrit « rapidement » il y a un 1 mois, 6 mois ou un an. Si le code ne fait que quelques lignes, il se peut

Chunk id: 4721
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
![Exemple 2 de *canvas*.](img/example_canvas2.png "Exemple 2 de *canvas*"){ #fig:exemple2_canvas width=70% }  
Le code suivant crée une telle application :  
```python
import tkinter as tk

Chunk id: 365
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13-containers-dictionnaires-tuples-et-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Content:
Dans ce chapitre nous allons voir trois nouveaux types d'objet qui s'avèrent extrêmement utiles : les dictionnaires, les tuples et les *sets*. Comme les listes ou les chaînes de caractères, ces trois

Chunk id: 90
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
exactement le même mécanisme que pour la copie de listes (cf. rubrique 11.4 *Copie de listes* du chapitre 11 *Plus sur les listes*).

Chunk id: 17
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
Nous appelons depuis le programme principal la fonction `calc_vals()`, puis à l'intérieur de celle-ci nous appelons l'autre fonction `polynome()`. Regardons ce que *Python Tutor* nous montre lorsque

Chunk id: 1805
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Vous pourrez vous poser la question « *Pourquoi utilise-t-on en ligne 24 la syntaxe* `Fruit.__init__()` *?* ». Cette syntaxe est souvent utilisée lorsqu'une classe hérite d'une autre classe pour

Chunk id: 547
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: dictionary update sequence element #1 has length 3; 2 is required
```

Chunk id: 1801
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
self.taille: petite, self.masse: 50
self.saveur: acide, self.forme: ellipsoïde

Chunk id: 4388
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Ce formatage est également possible sur des chaînes de caractères avec la lettre `s` (comme *string*) :  
```python
>>> print("atom HN") ; print("atom HDE1")
atom HN
atom HDE1

Chunk id: 1063
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#23-nommage
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.3 Nommage
Content:
De plus, il faut absolument éviter d'utiliser un mot « réservé » par Python comme nom de variable (par exemple : `print`, `range`, `for`, `from`, etc.).

Chunk id: 1689
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Dans cet exemple, la classe `Fille1` hérite de la classe `Mere1` et la classe `Fille2` hérite des deux classes `Mere1` et `Mere2`. Dans le cas de la classe `Fille2`, on parle d'héritage multiple.

Chunk id: 256
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Si vous exécutez vous-même les exemples précédents, vous devriez obtenir des résultats légèrement différents de ceux indiqués.
C'est l'intérêt de l'aléatoire !

Chunk id: 3417
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
- les 10 dernières bases.  
La sortie produite par le script devrait ressembler à ça :  
```text
UBI4_SCerevisiae.fasta
La séquence contient WWW bases

Chunk id: 1211
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
```python
>>> x = [1, 2, 3]
>>> y = list(x)
>>> x[1] = -15
>>> y
[1, 2, 3]
```

Chunk id: 2775
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#541-boucles-de-base
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.1 Boucles de base
Content:
liste (un élément par ligne) de trois façons différentes (deux méthodes avec `for` et une avec `while`).

Chunk id: 4155
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```  
Ce modèle linaire nous indique qu'un résidu a une masse d'environ 116 Dalton,
ce qui est cohérent. On peut également comparer ce modèle aux différentes protéines :  
```python
>>> plt.clf()

Chunk id: 2101
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
open-box-more  
Pour aller plus loin, vous pouvez consulter le très bon [article](https://dbader.org/blog/writing-clean-python-with-namedtuples) de Dan Bader.  
close-box-more

Chunk id: 4627
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
de rendu du widget après cette création (ici on met le texte en rouge avec l'option `"fg"`). La notation ressemble à celle d'un dictionnaire avec une syntaxe générale `widget["option"] = valeur`.

Chunk id: 4231
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
Mar 12 10 14 11
Mer 11 11 14 13
[...]
```  
À l'aide du module *NumPy*, on souhaite déterminer quel est le jour de la semaine le plus chaud. Pour cela nous vous proposons les étapes suivantes :

Chunk id: 2072
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
### 19.6.5 Pour finir les *namedtuples*

Chunk id: 1521
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
dans l'exemple ci-dessus cela aurait été `Citron.saveur = "sucrée"`. De même, pour sa destruction, il faudra utiliser la même syntaxe : `del Citron.saveur`.  
open-box-adv

Chunk id: 2297
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
claires sur l'utilité du code et doivent être synchronisés avec le code, c'est-à-dire que si le code est modifié, les commentaires doivent l'être aussi (le cas échéant).

Chunk id: 4181
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
il faut trier les valeurs obtenus du plus grand au plus petit avec la méthode
`.sort_values()`. Comme on ne veut  connaître que les premières dates

Chunk id: 1087
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
Les opérateurs `-=`, `*=` et `/=` se comportent de manière similaire pour la soustraction, la multiplication et la division.

Chunk id: 1525
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
avec des objets modifiables comme des listes et des dictionnaires, cela peut avoir des effets désastreux non désirés. Nous verrons plus bas un exemple concret d'attribut de classe qui est très utile,

Chunk id: 2652
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
# 5 Boucles et comparaisons  
## 5.1 Boucles `for`  
### 5.1.1 Principe

Chunk id: 259
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
open-box-def

Chunk id: 1336
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
{'couleur': 'jaune'}
>>> del citron1.couleur
>>> citron1.__dict__
{}
```  
Dans la suite on montrera du code à tester dans un script, n'hésitez pas comme d'habitude à le tester vous-même.

Chunk id: 3731
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
l'[inverse d'une matrice carrée](https://fr.wikipedia.org/wiki/Matrice_inversible), `det()` son [déterminant](https://fr.wikipedia.org/wiki/Calcul_du_d%C3%A9terminant_d%27une_matrice) et `eig()` ses

Chunk id: 2020
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Le *name mangling* n'est donc pas un mécanisme de « protection » d'un attribut, il n'a pas été conçu pour ça. Les concepteurs de Python le disent clairement dans la PEP 8: « *Generally, double

Chunk id: 471
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
Toutes les clés de dictionnaire utilisées jusqu'à présent étaient des chaînes de caractères. On peut utiliser d'autres types d'objets comme des entiers, des *floats*, voire même des *tuples* (cf.

Chunk id: 2731
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
| Syntaxe Python | Signification           |
|:--------------:|-------------------------|
|      `==`      | égal à                  |
|      `!=`      | différent de            |

Chunk id: 2464
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.

Chunk id: 2805
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
sans la diagonale. On peut noter que cela produit tous les couples possibles une seule fois (1 et 2 est équivalent à 2 et 1), en excluant par ailleurs chaque élément avec lui même (1 et 1, 2 et 2,

Chunk id: 3554
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
close-box-rem  
Sur un modèle similaire à la fonction `range()`, la fonction `arange()` permet de construire un *array* à une dimension de manière simple.  
```python
>>> np.arange(10)

Chunk id: 4830
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Message* : affiche un message sur plusieurs lignes (extensions du *widget* Label).
- *Scale* : affiche une règle graduée pour que l'utilisateur choisisse parmi une échelle de valeurs.

Chunk id: 273
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
open-box-rem

Chunk id: 3424
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1083-frequence-des-bases-dans-une-sequence-dadn
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.3 Fréquence des bases dans une séquence d'ADN
Content:
d'ADN sous forme d'une chaîne de caractères et qui renvoie une liste de quatre *floats* indiquant respectivement la fréquence en bases `A`, `T`, `G` et `C`.

Chunk id: 510
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1326-methode-get
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.6 Méthode `.get()`
Content:
>>>
```  
Ici la valeur associée à la clé `nom` est `singe` mais la clé `age` n'existe pas.
On peut également indiquer à `.get()` une valeur par défaut si la clé n'existe pas :  
```python

Chunk id: 531
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1329-cle-associee-au-minimum-ou-au-maximum-des-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.9 Clé associée au minimum ou au maximum des valeurs
Content:
également l'argument `key=`. On peut ainsi obtenir la clé associée au minimum ou au maximum des valeurs d'un dictionnaire :

Chunk id: 1633
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
des opérandes utilisées (on rappelle dans l'expression `1 + 1`, `+` est l'opérateur d'addition et les deux `1` sont les opérandes).

Chunk id: 2612
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
Déterminez les nombres premiers inférieurs à 100. Combien y a-t-il de nombres premiers entre 0 et 100 ?
Pour vous aider, nous vous proposons plusieurs méthodes.

Chunk id: 3527
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
(fichiers PDB). Le module *matplotlib* permet de créer des graphiques depuis Python. Enfin, le module *pandas* est très performant pour l'analyse de données, et *scipy* étend les possibilités

Chunk id: 18
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
nous appelons l'autre fonction `polynome()`. Regardons ce que *Python Tutor* nous montre lorsque la fonction `polynome()` est exécutée dans la Figure @fig:appel_fct_ds_fct.

Chunk id: 838
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
Utilisez la fonction `trouve_calpha()` de l'exercice précédent et la fonction

Chunk id: 3108
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
Dans l'exemple ci-dessus, la fonction `range()` a pris un argument, mais elle peut également prendre deux ou trois arguments, voyez plutôt :  
```python
>>> list(range(0, 5))
[0, 1, 2, 3, 4]

Chunk id: 1311
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Ligne 8. On crée une instance de la classe `Citron`, c'est-à-dire qu'on fabrique un représentant ou objet de la classe `Citron` que nous nommons `citron1`.

Chunk id: 1602
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
(variables locales, globales ou provenant de modules). L'utilisation de classes évitera ainsi l'utilisation de variables globales qui, on l'a vu aux chapitres 9 et 12 sur les fonctions, sont à

Chunk id: 1958
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
la vraie valeur de l'attribut est stockée dans la variable d'instance `._masse` (`instance._masse` de l'extérieur et `self._masse` de l'intérieur).

Chunk id: 135
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
de la fonction que la liste est modifiée « sur place »  (*in place* en anglais) dans la fonction. Vous verrez dans le chapitre 14 *Création de modules* comment documenter vos fonctions.

Chunk id: 2357
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Les outils `pycodestyle`, `pydocstyle` et `pylint` sont des **linters**, c'est-à-dire des programmes qui vont chercher les sources potentielles d'erreurs dans un code informatique. Ces erreurs

Chunk id: 2035
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
def __init__(self, couleur="jaune", taille="standard"):
"""Constructeur de la classe Citron.

Chunk id: 3054
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
la construction de liste contenant des valeurs de types différents (par exemple entier et chaîne de caractères), ce qui leur confère une grande flexibilité. Une liste est déclarée par une série de

Chunk id: 4877
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
- [`.place()`](http://effbot.org/tkinterbook/place.htm).

Chunk id: 2661
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
valeurs de la liste `animaux` à chaque itération de la boucle. On verra un peu plus loin dans ce chapitre que l'on peut choisir le nom que l'on veut pour cette variable. Celle-ci est créée par Python

Chunk id: 1566
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
dans cette fonction. Lorsqu'on exécute `mod.fct2()`, la valeur de `j` sera celle définie de manière globale dans le module.

Chunk id: 2791
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5410-pyramide
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.10 Pyramide
Content:
### 5.4.10 Pyramide  
Créez un script `pyra.py` qui dessine une pyramide comme celle-ci :  
```text
*
***
*****
*******
*********
***********
*************
***************
*****************

Chunk id: 13
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
on peut appeler une fonction de n'importe où à partir du moment où elle est visible par Python (c'est-à-dire chargée dans la mémoire). Observez cet exemple :

Chunk id: 2139
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
- Cliquer sur le menu *Cell*, puis *Run Cells*.
- Cliquer sur le bouton *Run* (sous la barre de menu).
- Presser simultanément les touches *Ctrl* + *Entrée*.

Chunk id: 4640
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
fonctionné dans l'interpréteur car, comme on l'a vu, la boucle `.mainloop()` n'y est pas présente. Comme  nous écrirons systématiquement nos applications *Tkinter* dans des scripts, et que la boucle

Chunk id: 4153
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
>>> lr
LinregressResult(slope=116.18244897959184, intercept=-1871.6131972789153,
rvalue=0.993825553885062, pvalue=1.664932379936294e-22,
stderr=2.765423239336685)
```

Chunk id: 958
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
`chaine2` par `chaine1`. Si vous souhaitez ne remplacer que les *n* premières occurrences, utilisez l'argument `count=n` :

Chunk id: 1174
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
### 11.1.9 Particularités des méthodes associées aux listes

Chunk id: 800
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
Créez une nouvelle fonction `compte_mots_3_lettres()` qui a un comportement similaire à `compte_mots_2_lettres()` mais avec des mots de 3 lettres.

Chunk id: 4623
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
bouton["fg"] = "red"
label.pack()
bouton.pack()
racine.mainloop()
print("C'est fini !")
```  
puis lançons ce script depuis un *shell* :  
```bash
$ python tk_exemple.py
```

Chunk id: 1678
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
close-box-more

Chunk id: 1286
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
concepts tels que le *polymorphisme* (capacité à redéfinir le comportement des opérateurs, nous avons déjà vu ces mots vous en souvenez-vous ?), ou bien encore l'*héritage* (capacité à définir une

Chunk id: 3428
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
Utilisez cette fonction pour convertir la séquence protéique
`ALA GLY GLU ARG TRP TYR SER GLY ALA TRP`.  
Rappel de la nomenclature des acides aminés :

Chunk id: 520
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
```python
>>> dico = {"a": 15, "b": 5, "c":20}
>>> for key in sorted(dico, key=dico.get):
...     print(key, dico[key])
...
b 5
a 15
c 20
```

Chunk id: 550
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
(itérables, ordonnés et indexables) mais ils sont toutefois **non modifiables**. On verra plus bas qu'ils sont hachables sous certaines conditions. L'intérêt des tuples par rapport aux listes réside

Chunk id: 992
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
| Enzyme  | Site de restriction |
|---------|--------------|
| HinFI   | GANTC        |
| EcoRII  | CCWGG        |
| BbvBI   | GGYRCC       |
| BcoI    | CYCGRG       |
| Psp5II  | RGGWCCY      |

Chunk id: 4439
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
```python
>>> x = 32
>>> nom = "John"
>>> print("%s a %d ans" % (nom, x))
John a 32 ans
>>> nb_G = 4500
>>> nb_C = 2575
>>> prop_GC = (nb_G + nb_C)/14800

Chunk id: 3360
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
lignes commençant par un mot-clé. Par exemple dans un fichier PDB, les lignes contenant les coordonnées des atomes commencent par le mot-clé `ATOM`.

Chunk id: 2532
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
```python
>>> 1/10 == 0.1
True
```

Chunk id: 899
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Il est important de savoir par ailleurs que les *regex* sont « avides » (*greedy* en anglais) lorsqu'on utilise les métacaractères `+` et `*`. C'est-à-dire que la *regex* cherchera à « s'étendre » au

Chunk id: 292
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Toujours dans le module *sys*, la fonction `sys.exit()` est utile pour quitter un script Python. On peut donner un argument à cette fonction (en général une chaîne de caractères) qui sera renvoyé au

Chunk id: 4189
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
« meilleure » année est 2003 avec quatre structures.  
Toutes ces méthodes, enchaînées les unes à la suite des autres, peuvent vous

Chunk id: 2222
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#151-de-la-bonne-syntaxe-avec-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Content:
au moins une fois pour avoir une bonne vue d'ensemble. On ne présentera ici qu'un rapide résumé de cette PEP 8.

Chunk id: 4348
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
par leur contenu ! Première remarque, la syntaxe apparait plus lisible que l'équivalent vu ci-avant `print(nom, "a", x, "ans")`. Bien sûr, il ne faut pas omettre le `f` avant le premier guillemet,

Chunk id: 61
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
```python
>>> def ma_fonction():
...     x = 2
...     print(f"x vaut {x} dans la fonction")
...
>>> ma_fonction()
x vaut 2 dans la fonction
>>> print(x)
Traceback (most recent call last):

Chunk id: 1500
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
= nouvelle_valeur`. Puisqu'ils sont destinés à être identiques pour toutes les instances, cela est logique de ne pas pouvoir les modifier via une instance. Les attributs de classe Python ressemblent

Chunk id: 4075
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
la colonne `PDB ID` est maintenant utilisée comme index et n'est donc plus
prise en compte.  
Il est aussi intéressant de savoir de quel type de données est constituée
chaque colonne :  
```python

Chunk id: 2433
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
est utilisé en tant que programme. Les lignes suivantes ne sont donc pas exécutées si le script est chargé comme un module.

Chunk id: 646
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
```python
>>> l1[2] = -15
>>> t[0].append(-632)
>>> t
([1, 2, -15, -632], 'Plouf')
>>> id(l1)
139971081980816
>>> id(t[0])
139971081980816
```

Chunk id: 2293
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1516-lignes-vides
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.6 Lignes vides
Content:
Il est recommandé de laisser deux lignes vides avant la définition d'une fonction ou d'une classe et de laisser une seule ligne vide avant la définition d'une méthode (dans une classe).

Chunk id: 1062
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#23-nommage
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.3 Nommage
Content:
Par ailleurs, un nom de variable ne doit pas débuter par un chiffre et il n'est pas recommandé de le faire débuter par le caractère `_` (sauf cas très particuliers).

Chunk id: 3754
Number of Tokens: 89
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> l1, l2, l3 = a
>>> l1
array([1, 2, 3])
>>> l2
array([4, 5, 6])
>>> l3
array([7, 8, 9])
```

Chunk id: 4023
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
Paris  Lyon  Nantes  Pau
souris     30    31      32   33
```  
et `|` pour l'opérateur **ou** :  
```python
>>> df[ (df["Pau"]>15) | (df["Lyon"]>25) ]
Paris  Lyon  Nantes  Pau

Chunk id: 3730
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
fonctions du sous-module *linalg* de *NumPy*. La fonction `inv()` renvoie l'[inverse d'une matrice carrée](https://fr.wikipedia.org/wiki/Matrice_inversible), `det()` son

Chunk id: 2550
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#67-exercices
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Content:
## 6.7 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 3528
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
le module *pandas* est très performant pour l'analyse de données, et *scipy* étend les possibilités offertes par *NumPy*, notamment en proposant des algorithmes couramment utilisés en calcul

Chunk id: 3327
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
open-box-adv

Chunk id: 3590
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
initiale de l'objet *array*, c'est-à-dire que le nombre d'éléments contenus dans les différents *arrays* soit le même.

Chunk id: 3352
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Si l'élément recherché est trouvé plusieurs fois, seul l'indice de la première occurrence est renvoyé :  
```python
>>> animaux = "girafe tigre"
>>> animaux.find("i")
1
```

Chunk id: 3190
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#14-introduction-au-shell
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.4 Introduction au *shell*
Content:
Pour approfondir la notion de *shell*, vous pouvez consulter les pages Wikipedia :  
- du [*shell* Unix](https://fr.wikipedia.org/wiki/Shell_Unix) fonctionnant sous Mac OS X et Linux ;

Chunk id: 4159
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
Text(0.5, 0, "Taille (nombre d'acides aminés)")
>>> plt.ylabel("Masse moléculaire (Dalton)")
Text(0, 0.5, 'Masse moléculaire (Dalton)')
>>> plt.savefig("transferrine3.png")
```

Chunk id: 3354
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animaux = "girafe tigre"
>>> animaux.replace("tigre", "singe")
'girafe singe'
>>> animaux.replace("i", "o")
'gorafe togre'
```

Chunk id: 3558
Number of Tokens: 91
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> np.arange(10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> np.arange(10.0)
array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
```

Chunk id: 236
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*re*](https://docs.python.org/fr/3/library/re.html#module-re) : gestion des expressions régulières (cf. chapitre 16 *Expressions régulières et *parsing*).

Chunk id: 4556
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
il s'agit d'un pointeur, mais tout ceci est géré par Python et est transparent pour l'utilisateur). Vous souvenez-vous ce qui se passait avec une liste passée en argument à une fonction (voir le

Chunk id: 4904
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Hériter de la classe Frame ou de la classe Tk sont deux manières tout à fait valides pour créer des applications *Tkinter*. Le choix de l'une ou de l'autre relève plus de préférences que l'on

Chunk id: 931
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
comme dans la fonction `fullmatch()`, vous pouvez utiliser les métacaractères `^` et `$`, par exemple `^tigre$`.

Chunk id: 470
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
### 13.2.2 Objets utilisables comme clé

Chunk id: 216
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
class list(object)
|  list() -> new list
|  list(sequence) -> new list initialized from sequence's items
|
|  Methods defined here:
|
|  __add__(...)
|      x.__add__(y) <==> x+y
|
...
```

Chunk id: 4900
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
de notre classe est exécutée.  L'appel au constructeur de la classe Frame en ligne 4 instancie automatiquement une fenêtre Tk (car cela est strictement obligatoire). Dans la suite du programme, cette

Chunk id: 2993
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
#programme principal
nb = 4
factorielle_nb = calc_factorielle(nb)
print(f"{nb}! = {factorielle_nb}")
nb2 = 10
print(f"{nb2}! = {calc_factorielle(nb2)}")
```

Chunk id: 100
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
particulières. D'abord il va regarder si la variable est **locale**, puis si elle n'existe pas localement, il vérifiera si elle est **globale** et enfin si elle n'est pas globale, il testera si elle

Chunk id: 774
Number of Tokens: 92
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
>>> {i**2 for i in range(10)}
{0, 1, 64, 4, 36, 9, 16, 49, 81, 25}
>>>
>>> animaux = (("singe", 3), ("girafe", 1), ("rhinocéros", 1), ("gazelle", 4))
>>> {ani for ani, _ in animaux}

Chunk id: 2710
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
Dans l'exemple précédent, nous avons choisi le nom `i` pour la variable d'itération. Ceci est une habitude en informatique et indique en général qu'il s'agit d'un entier (le nom `i` vient sans doute

Chunk id: 3579
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
- `.shape` renvoie les dimensions sous forme d'un tuple. Dans le cas d'une matrice (*array* à deux dimensions), la première valeur du tuple correspond au nombre de lignes et la seconde au nombre de

Chunk id: 4588
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
ce *widget* dans la fenêtre). Notez le premier argument positionnel`racine` passé à la classe `tk.Label`, celui-ci indique la fenêtre parente où doit être dessinée le *label*. Cet argument doit

Chunk id: 2403
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
de nombreuses suggestions d'amélioration et la note attribuée à votre script devrait rapidement augmenter. Pour autant, la note de 10 est parfois difficile à obtenir. Ne soyez pas trop exigeant.

Chunk id: 2344
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Lignes 10 à 14. Même chose pour le second paramètre. La description du paramètre peut s'étaler sur plusieurs lignes.

Chunk id: 1152
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#111-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Content:
propres et qui peuvent se révéler très pratiques. On rappelle qu'une méthode est une fonction qui agit sur l'objet auquel elle est attachée par un point.

Chunk id: 2900
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
Jusqu'à maintenant, nous avons systématiquement passé le nombre d'arguments que la fonction attendait. Que se passe-t-il si une fonction attend deux arguments et que nous ne lui en passons qu'un seul

Chunk id: 3234
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
Bien sûr, l'interpréteur présente vite des limites dès lors que l'on veut exécuter une suite d'instructions plus complexe. Comme tout langage informatique, on peut enregistrer ces instructions dans

Chunk id: 3127
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
Nous avions déjà croisé `min()`, `max()` dans le chapitre 2 *Variables*. On avait vu que ces deux fonctions pouvaient prendre plusieurs arguments entiers et / ou *floats*, par exemple :  
```python

Chunk id: 3134
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4101-jours-de-la-semaine
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.1 Jours de la semaine
Content:
2. Cherchez un autre moyen pour arriver au même résultat (*en utilisant un autre indiçage*).
3. Trouvez deux manières pour accéder au dernier jour de la semaine.

Chunk id: 4625
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
l'interpréteur (voir la figure @fig:exemple1_tkinter). Nous commentons ici les différences (dans le désordre) :

Chunk id: 1280
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
type *int* est en fait un objet de type *int*, donc construit à partir de la classe *int*. Pareil pour les *float* et *string*. Mais également pour les *list*, *tuple*, *dict*, etc. Voilà pourquoi

Chunk id: 2684
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Faites en sorte de configurer votre éditeur de texte favori de façon à écrire quatre espaces lorsque vous tapez sur la touche *Tab* (tabulation).  
close-box-rem

Chunk id: 4162
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
### 17.5.6 Analyse de données temporelles  
Il peut être intéressant de savoir, pour chaque organisme, quand les premières
et les dernières structures de transferrines ont été déposées dans la PDB.

Chunk id: 853
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
texte. Cette suite de caractères est encore appelée **motif** (en anglais *pattern*), motif qui est constitué de deux types de caractères:

Chunk id: 432
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
```  
Les valeurs de hachage renvoyées par la fonction `hash()` de Python sont systématiquement des entiers. Par contre, Python renvoie une erreur pour une liste car elle est non hachable.

Chunk id: 694
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
>>> s[1] = 5
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 1399
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
une fois son exécution terminée. Et comme avec les fonctions classiques, l'espace mémoire contenant les variables locales à cette méthode va être détruit une fois son exécution terminée.

Chunk id: 2122
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
Voici un exemple de notebook Jupyter (figure @fig:jupyter-exemple) :

Chunk id: 1705
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Voyons un exemple :  
```python
class Mere:
def bonjour(self):
return "Vous avez le bonjour de la classe mère !"

Chunk id: 114
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
Parfois on veut faire vite et on crée une variable globale visible partout dans le programme (donc dans toutes les fonctions), car « *Ça va plus vite, c'est plus simple* ». C'est un très mauvais

Chunk id: 3136
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4102-saisons
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.2 Saisons
Content:
### 4.10.2 Saisons

Chunk id: 916
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
```python
>>> import re
>>> animaux = "girafe tigre singe"
>>> re.search("tigre", animaux)
<_sre.SRE_Match object at 0x7fefdaefe2a0>
>>> if re.search("tigre", animaux):
...     print("OK")
...
OK

Chunk id: 4597
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
par mot-clé est tellement longue qu'en général on ne les précisera pas tous. Heureusement, Python autorise l'utilisation des arguments par mot-clé dans un ordre quelconque. Comme nous l'avons vu dans

Chunk id: 3605
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
array([0, 1, 2, 3, 4, 5])
```  
Notez que cette fonction `np.resize()` renvoie un nouvel *array* mais ne modifie pas l'*array* initial contrairement à la méthode `.resize()` décrite ci-dessus.

Chunk id: 1400
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
![Fonctionnement d'un constructeur (étape 3).](img/classe_constructeur3.png){ #fig:classe_constructeur3 width=90% }

Chunk id: 1669
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
def __call__(self, nb_citrons, age):
self.nb_citrons, self.age = nb_citrons, age

def __str__(self):
return (f"Ce citronnier a {self.age} ans "
f"et {self.nb_citrons} citrons")

Chunk id: 4466
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
`%` est clairement déconseillée. La deuxième avec la méthode `.format()` est encore tout à fait valable. Si vous débutez Python, nous vous conseillons fortement d'apprendre et d'utiliser les

Chunk id: 3842
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
la variable `Entrez.email` qui sera transmise au NCBI lors de la requête et qui
pourra être utilisée pour vous contacter en cas de difficulté avec le serveur.

Chunk id: 1490
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
def __init__(self, couleur="jaune"):
self.couleur = couleur #attribut d'instance

Chunk id: 2394
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
-----------------------------------
Your code has been rated at 0.00/10

Chunk id: 3587
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
[3, 4, 5]])
>>> b.shape
(2, 3)
>>> a
array([0, 1, 2, 3, 4, 5])
```  
Notez bien que le *array* `a` n'a pas été modifié et que `a.reshape((2, 3))` n'est pas la même chose que `a.reshape((3, 2))` :

Chunk id: 1030
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
prend plus ou moins d'espace en mémoire. Python a aussi fait en sorte qu'on puisse retrouver la variable sous le nom `x`.

Chunk id: 4917
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
application, on ne passe aucun argument : `app = MonApplication()`. Toutefois, on pourrait être intéressé à récupérer des arguments passés au constructeur, par exemple :

Chunk id: 4876
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
- [`.pack()`](http://effbot.org/tkinterbook/pack.htm) ;
- [`.grid()`](http://effbot.org/tkinterbook/grid.htm), [](https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/grid.html) ;

Chunk id: 2818
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
final 5 (voir le schéma de la figure @fig:saut-de-puce). Combien de sauts sont nécessaires pour réaliser ce parcours ? Relancez plusieurs fois le programme. Trouvez-vous le même nombre de sauts à

Chunk id: 3024
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
nombre aléatoire dans un intervalle donné, utilisez la fonction `uniform()` du module *random* dont voici quelques exemple d'utilisation :

Chunk id: 2368
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```bash
$ pycodestyle script_quality_not_ok.py
script_quality_not_ok.py:6:1: E302 expected 2 blank lines, found 1
script_quality_not_ok.py:6:30: E231 missing whitespace after ','

Chunk id: 3669
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Le module numpy contient aussi des fonctions pour lire des données à partir de fichiers et créer des *arrays* automatiquement. Cela se révèle bien pratique car la plupart du temps les données que

Chunk id: 594
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
...
('pinson', 2) <class 'tuple'>
('merle', 3) <class 'tuple'>
```  
La méthode `.dict_items()` itère comme `enumerate()` sur une série de tuples.

Chunk id: 3098
Number of Tokens: 157
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
>>> x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x[::1]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x[::2]
[0, 2, 4, 6, 8]
>>> x[::3]
[0, 3, 6, 9]
>>> x[1:6:3]
[1, 4]
```

Chunk id: 4684
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
code précédent semblait plus direct ? ». La réponse est simple, lorsqu'un projet de GUI grossit, le code devient très vite illisible s'il n'est pas organisé en classe. De plus, la non-utilisation de

Chunk id: 4905
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
des applications *Tkinter*. Le choix de l'une ou de l'autre relève plus de préférences que l'on acquiert en pratiquant, voire de convictions philosophiques sur la manière de programmer. Toutefois,

Chunk id: 2578
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
Jusqu'à présent, la conjecture de Syracuse, selon laquelle depuis n'importe quel entier positif la suite de Syracuse atteint 1, n'a pas été mise en défaut.

Chunk id: 4011
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-sur-les-lignes-et-les-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.3 Sélection sur les lignes et les colonnes
Content:
#### 17.4.4.3 Sélection sur les lignes et les colonnes  
On peut bien sûr combiner les deux types de sélection (en ligne et en colonne):  
```python
>>> df.loc["souris", "Pau"]
33

Chunk id: 1854
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
on souhaitait avoir un entier seulement, ou bien une valeur bornée, on peut facilement ajouter des tests dans le *setter* et renvoyer une erreur à l'utilisateur de la classe s'il n'a pas envoyé le

Chunk id: 1343
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
if __name__ == "__main__":
citron1 = Citron()
print(citron1.couleur)
citron2 = Citron()
print(citron2.couleur)
```  
L'exécution de ce code affichera :  
```text
jaune
jaune
```  
open-box-warn

Chunk id: 4282
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
Créez une liste `x` qui contient les clés du dictionnaire `freq`. Ordonnez les valeurs dans `x` avec la méthode `.sort()`. Créez maintenant une seconde liste `y` qui contient, dans l'ordre, le nombre

Chunk id: 3850
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'30399508', '30397276', '30395963', '30394734', '30394728', '30394123',
'30393423', '30392910', '30392664', '30391706', '30391651', '30391537',
'30391296', '30390672']
>>> len(res_esearch["IdList"])

Chunk id: 1520
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
```  
En fait, la seule manière de modifier un attribut de classe est d'utiliser une syntaxe
`NomClasse.attribut_de_classe = nouvelle_valeur`,

Chunk id: 780
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
- les [dictionnaires ordonnés](https://docs.python.org/fr/3/library/collections.html#collections.OrderedDict) qui se comportent comme les dictionnaires classiques mais qui sont ordonnés ;

Chunk id: 2036
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Ce constructeur prend deux arguments par mot-clé
couleur et taille."""
self.couleur = couleur
self.taille = taille

Chunk id: 3961
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
```python
>>> s[0]
10
>>> s["a"]
10
```  
Bien sûr, on peut extraire plusieurs éléments, par leurs indices ou leurs étiquettes :  
```python
>>> s[[1, 3]]
b    20
d    40
dtype: int64

Chunk id: 3938
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
plt.savefig("distribution_bases.png", bbox_inches="tight", dpi=200)
```  
On obtient alors le graphique de la figure @fig:distribution.

Chunk id: 1649
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
class CitronCool:
def __init__(self, couleur="jaune", taille="standard"):
self.couleur = couleur
self.taille = taille

Chunk id: 1340
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
instance. On verra plus bas que de tels attributs suivent des règles différentes par rapport aux attributs d'instance.

Chunk id: 4369
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```  
Détaillons le contenu des accolades de la première ligne (`{prop_GC:.2f}`) :  
- D'abord on a le nom de la variable à formatter, `prop_GC`, c'est indispensable avec les *f-strings*.

Chunk id: 2707
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
même avec un `range(1000000)`. Si on utilisait `list(range(1000000))`, Python construirait d'abord une liste de 1 million d'éléments dans la mémoire puis itérerait dessus, d'où une énorme perte de

Chunk id: 4179
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
a été déposée dans la PDB entre le 1er janvier 1990 et le 31 décembre 1990.  
Pour connaître en quelle année le plus de structures ont été déposées dans la PDB,

Chunk id: 2796
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
### 5.4.11 Parcours de matrice  
Imaginons que l'on souhaite parcourir tous les éléments d'une matrice carrée, c'est-à-dire d'une matrice qui est constituée d'autant de lignes que de colonnes.

Chunk id: 3315
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
là une autre ligne"` renvoie une chaîne de caractères normale, puisqu'on voit ensuite que le `r` à disparu lorsqu'on demande à Python d'afficher le contenu de la variable `s`. Comme dans `var = 2 +

Chunk id: 1789
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
`Citron` prend les mêmes arguments que ceux du constructeur de `Fruit`. La ligne 24 est une étape importante que nous n'avons encore jamais vue : l'instruction `Fruit.__init__()` est un appel au

Chunk id: 3324
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
>>> print(s)
Le {animal} est un animal gentil
Le {animal2} aussi
```

Chunk id: 1756
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'__format__', '__ge__', '__getattribute__', '__gt__', '__hash__',
'__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__',

Chunk id: 2047
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
de modules*). Comme nous l'avons dit dans le chapitre 15 *Bonnes pratiques en programmation Python*, n'oubliez pas que les *docstrings* sont destinées aux utilisateurs de votre classe. Elle doivent

Chunk id: 2967
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Nous espérons que cet exemple guidé facilitera la compréhension des concepts de variables locales et globales. Cela viendra aussi avec la pratique. Nous irons un peu plus loin sur les fonctions dans

Chunk id: 2819
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
réaliser ce parcours ? Relancez plusieurs fois le programme. Trouvez-vous le même nombre de sauts à chaque exécution ?

Chunk id: 2782
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#544-nombres-pairs-et-impairs
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.4 Nombres pairs et impairs
Content:
Soit `impairs` la liste de nombres `[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]`. Écrivez un programme qui, à partir de la liste `impairs`, construit une liste `pairs` dans laquelle tous les éléments de

Chunk id: 10
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
## 12.1 Appel d'une fonction dans une fonction

Chunk id: 3636
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
Lignes 9 à 10. La syntaxe `a[i, j]` renvoie l'élément à la ligne d'indice `i` et à la colonne d'indice `j`. Notez que *NumPy* suit la convention mathématiques des

Chunk id: 1452
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
open-box-warn

Chunk id: 4509
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
![Exemple de GUI.](img/exemple_GUI.png "Exemple de GUI"){ #fig:exemple_GUI width=70% }

Chunk id: 4622
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
racine = tk.Tk()
label = tk.Label(racine, text="J'adore Python !")
bouton = tk.Button(racine, text="Quitter", command=racine.quit)
bouton["fg"] = "red"
label.pack()
bouton.pack()
racine.mainloop()

Chunk id: 4045
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
## 17.5 Un exemple plus complet  
Pour illustrer les possibilités de *pandas*, voici un exemple plus complet.  
Le fichier `transferrin_report.csv` que vous pouvez télécharger

Chunk id: 1745
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', [...]
'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
```

Chunk id: 1911
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
ni parenthèse, ni `self` (voir le chapitre 20 *Fenêtres graphiques et Tkinter*). Avec cette ligne de code, `attribut` est un objet de type *property* qui fonctionne de la manière suivante à

Chunk id: 1259
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1165-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.5 Séquence d'ADN aléatoire 2
Content:
Utilisez cette fonction pour générer aléatoirement une séquence d'ADN de 50 bases contenant 10 % de A, 30 % de T, 50 % de G et 10 % de C.

Chunk id: 1158
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1113-del
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.3 `del`
Content:
Contrairement aux méthodes associées aux listes présentées dans cette rubrique, `del` est une instruction générale de Python, utilisable pour d'autres objets que des listes. Celle-ci ne prend pas de

Chunk id: 1433
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Ligne 2. La méthode `.affiche_attributs()` montre que le `self` est bien une référence vers l'instance (ou objet) `citron1` (ou vers n'importe quelle autre instance, par exemple si on crée `citron2 =

Chunk id: 3924
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
de valeurs régulièrement espacées entre deux bornes, ici entre le minimum (`min(temps)`) et le maximum (`max(temps)`) de la variable `temps`. Dans notre exemple, nous générons une liste de 50

Chunk id: 1733
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
On voit tout de suite que la classe `Tk` hérite de deux autres classes `Misc` et `Wm`. Ensuite, le *help* indique l'ordre de résolution des méthodes : d'abord la classe `Tk` elle-même, ensuite ses

Chunk id: 2742
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
`"a"` est *inférieur à* `"b"` car le caractère *a* est situé avant le caractère *b* dans l'ordre alphabétique. En fait, c'est l'ordre

Chunk id: 1315
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
Reprenons notre classe `Citron` et l'instance `citron1` créée précédemment. Regardons les attributs et méthodes que cet objet possède, puis tentons de lui ajouter un attribut  :  
```python

Chunk id: 1027
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
```python
>>> x = 2
>>> x
2
```  
Ligne 1. Dans cet exemple, nous avons déclaré, puis initialisé la variable `x` avec la valeur 2. Notez bien qu'en réalité, il s'est passé plusieurs choses :

Chunk id: 813
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
d'un entier compris entre 1 et 4. Ce script doit extraire du fichier FASTA tous les mots et leurs occurrences en fonction du nombre de lettres passé en option.

Chunk id: 1662
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
- `.__add__()` : redéfinit le comportement de l'opérateur `+` ;
- `.__mul__()` : redéfinit le comportement de l'opérateur `*` ;
- `.__del__()` : redéfinit le comportement de la fonction `del`.

Chunk id: 766
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
{'singe': 3, 'girafe': 1, 'rhinocéros': 1, 'gazelle': 4}
```  
Avec un dictionnaire de compréhension, on peut rapidement compter le nombre de chaque base dans une séquence d'ADN :  
```python

Chunk id: 3522
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
gène 101 direct         ->  1403 bases
```  
*Conseil :* vous trouverez des explications sur le format GenBank dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 2011
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
```python
if __name__ == "__main__":
citron1 = Citron()
print(citron1.__dict__)
```  
On obtiendrait en sortie le dictionnaire `{'_Citron__mass': 100}`.

Chunk id: 4336
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
des chaînes de caractères qui étaient utilisées avant la version 3.6, nous en avons mis un rappel bref dans la rubrique suivante. Toutefois, nous conseillons vivement l'utilisation des *f-strings* si

Chunk id: 3129
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
```python
>>> min(liste, 3, 4)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: '<' not supported between instances of 'int' and 'list'
```

Chunk id: 3891
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#173-module-matplotlib
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Content:
est l'outil complémentaire de *NumPy*, *scipy* ou *pandas* (que l'on verra juste après) lorsqu'on veut faire de l'analyse de données.

Chunk id: 923
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
La différence est qu'elle renvoie un objet du type `SRE_Match` seulement lorsque la *regex* correspond au début de la chaîne de caractères (à partir du premier caractère).

Chunk id: 3735
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
[0.        , 0.        , 0.33333333]])
>>> np.linalg.det(a)
6.0
>>> np.linalg.eig(a)
(array([1., 2., 3.]), array([[1., 0., 0.],
[0., 1., 0.],
[0., 0., 1.]]))
```

Chunk id: 2843
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
Par exemple, si vous appelez la fonction `len()` de la manière suivante :  
```python
>>> len([0, 1, 2])
3
```  
voici ce qui se passe :

Chunk id: 2906
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
positionnels** (en anglais *positional arguments*). Il est strictement obligatoire de les préciser lors de l'appel de la fonction. De plus, il est nécessaire de respecter le même ordre lors de

Chunk id: 3055
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
de caractères), ce qui leur confère une grande flexibilité. Une liste est déclarée par une série de valeurs (n'oubliez pas les guillemets, simples ou doubles, s'il s'agit de chaînes de caractères)

Chunk id: 4117
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Homo sapiens           439.615385  48663.392308
Oryctolagus cuniculus  490.000000  54219.600000
Sus scrofa             696.000000  77067.900000
```

Chunk id: 2470
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
```  
Il vous faudra un navigateur et une connexion internet.  
open-box-more  
- L'article [*Python Code Quality: Tools & Best Practices*](https://realpython.com/python-code-quality/)

Chunk id: 3
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
9 le concept puissant et incontournable que représentent les **fonctions**. Nous avons également introduit la notion de variables **locales** et **globales**.

Chunk id: 3928
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
Ligne 12. La fonction `plot()` permet de construire une courbe à partir des coordonnées en abscisse et en ordonnées des points à représenter. On indique ensuite des arguments facultatifs comme le

Chunk id: 1274
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
open-box-def

Chunk id: 2161
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
Le format Markdown permet de rédiger du texte formaté (gras, italique, liens, titres, images, formules mathématiques...) avec quelques balises très simples. Voici un exemple dans une notebook Jupyter

Chunk id: 2786
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#546-produit-de-nombres-consecutifs
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.6 Produit de nombres consécutifs
Content:
### 5.4.6 Produit de nombres consécutifs  
Avez les fonctions `list()` et `range()`, créez la liste `entiers` contenant les nombres entiers pairs de 2 à 20 inclus.

Chunk id: 3438
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|     Sérine    |       Ser      |       S       |
|   Thréonine   |       Thr      |       T       |
|  Tryptophane  |       Trp      |       W       |

Chunk id: 2338
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Cette fonction ne sert pas à grand chose.

Parameters
----------
nombre1 : int
Le premier nombre entier.
nombre2 : int
Le second nombre entier.

Chunk id: 3336
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
>>> x[0].upper() + x[1:]
'Girafe'
```
ou plus simplement utiliser la méthode adéquate :
```python
>>> x.capitalize()
'Girafe'
```

Chunk id: 4074
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
>>> df.shape
(41, 4)
```  
Notre jeu de données contient donc 41 lignes et 4 colonnes. En effet,
la colonne `PDB ID` est maintenant utilisée comme index et n'est donc plus
prise en compte.

Chunk id: 3233
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
## 1.6 Premier programme

Chunk id: 3185
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#13-notations-utilisees
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.3 Notations utilisées
Content:
```text
sous cette forme,
sur plusieurs lignes,
pour les éléments les plus longs.
```  
Pour ces derniers, le numéro à gauche indique le numéro de la ligne et sera utilisé

Chunk id: 449
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
pour les listes avec `[]`). Ensuite, on remplit le dictionnaire avec différentes clés (`"nom"`, `"taille"`, `"poids"`) auxquelles on affecte des valeurs (`"girafe"`, `5.0`, `1100`). Vous pouvez

Chunk id: 3981
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
Notez ici qu'il faut avoir préalablement importer numpy avec l'instruction `import numpy as np`.  
Le même *dataframe* peut aussi être créé à partir des valeurs fournies

Chunk id: 4197
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Name: Deposit Date, dtype: int64
```  
open-box-more  
- Les ouvrages *Python for Data Analysis* de Wes McKinney et *Pandas Cookbook* de Theodore Petrou sont d'excellentes références pour *pandas*.

Chunk id: 4192
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
du traitement des données. L'utilisation des parenthèses (ligne 1, juste avant
`df["Deposit Date"]` et ligne 5, juste après `head()`) permet de répartir élégamment

Chunk id: 950
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
```python
>>> resultat = regex.search("pi vaut 3.14 et e vaut 2.72")
>>> resultat.group(0)
'3.14'
```

Chunk id: 1246
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1162-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.2 Séquence d'ADN aléatoire
Content:
nombre de bases de la séquence et qui renvoie une séquence d'ADN aléatoire sous forme d'une liste de bases. Utilisez la méthode `.append()` pour ajouter les différentes bases à la liste et la

Chunk id: 984
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
- qui recherche tous les journaux (mot-clé `JOURNAL`) dans lesquels ont été publiés les travaux sur cette séquence, puis affiche les lignes correspondantes.  
*Conseils* :

Chunk id: 3500
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
$$
d = \sqrt{(x_B - x_A)^2 + (y_B - y_A)^2 + (z_B - z_A)^2}
$$

Chunk id: 2772
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#54-exercices
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Content:
## 5.4 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 2268
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
```  
Par contre, pour les tranches de listes, on ne met pas d'espace autour du `:`  
```python
ma_liste = [1, 3, 5, 7, 9, 1]
#code recommandé :
ma_liste[1:3]
ma_liste[1:4:2]
ma_liste[::2]

Chunk id: 2296
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Les commentaires débutent toujours par le symbole `#` suivi d'un espace. Ils donnent des explications claires sur l'utilité du code et doivent être synchronisés avec le code, c'est-à-dire que si le

Chunk id: 4025
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
### 17.4.5 Combinaison de *dataframes*  
En biologie, on a souvent besoin de combiner deux tableaux de chiffres à partir d'une colonne commune.

Chunk id: 127
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
votre code. Pour cela, faites en sorte que la fonction renvoie la liste modifiée et de récupérer cette liste renvoyée dans une variable portant le même nom. Par exemple :

Chunk id: 2628
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
- [Patrick] « Plus grand. »
- [Pierre]  « Est-ce que ton nombre est plus petit, plus grand ou égal à 75 ? »
- [Patrick] « Plus grand. »

Chunk id: 3829
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
Obtention de la séquence complémentaire et complémentaire inverse :  
```python
>>> ADN.complement()
Seq('TATAGCCGATATCGTACG')
>>> ADN.reverse_complement()
Seq('GCATGCTATAGCCGATAT')
```

Chunk id: 3008
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#984-nombres-premiers
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.4 Nombres premiers
Content:
### 9.8.4 Nombres premiers  
Reprenez l'exercice du chapitre 6 *Tests* sur les nombres premiers.

Chunk id: 1051
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
```python
>>> y = 3.14
>>> y
3.14
>>> a = "bonjour"
>>> a
'bonjour'
>>> b = 'salut'
>>> b
'salut'
>>> c = """girafe"""
>>> c
'girafe'
>>> d = '''lion'''
>>> d
'lion'
```  
open-box-rem

Chunk id: 4942
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
Comme vu dans nos exemples ci-dessus, les fonctions *callback* ne prennent pas d'arguments ce qui peut se révéler parfois limitant. Il existe toutefois une astuce qui utilise les fonctions *lambda* ;

Chunk id: 3442
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1085-distance-de-hamming
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.5 Distance de Hamming
Content:
deux séquences de même taille en comptant le nombre de positions qui, pour chaque séquence, ne correspondent pas au même acide aminé.

Chunk id: 3781
Number of Tokens: 102
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
```python
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> a[a > 5]
array([6, 7, 8, 9])
>>> a[a > 5] = -1
>>> a
array([[ 1,  2,  3],
[ 4,  5, -1],
[-1, -1, -1]])
```

Chunk id: 3477
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
```text
ORIGIN
1 ccacaccaca cccacacacc cacacaccac accacacacc acaccacacc cacacacaca
61 catcctaaca ctaccctaac acagccctaa tctaaccctg gccaacctgt ctctcaactt
[...]

Chunk id: 4522
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
la bibliothèque graphique Tk (*Tool Kit*), *Tkinter* signifiant *tk interface*. On pourra noter que cette bibliothèque Tk peut être également pilotée par d'autres langages (Tcl, perl, etc.).

Chunk id: 2996
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
Une remarque concernant l'utilisation des *f-strings* que nous avions vues dans le chapitre 3 *Affichage*. On voit à nouveau une possibilité puissante des *f-strings* dans l'instruction `f"{nb2}! =

Chunk id: 2551
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#671-jours-de-la-semaine
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.1 Jours de la semaine
Content:
### 6.7.1 Jours de la semaine  
Constituez une liste `semaine` contenant le nom des sept jours de la semaine.

Chunk id: 3507
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
Observez avec attention les valeurs que vous avez calculées pour la protéine barstar. Repérez une valeur surprenante. Essayez de l'expliquer.

Chunk id: 3252
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
puis afficher le nombre total de bases à la fin. Nous pourrions utiliser l'algorithme présenté en pseudo-code dans la figure @fig:indentation_bloc_instructions.

Chunk id: 2910
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
close-box-def  
Mais il est aussi possible de passer un ou plusieurs argument(s) de manière facultative et de leur attribuer une valeur par défaut :  
```python
>>> def fct(x=1):
...     return x
...

Chunk id: 1681
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
ou de caractère (ne dit-on pas, j'ai hérité ceci ou cela de ma mère ou de mon père ?). Qu'en est-il en programmation ?

Chunk id: 1891
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
en français « *sucre syntaxique* ». De plus, à l'intérieur de la classe, il faut définir un *getter* et un *setter* pour chaque attribut, ce qui multiple les lignes de code.

Chunk id: 2895
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
nous verrons dans le chapitre 13 *Dictionnaires et tuples* (*grosso modo*, il s'agit d'une sorte de liste avec des propriétés différentes). Notre fonction pourrait tout autant renvoyer une liste :

Chunk id: 217
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
|
|  __add__(...)
|      x.__add__(y) <==> x+y
|
...
```  
Enfin, pour connaître d'un seul coup d’œil toutes les méthodes ou variables associées à un objet, utilisez la fonction `dir()` :  
```python

Chunk id: 4131
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
### 17.5.5 Analyse de données numériques  
On peut, sans trop de risque, émettre l'hypothèse que plus il y a d'acides
aminés dans la protéine, plus sa masse moléculaire va être élevée.

Chunk id: 2629
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
- [Patrick] « Plus grand. »
- [Pierre]  « Est-ce que ton nombre est plus petit, plus grand ou égal à 87 ? »
- [Patrick] « Plus petit. »

Chunk id: 1976
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
ne pas surcharger le code inutilement. Cela va dans le sens des recommandations des développeurs de Python (comme décrit dans la PEP8).

Chunk id: 3512
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
cela, il faudra récupérer les lignes décrivant la position des gènes. Voici par exemple les cinq premières lignes concernées dans le fichier NC_001133.gbk:

Chunk id: 3828
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
>>> ADN = Seq("ATATCGGCTATAGCATGC")
>>> ADN
Seq('ATATCGGCTATAGCATGC')
```  
Ligne 1. Le module *Biopython* s'appelle `Bio`.  
Obtention de la séquence complémentaire et complémentaire inverse :

Chunk id: 669
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
Ceci le rend inutilisable comme clé de dictionnaire ou, on le verra ci-après, comme élément d'un *set* ou d'un *frozenset*. Donc, à nouveau, ne mettez pas de listes dans vos tuples !

Chunk id: 2343
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Le type n'est pas obligatoire. En dessous, on indique une description du paramètre en question. La description est indentée.

Chunk id: 1208
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
même manière. Rappelez-vous de ceci dans vos futurs programmes car cela pourrait avoir des effets désastreux !

Chunk id: 3154
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- Il est orienté objet. C'est-à-dire qu'il est possible de concevoir en Python des entités qui miment celles du monde réel (une cellule, une protéine, un atome, etc.) avec un certain nombre de règles

Chunk id: 1482
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
(les valeurs par défaut `"jaune"`, `"standard"` et `0` seront donc prises), puis on imprime les attributs.

Chunk id: 4918
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
```
app = MonApplication(arg1, arg2, option1=val1, option2=val2)
```

Chunk id: 2156
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Nous vous recommandons de régulièrement relancer complètement l'exécution de toutes les cellules de votre notebook, de la première à la dernière, en cliquant sur le menu *Kernel* puis *Restart & Run

Chunk id: 1638
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
'titi'
```  
Nous verrons dans la rubrique suivante sur *l'héritage* qu'il est également possible de redéfinir des méthodes d'une classe, c'est-à-dire leur donner une nouvelle définition.

Chunk id: 1414
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
citron2 = Citron(150, couleur="blanc")
print("citron2:", citron2.__dict__)
```  
On a ici un argument positionnel (`masse`) et un autre par mot-clé (`couleur`). Le code donnera la sortie suivante :

Chunk id: 4093
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
que la colonne `Deposit Date` est une date sous la forme
*année-mois-jour*.  
Si le format de date utilisé est homogène sur tout le jeu de données et non ambigu,

Chunk id: 132
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
#Programme principal.
liste_notes = [10, 8, 16, 7, 15]
ajoute_un(liste_notes)
print(liste_notes)
```

Chunk id: 1025
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
En Python, la **déclaration** d'une variable et son **initialisation** (c'est-à-dire la première valeur que l'on va stocker dedans) se font en même temps. Pour vous en convaincre, testez les

Chunk id: 4567
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
fonction particulière suite à ce clic. Notez enfin que nous les avons déjà croisées avec le tri de dictionnaire par valeur (avec une syntaxe `sorted(dico, key=dico.get)`, cf. chapitre 13

Chunk id: 35
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
Oublions la recherche d'efficacité pour l'instant et concentrons-nous sur l'exemple de la fonction mathématique factorielle. Nous vous rappelons que la factorielle s'écrit avec un `!` et se définit

Chunk id: 4028
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
>>> df1.index = ["chat", "singe", "souris"]
>>> df1
Lyon  Paris
chat      10      3
singe     23     15
souris    17     20
```  
et  
```python

Chunk id: 1553
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
trouve pas de nom, il va chercher dans les commandes *internes* à Python (on parle des [*Built-in Functions*](https://docs.python.org/fr/3/library/functions.html comme par exemple `print()`) et des

Chunk id: 658
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
à l'encontre de l'intérêt d'un objet non modifiable. Ainsi, dans la mesure du possible, nous vous déconseillons de créer des listes dans des tuples afin d'éviter les déconvenues.

Chunk id: 2460
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.

Chunk id: 2940
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Pour la suite des explications, nous allons utiliser l'excellent site [*Python Tutor*](http://www.pythontutor.com) qui permet de visualiser l'état des variables au fur et à mesure de l'exécution d'un

Chunk id: 3712
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
En ligne 12, on concatène par ligne (`axis=0`), c'est-à-dire qu'on ajoute les lignes du deuxième *array* `a2` à celles de l'*array* `a1`. En ligne 19, on concatène par colonne (`axis=1`). Attention,

Chunk id: 2983
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
```python
>>> def convert_fahrenheit_to_celsius(temperature):
...     return (temperature - 32) * (5/9)
...
>>> temp_in_fahrenheit = 60
>>> convert_fahrenheit_to_celsius(temp_in_fahrenheit)

Chunk id: 1778
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
"classe Fruit\n")
return (f"Instance {type_fruit}\n"
f"taille: {self.taille}, masse: {self.masse}\n"
f"saveur: {self.saveur}, forme: {self.forme}\n"
f"conseil: {conseil}\n")

Chunk id: 1694
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Lignes 6 à 8. On définit une classe `Fille` qui hérite de la classe `Mere`. Cette classe fille contient une nouvelle méthode `.salut()`.

Chunk id: 3083
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
la longueur de cette liste. L'avant-dernier élément a lui l'indice `-2`, l'avant-avant dernier l'indice `-3`, etc.

Chunk id: 2066
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
des attributs de classe doit se faire par une syntaxe `Citron.attribut = valeur` (et non pas via les instances).

Chunk id: 3902
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
graphe (se déplacer, zoomer, enregistrer comme image, etc.) et qui ressemble à celle de la figure @fig:pltinteractive.

Chunk id: 2404
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Une version améliorée du script précédent est disponible [en ligne](https://python.sdv.univ-paris-diderot.fr/data-files/script_quality_ok.py).

Chunk id: 3123
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
pour stocker de l'information structurée. On verra aussi qu'il existe un module nommé *NumPy* qui permet de créer des listes ou des tableaux de nombres (vecteurs et matrices) et de les manipuler.

Chunk id: 189
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
ainsi utiliser toutes ses fonctions directement, comme par exemple `randint()`  et `uniform()` qui renvoie des nombres aléatoires entiers et *floats*.

Chunk id: 4325
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```python
>>> x = 32
>>> nom = "John"
>>> print(nom, "a", x, "ans", sep="")
Johna32ans
>>> print(nom, "a", x, "ans", sep="-")
John-a-32-ans
```

Chunk id: 3811
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
Enfin, comme nous vous le conseillons depuis le début, soignez bien votre documentation (*docstrings*) ou vos commentaires lorsque vous utilisez des *arrays NumPy*. *NumPy* permettant de réaliser des

Chunk id: 1277
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
peuvent posséder des **attributs** (variables associées aux objets) et des **méthodes** (qui sont des fonctions associées aux objets et qui peuvent agir sur ces derniers ou encore les utiliser).

Chunk id: 41
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
Pas très facile à comprendre, n'est-ce pas ? À nouveau, nous nous aidons de *Python Tutor* pour visualiser ce qui se passe dans la figure @fig:fct-recursive-factorielle (nous vous conseillons bien

Chunk id: 1929
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
donc ici `Citron.masse`, Python nous renverra quelque chose de ce style : `<property object at 0x7fd3615aeef8>`). Qu'est-ce que cela signifie ? Et bien la prochaine fois qu'on voudra accéder au

Chunk id: 151
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1272-passage-de-liste-a-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.2 Passage de liste à une fonction
Content:
entier aléatoire entre -10 et 10 (inclus) à chaque élément. La fonction affichera à l'écran cette nouvelle liste modifiée.

Chunk id: 2849
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
bien particulière. Mais avant de vous présenter la syntaxe et la manière de construire une fonction, revenons une dernière fois sur cette notion de « boîte noire » :

Chunk id: 810
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
Le génome complet est fourni au format FASTA. Vous trouverez des explications sur ce format et des exemples de code dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 1310
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Lignes 6 et 7. Lorsqu'on regarde le type de notre classe `Citron`, Python nous indique qu'il s'agit d'un type au même titre que `type(int)`. Nous avons donc créé un nouveau type !

Chunk id: 4255
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
[...]
#X, Y et Z sont des arrays 1D de n éléments (par exemple X représente tous les x des P de la monocouche upper).

Chunk id: 1170
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1116-sorted
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.6 `sorted()`
Content:
```python
>>> a = [3, 1, 2]
>>> sorted(a, reverse=True)
[3, 2, 1]
>>> a
[3, 1, 2]
```

Chunk id: 4892
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Comme il s'agit de l'instance de notre fenêtre principale à passer à tous nos *widgets*, il faut qu'elle soit visible dans toute la classe. La variable `self.racine` est ainsi créée afin d'être

Chunk id: 2836
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
En programmation, les **fonctions** sont très utiles pour réaliser plusieurs fois la même opération au sein d'un programme. Elles rendent également le code plus lisible et plus clair en le

Chunk id: 1328
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
>>> citron1.__dict__
{'couleur': 'jaune'}
>>> citron2 = Citron()
>>> citron2.__dict__
{}
```  
Si on crée une nouvelle instance de `Citron`, ici `citron2`, elle n'aura pas l'attribut

Chunk id: 539
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
fonction de *casting* comme `int()`, `str()`, etc. Toutefois, l'argument qui lui est passé doit avoir une forme particulière : un objet séquentiel contenant d'autres objets séquentiels de 2 éléments.

Chunk id: 618
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
```python
>>> def ma_fonction():
...     return 1, 2, 3, 4
...
>>> x, _, y, _ = ma_fonction()
>>> x
1
>>> y
3
```

Chunk id: 2104
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1971-classe-rectangle
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.1 Classe `Rectangle`
Content:
Complétez le programme principal pour que le script :  
- crée une instance `rectangle` de la classe `Rectangle` ;
- affiche les attributs d'instance `largeur`, `longueur` et `couleur` ;

Chunk id: 3393
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
, '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__',
'__str__', '__subclasshook__', 'capitalize', 'casefold', 'center',

Chunk id: 3057
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
séparées par des **virgules**, et le tout encadré par des **crochets**. En voici quelques exemples :

Chunk id: 4901
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
une fenêtre Tk (car cela est strictement obligatoire). Dans la suite du programme, cette instance de la fenêtre principale sera `self.racine` et il n'y aura pas de changement par rapport à la version

Chunk id: 4854
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
#### 20.7.2.1 Les variables de contrôle

Chunk id: 4726
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
command=self.dessine_cercles)
self.bouton_cercles.pack(side=tk.TOP)
self.bouton_lignes = tk.Button(self, text="Lignes !",
command=self.dessine_lignes)
self.bouton_lignes.pack()

Chunk id: 2784
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#545-calcul-de-la-moyenne
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.5 Calcul de la moyenne
Content:
### 5.4.5 Calcul de la moyenne

Chunk id: 1934
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
on ne pourra pas détruire cet attribut : un `del c.masse` conduirait à une erreur de ce type : `AttributeError: can't delete attribute`.

Chunk id: 1193
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
```python
>>> seq = "CAAAGGTAACGC"
>>> list(seq)
['C', 'A', 'A', 'A', 'G', 'G', 'T', 'A', 'A', 'C', 'G', 'C']
```

Chunk id: 731
Number of Tokens: 127
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
```python
>>> f1 = frozenset([3, 3, 5, 1, 3, 4, 1, 1, 4, 4])
>>> f2 = frozenset([3, 0, 5, 3, 3, 1, 1, 1, 2, 2])
>>> f1
frozenset({1, 3, 4, 5})
>>> f2
frozenset({0, 1, 2, 3, 5})
>>> f1.add(5)

Chunk id: 785
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
L'objet `collection.Counter()` est particulièrement intéressant et simple à utiliser. Il crée des compteurs à partir d'objets itérables, par exemple :  
```python
>>> import collections

Chunk id: 3896
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
|     4     |         11.8         |
|     6     |         17.5         |
|     7     |         21.3         |
|     9     |         26.8         |

Chunk id: 1574
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
### 19.2.3 Gestion des noms avec les classes

Chunk id: 1578
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
```python
class Citron:
def __init__(self, saveur="acide", couleur="jaune"):
self.saveur = saveur
self.couleur = couleur
print("Dans __init__(), vous venez de créer un citron:",

Chunk id: 2337
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
```python
def multiplie_nombres(nombre1, nombre2):
"""Multiplication de deux nombres entiers.

Chunk id: 1815
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
La fonction Python interne `super()` appelle automatiquement la classe mère sans que vous ayez à donner son nom. Même si cela peut paraître pratique, nous vous conseillons d'utiliser dans un premier

Chunk id: 5007
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
def clic_listbox(self, event):
#Récupération du widget à partir de l'objet event.
widget = event.widget
#Récupération du choix sélectionné dans la listbox (tuple).

Chunk id: 2235
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
ce qui rend explicite la provenance de la fonction. Avec la seconde syntaxe, il faudrait écrire `fonction()` ce qui peut :

Chunk id: 2966
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
\  
- Étape 9 : Python affiche le contenu de la variable `resultat` et l'exécution est terminée.  
![Étape 9.](img/fct_step9.png){ #fig:fct_step9 width=80% }
\

Chunk id: 2646
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Est-ce votre nombre est plus grand, plus petit ou égal à 81 ? [+/-/=] -
Est-ce votre nombre est plus grand, plus petit ou égal à 78 ? [+/-/=] +

Chunk id: 3322
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
>>> s
'Le renard est un animal gentil\nLe poulain aussi'
>>> print(s)
Le renard est un animal gentil
Le poulain aussi
>>> s = "Le {animal} est un animal gentil\nLe {animal2} aussi"
>>> s

Chunk id: 655
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
open-box-adv

Chunk id: 4814
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
le changement de diamètre de la boule ne sera effectif dans le *canvas* que lors de la prochaine exécution de l'instruction `self.canv.coords()` (dans la méthode `.move()`); ii) de même que pour la

Chunk id: 4301
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.3 Statistiques descriptives et table de comptage
Content:
#### 17.6.6.3 Statistiques descriptives et table de comptage  
Déterminez la moyenne et la valeur minimale de la taille et l'âge des individus.  
Comptez ensuite le nombre de personnes de chaque sexe.

Chunk id: 4389
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> print("atom HN") ; print("atom HDE1")
atom HN
atom HDE1
>>> print(f"atom {'HN':>4s}") ; print(f"atom {'HDE1':>4s}")
atom   HN
atom HDE1
```

Chunk id: 2015
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
exemple une classe mère et une classe fille ont chacune un attribut nommé `__attribut`, le *name mangling* permet d'éviter les conflits de nom. Par exemple :

Chunk id: 3170
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
supplémentaires qui sont très utiles en bioinformatique (*NumPy*, *scipy*, *matplotlib*, *pandas*, *Biopython*), mais également Jupyter Lab qui vous permettra d'éditer des *notebooks* Jupyter. Vous

Chunk id: 599
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
l'exemple ci-dessus avec `x, y, z`) et la longueur de chaque sous-*tuple* de la liste sur laquelle on itère (chaque sous-*tuple* a 3 éléments ci-dessus).

Chunk id: 518
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
pas `key=dico.get()`. Une fonction ou méthode passée en argument sans les parenthèses est appelée  *callback*, nous reverrons cela en détail dans le chapitre 20 *Fenêtres graphiques et Tkinter*.

Chunk id: 3271
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
Et pour terminer, une ressource incontournable en langue anglaise :

Chunk id: 2326
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
La PEP 257 recommande d'écrire des *docstrings* avec des triples doubles guillemets, c'est-à-dire  
`"""Ceci est une docstring recommandée."""`  
mais pas

Chunk id: 280
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
close-box-rem

Chunk id: 86
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
L'instruction `pass` dans la fonction est une instruction Python qui ne fait rien. Elle est là car une fonction ne peut être vide et doit contenir au moins une instruction Python valide.

Chunk id: 2146
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
cellule, puis en pressant simultanément les touches *Alt* + *Entrée*. Si vous utilisez cette combinaison de touches, vous remarquerez que le numéro à gauche de la première cellule est passée de `In

Chunk id: 4707
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
pour la définition exacte) ou de la ligne. Ensuite, on passe comme d'habitude des arguments par mot-clé (vous commencez à avoir l'habitude !) pour mettre en forme ces objets graphiques.

Chunk id: 1513
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
À la ligne 9, on détruit finalement l'attribut d'instance `citron1.saveur` qui contenait la valeur `sucrée`. *Python Tutor* nous montre que `citron1.saveur` n'existe pas dans l'espace `Citron

Chunk id: 3638
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
[matrices](https://fr.wikipedia.org/wiki/Matrice_(math%C3%A9matiques)#D%C3%A9finitions), à savoir, **on définit toujours un élément par sa ligne puis par sa colonne**. En mathématiques, l'élément

Chunk id: 384
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
close-box-def  
Une autre propriété importante que l'on a déjà croisée et qui nous servira dans ce chapitre concerne la possiblité ou non de modifier un objet.

Chunk id: 3458
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
Testez cette fonction avec les mots et les séquences suivantes :  
|  Mot      | Séquence       |
|-----------|----------------|
| python    | aophrtkny      |
| python    | aeiouyhpq      |

Chunk id: 2586
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
2. Un nombre est pair lorsque le reste de sa division entière (opérateur modulo `%`) par 2 est nul.  
close-box-rem

Chunk id: 2904
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
TypeError: fois() missing 1 required positional argument: 'y'
```  
On constate que passer un seul argument à une fonction qui en attend deux conduit à une erreur.  
open-box-def

Chunk id: 2108
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1972-classe-rectangle-amelioree
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.2 Classe `Rectangle` améliorée
Content:
### 19.7.2 Classe `Rectangle` améliorée

Chunk id: 2820
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
![Sauts de puce.](img/sauts-de-puce.png "Sauts de puce"){ #fig:saut-de-puce width=50% }

Chunk id: 4503
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Toutefois, il se peut que vous développiez un programme pour une communauté plus large, qui n'a pas forcément l'habitude d'utiliser un *shell* et la ligne de commande. Une GUI permettra un usage plus

Chunk id: 3597
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
>>> b.shape
(10,)
>>> b.resize((2, 3), refcheck=False)
>>> b.shape
(2, 3)
>>> b
array([[0, 1, 2],
[3, 4, 5]])
```  
open-box-warn

Chunk id: 3673
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```text
1   7 310
15  -4  35
78  95  79
```  
La fonction prend en argument le nom du fichier et renvoie un *array* 2D directement :  
```python
>>> np.loadtxt("donnees.dat")

Chunk id: 2390
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
def Multiplie_nombres(nombre1,nombre2 ):
^ (bad-whitespace)
script_quality_not_ok.py:6:38: C0326: No space allowed before bracket
def Multiplie_nombres(nombre1,nombre2 ):
^ (bad-whitespace)

Chunk id: 3323
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
Le poulain aussi
>>> s = "Le {animal} est un animal gentil\nLe {animal2} aussi"
>>> s
'Le {animal} est un animal gentil\nLe {animal2} aussi'
>>> print(s)
Le {animal} est un animal gentil

Chunk id: 2204
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
rapidement » il y a un 1 mois, 6 mois ou un an. Si le code ne fait que quelques lignes, il se peut que vous vous y retrouviez, mais s'il fait plusieurs dizaines voire centaines de lignes, vous serez

Chunk id: 4039
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
L'argument supplémentaire `axis=1` produit le résultat attendu :  
```python
>>> pd.concat([df1, df2], axis=1)
Lyon  Paris  Nantes  Strasbourg
chat    10.0    3.0     3.0         5.0

Chunk id: 1447
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
if __name__ == "__main__":
citron1 = Citron("jaune pâle")
```

Chunk id: 1367
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
d'une méthode spéciale dont le nom est entouré de doubles *underscores* : en effet, elle sert au fonctionnement interne de notre classe, et sauf cas extrêmement rare, elle n'est pas supposée être

Chunk id: 24
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
De manière générale, les variables *locales* d'une fonction ne seront détruites que lorsque l'exécution de celle-ci sera terminée. Dans notre exemple, les variables *locales* de `calc_vals()` ne

Chunk id: 2209
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
Plusieurs choses sont nécessaires pour écrire un code lisible : la syntaxe, l'organisation du code, le découpage en fonctions (et possiblement en classes que nous verrons dans le chapitre 19 *Avoir

Chunk id: 442
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
à décrire et que les listes présentent leurs limites. Les dictionnaires sont des collections non ordonnées d'objets (ceci est vrai jusqu'à la version 3.6 de Python, voir remarque ci-dessous). Il ne

Chunk id: 4990
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
dessiner(point) # un pixel de large
pour i de 0 à 25000:
sommet_tmp <- choisir un sommet du triangle au hasard
point <- calculer(coordonnées(x, y) du centre entre point et sommet_tmp)
dessiner(point)

Chunk id: 4824
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
## 20.7 Pour aller plus loin  
### 20.7.1 D'autres *widgets*

Chunk id: 225
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 's
etstate', 'shuffle', 'uniform', 'vonmisesvariate', 'weibullvariate']
>>>
```

Chunk id: 507
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1326-methode-get
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.6 Méthode `.get()`
Content:
```python
>>> ani2 = {'nom': 'singe', 'poids': 70, 'taille': 1.75}
>>> ani2["age"]
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
KeyError: 'age'
```

Chunk id: 714
Number of Tokens: 129
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> liste_1 = [3, 3, 5, 1, 3, 4, 1, 1, 4, 4]
>>> liste_2 = [3, 0, 5, 3, 3, 1, 1, 1, 2, 2]
>>> set(liste_1) | set(liste_2)
{0, 1, 2, 3, 4, 5}
>>> set(liste_1) & set(liste_2)
{1, 3, 5}
```

Chunk id: 612
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
La syntaxe `x, y = ma_fonction()` permet de récupérer les 2 valeurs renvoyées par la fonction et de les affecter à la volée dans 2 variables différentes. Cela évite l'opération laborieuse de

Chunk id: 4447
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
d'une méthode) a apporté une nette amélioration pour mettre en place l'écriture formatée. Celle-ci fonctionne de la manière suivante :

Chunk id: 291
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
retrouve comme premier élément de cette liste dans `sys.argv[0]`. On peut donc accéder à chacun des arguments du script avec `sys.argv[1]`, `sys.argv[2]`...

Chunk id: 4831
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Scrollbar* : affiche des ascenseurs (horizontaux et verticaux).

Chunk id: 1792
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
de la classe mère sera systématiquement l'instance en cours `self`. Le `print()` en lignes 26-29 illustre qu'après l'appel du constructeur de la classe mère  tous les attributs d'instance

Chunk id: 1195
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
de même, comme lorsqu'on lit un fichier. On rappelle que l'instruction `list(seq)` convertit un objet de type chaîne de caractères en un objet de type liste (il s'agit donc d'une opération de

Chunk id: 784
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
- les [*namedtuples*](https://docs.python.org/fr/3/library/collections.html#collections.namedtuple) que nous évoquerons au chapitre 19 *Avoir la classe avec les objets*.

Chunk id: 1960
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Il existe une autre syntaxe considérée comme plus élégante pour mettre en place les objets *property*. Il s'agit des *décorateurs* `@property`, `@attribut.setter` et `@attribut.deleter`. Toutefois,

Chunk id: 4277
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
de chaque article. Stockez l'année sous forme d'un nombre entier dans la liste `years`. Cette étape peut prendre une dizaine de minutes, soyez patient. Vous pouvez dans votre boucle afficher un

Chunk id: 1743
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
```python
>>> import builtins
>>> dir(builtins)
['ArithmeticError', 'AssertionError', 'AttributeError', [...]
'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', [...]

Chunk id: 578
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
`list()`, c'est-à-dire qu'elle prend en argument un objet de type container et renvoie le tuple correspondant (opération de *casting*) :

Chunk id: 341
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#887-sequences-aleatoires-dadn-avec-argument
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.7 Séquences aléatoires d'ADN avec argument
Content:
Créez un script `dna_random.py` qui prend comme argument un nombre de bases, construit une séquence aléatoire d'ADN dont la longueur est le nombre de bases fourni en argument, puis affiche cette

Chunk id: 4794
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Ligne 58. Ici, on utilise une autre méthode spécifique des objets *Tkinter*. La méthode `.after()` rappelle une autre méthode ou fonction (second argument) après un certain laps de temps (ici 50 ms,

Chunk id: 1672
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
méthode magique `.__call__()` qui mettra à jour les deux attributs d'instance `nbcitrons` et `age` (lignes 5 et 6). Ce code affichera la sortie suivante :

Chunk id: 4962
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
fait de Harisson (avec vidéos !) vous guidera dans la construction d'une GUI complète et complexe avec de nombreuses fonctions avancées (comme par exemple mettre des graphes matplotlib qui se mettent

Chunk id: 3814
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
Le module *NumPy* est la brique de base pour tout ce qui est numérique. Associé aux modules *SciPy* et *matplotlib* (et aussi aux *notebooks Jupyter*, voir le chapitre suivant), il permet de faire de

Chunk id: 2127
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
## 18.2 Lancement de Jupyter et création d'un notebook  
Pour lancer les notebooks Jupyter, utilisez la commande suivante depuis un *shell* :  
```bash
$ jupyter-notebook
```

Chunk id: 4615
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
: à ce moment précis, vous verrez votre label apparaître ainsi que la fenêtre qui se redimensionne automatiquement en s'adaptant à la grandeur de votre *label*. L'invocation de la même méthode pour

Chunk id: 1977
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
close-box-adv  
Les objets *property* ont deux avantages principaux :  
- ils permettent de garder une lisibilité du côté client avec une syntaxe
`instance.attribut` ;

Chunk id: 3264
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
Pour compléter votre apprentissage de Python, n'hésitez pas à consulter d'autres ressources complémentaires à cet ouvrage. D'autres auteurs abordent l'apprentissage de Python d'une autre manière.

Chunk id: 2640
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Votre programme utilisera la fonction `input()` pour interagir avec l'utilisateur. Voici un exemple de son fonctionnement :  
```python
>>> lettre = input("Entrez une lettre : ")

Chunk id: 2531
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
## 6.6 Tests de valeur sur des *floats*  
Lorsque l'on souhaite tester la valeur d'une variable de type *float*, le premier réflexe serait d'utiliser l'opérateur d'égalité comme :  
```python

Chunk id: 4443
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
- Éventuellement pour indiquer le format voulu. Ici `.2` signifie une précision de deux décimales.

Chunk id: 1103
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#26-la-fonction-type
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.6 La fonction `type()`
Content:
```python
>>> x = 2
>>> type(x)
<class 'int'>
>>> y = 2.0
>>> type(y)
<class 'float'>
>>> z = '2'
>>> type(z)
<class 'str'>
```  
Nous verrons plus tard ce que signifie le mot *class*.

Chunk id: 2022
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed* ».

Chunk id: 4560
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
![Exemple de fonction *callback* dans *Python Tutor*.](img/fonction_callback_pythontutor.png "Fonction *callback* dans *Python Tutor*"){ #fig:fonction_callback_pythontutor width=80% }

Chunk id: 3775
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
open-box-def  
Les masques booléens sont des *arrays* de booléens qui sont utilisés en tant qu'« indice » d'un *array* initial. Cela permet de récupérer / modifier une partie de l'*array* initial.

Chunk id: 887
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`{,m}`  
:   Au plus *m* fois le caractère précédent ou l'expression entre parenthèses précédente.

Chunk id: 748
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1352-objects-de-mapping
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.2 Objects de *mapping*
Content:
### 13.5.2 Objects de *mapping*  
| Container             | test d'appartenance et fonction `len()` | itérable | ordonné | indexable | modifiable | hachable |

Chunk id: 3364
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
situés entre des caractères visibles. En réalité, cette méthode enlève n'importe quel combinaison « d'espace(s) blanc(s) » sur les bords, par exemple :

Chunk id: 985
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
*Conseils* :  
- Vous utiliserez des *regex* pour trouver les lignes demandées.

Chunk id: 736
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
etc.) puisqu'ils sont non modifiables. Par contre, ils possèdent toutes les méthodes de comparaisons de *sets* (`.union()`, `.intersection()`, etc.).

Chunk id: 2281
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
'texte très longtigre'
```  
Les parenthèses sont également très pratiques pour répartir sur plusieurs lignes une chaîne de caractères qui sera affichée sur une seule ligne :  
```python

Chunk id: 462
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
```python
>>> ani2["age"] = 15
```  
Pour récupérer la valeur associée à une clé donnée, il suffit d'utiliser la syntaxe suivante `dictionnaire["cle"]`. Par exemple :  
```python
>>> ani1["taille"]

Chunk id: 1421
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
```  
Ligne 3. On crée l'attribut `couleur` que l'on accroche à l'instance avec le `self`.  
Ligne 4. Nous créons cette fois-ci une variable `var` sans l'accrocher au `self`.

Chunk id: 1189
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
Pour cela, il est commode de définir préalablement une liste vide de la forme `ma_liste = []`. Voici un exemple où une chaîne de caractères est convertie en liste :  
```python

Chunk id: 2728
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
## 5.2 Comparaisons

Chunk id: 1424
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
une variable obligatoire, que nous avons à nouveau nommée `self`. Il s'agit encore une fois d'une référence vers l'objet ou instance créé(e). On va voir plus bas ce qu'elle contient exactement.

Chunk id: 641
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
début de ce chapitre nous avons expliqué que lorsqu'on modifiait un élément d'une liste, celle-ci gardait le même identifiant. C'est toujours le cas ici, même si celle-ci se trouve dans un tuple.

Chunk id: 1275
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Une **classe** définit des **objets** qui sont des **instances** (des représentants) de cette classe. Dans ce chapitre on utilisera les mots *objet* ou *instance* pour désigner la même chose. Les

Chunk id: 3444
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1085-distance-de-hamming
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.5 Distance de Hamming
Content:
Calculez la distance de Hamming entre les séquences
`AGWPSGGASAGLAIL` et `IGWPSAGASAGLWIL`
puis entre les séquences
`ATTCATACGTTACGATT` et `ATACTTACGTAACCATT`.

Chunk id: 395
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
de vie de l'objet. Cet identifiant est en général unique pour chaque objet. Toutefois, pour des raisons d'optimisation, Python crée parfois le même identifiant pour deux objets non modifiables

Chunk id: 939
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
### 16.3.4 Groupes

Chunk id: 2952
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
s'exécute et un nouveau cadre est créé dans lequel *Python Tutor* va indiquer toutes les variables *locales* à la fonction. Notez bien que la variable passée en argument, qui s'appelle `x` dans la

Chunk id: 437
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
...
0
1
2
>>> r[2] = 10
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'range' object does not support item assignment
>>> hash(r)
5050907061201647097
```

Chunk id: 3591
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Dans nos exemples précédents, $6 = 2 \times 3 = 3 \times 2$.  
Si les nouvelles dimensions ne sont pas compatibles avec les dimensions initiales, la méthode `.reshape()` génère une erreur.

Chunk id: 1591
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
Ceci est également vrai pour les méthodes. Si par exemple, on a une méthode avec un certain nom, et une fonction du module principal avec le même nom, regardons ce qui se passe :  
```python

Chunk id: 335
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#885-sequences-aleatoires-de-chiffres
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.5 Séquences aléatoires de chiffres
Content:
### 8.8.5 Séquences aléatoires de chiffres  
Générez une séquence aléatoire de 6 chiffres, ceux-ci étant des entiers tirés entre 1 et 4. Utilisez le module *random* avec la fonction `randint()`.

Chunk id: 3859
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
le site PubMed.](img/entrez-transferrin.png "Aperçu de la publication Known and potential roles of transferrin in iron biology"){ #fig:entrez-transferrin width=80% }

Chunk id: 2641
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
```python
>>> lettre = input("Entrez une lettre : ")
Entrez une lettre : P
>>> print(lettre)
P
```  
Pour vous guider, voici ce que donnerait le programme avec la conversation précédente :  
```text

Chunk id: 2591
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
Par exemples, les angles phi et psi d'une conformation en « hélice alpha » parfaite ont une valeur de -57 degrés et -47 degrés respectivement. Bien sûr, il est très rare que l'on trouve ces valeurs

Chunk id: 3548
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
Il est possible de créer un objet *array* à partir d'une liste contenant des entiers et des chaînes de caractères, mais dans ce cas, toutes les valeurs seront comprises par *NumPy* comme des chaînes

Chunk id: 640
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
du tuple ou bien en tant que liste `l1`, on pointe vers **la même liste**. Or, rappelez-vous, au début de ce chapitre nous avons expliqué que lorsqu'on modifiait un élément d'une liste, celle-ci

Chunk id: 710
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
[3, 5, 6, 7, 8, 9]
```  
On peut faire des choses très puissantes. Par exemple, un compteur de lettres en combinaison avec une liste de compréhension, le tout en une ligne !  
```python

Chunk id: 1636
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
sont de type numérique, il fait une addition, si elles sont des chaînes de caractère il fait une concaténation :

Chunk id: 3521
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
[...]
gène  99 direct         ->   611 bases
gène 100 direct         ->   485 bases
gène 101 direct         ->  1403 bases
```

Chunk id: 2804
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
En se basant sur le script précédent, on souhaite réaliser le parcours d'une demi-matrice carrée sans la diagonale. On peut noter que cela produit tous les couples possibles une seule fois (1 et 2

Chunk id: 2490
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
... else:
...     print("Le test est faux !")
...
Le test est faux !
```

Chunk id: 1467
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Au contraire, les attributs d'instance sont spécifiques à chaque instance. Pour en créer, on a vu qu'il suffisait de les initialiser dans la méthode `.__init__()` en utilisant une syntaxe

Chunk id: 2016
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
```python
class Fruit:
def __init__(self):
self.__mass = 100

Chunk id: 907
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
- [pythex.org](https://pythex.org/) : interface simple et efficace, dédiée à Python.

Chunk id: 2115
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1975-autres-exercices
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.5 Autres exercices +++
Content:
### 19.7.5 Autres exercices +++

Chunk id: 763
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
```python
>>> dico = {"a": 10, "g": 10, "t": 11, "c": 15}
>>> dico.items()
dict_items([('a', 10), ('g', 10), ('t', 11), ('c', 15)])
>>> {key:val*2 for key, val in dico.items()}

Chunk id: 4969
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2081-application-de-base
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.1 Application de base
Content:
un boutton quitter. L'heure affichée sera celle au moment du lancement de l'application. Pour « attraper » l'heure, vous pourrez utiliser la fonction `strftime()` du module `time`.

Chunk id: 4998
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
sommets. Pour prendre en main le *widget* *Listbox*, voici un code minimal qui pourra vous aider. Celui-ci contient une `Listbox` et permet d'afficher dans le terminal l'élément sélectionné. Nous

Chunk id: 1897
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
et nous vous dirons comment opérer systématiquement pour accéder, modifier, voire détruire, chaque attribut d'instance de votre classe.

Chunk id: 674
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
contenir qu'une seule copie maximum de chaque élément. Pour créer un nouveau *set* on peut utiliser les accolades :

Chunk id: 4262
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#requete-avec-un-mot-cle
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.1 Requête avec un mot-clé
Content:
cherchez combien d'articles scientifiques sont relatifs à la barstar.  
Effectuez la même chose avec Python et la méthode `Entrez.esearch()` de *Biopython*.

Chunk id: 354
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
En choisissant $N$ points aléatoires (à l'aide d'une distribution uniforme) à l'intérieur du carré, la probabilité que ces points se trouvent aussi dans le cercle est :  
$$

Chunk id: 3516
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
est situé sur le brin direct. Votre code devra récupérer le premier et le second nombre indiquant respectivement la position du début et de fin du gène. Attention à bien les convertir en entier afin

Chunk id: 718
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
{1, 3, 5}
```  
L'instruction `s1.difference(s2)` renvoie sous la forme d'un nouveau *set* les éléments de `s1` qui ne sont pas dans `s2`. Et vice-versa pour `s2.difference(s1)`.  
```python

Chunk id: 497
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
TypeError: 'dict_items' object is not subscriptable
>>> for key, val in dico.items():
...    print(key, val)
...
0 t
1 o
2 t
3 o
```

Chunk id: 3862
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
La variable `res_esummary` n'est pas réellement une liste mais en a plusieurs propriétés.
Cette pseudo-liste n'a qu'un seul élément, qui est lui-même un pseudo-dictionnaire dont voici les clés :
```

Chunk id: 1660
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Ce mécanisme pourra être reproduit avec de très nombreux opérateurs et fonctions de bases de Python. En effet, il existe une multitude de méthodes magiques, en voici quelques unes :

Chunk id: 576
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
```python
>>> (1, 2) + (3, 4)
(1, 2, 3, 4)
>>> (1, 2) * 4
(1, 2, 1, 2, 1, 2, 1, 2)
```

Chunk id: 1069
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
Enfin, vous avez sans doute constaté qu'il est parfois pénible d'écrire des nombres composés de beaucoup de chiffres, par exemple le nombre d'Avogradro $6.02214076 \times 10^{23}$ ou le nombre

Chunk id: 675
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
```python
>>> s = {4, 5, 5, 12}
>>> s
{12, 4, 5}
>>> type(s)
<class 'set'>
```

Chunk id: 703
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
ni indexables, il n'y a pas de méthode pour insérer un élément à une position précise contrairement aux listes. Dernier point sur ces méthodes, elles modifient le *set* sur place (*in place* en

Chunk id: 1150
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#111-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Content:
## 11.1 Méthodes associées aux listes

Chunk id: 2351
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
close-box-warn

Chunk id: 2295
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
### 15.1.7 Commentaires

Chunk id: 2654
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
à tout langage de programmation, les boucles vont nous aider à réaliser cette tâche répétitive de manière compacte et efficace.

Chunk id: 2682
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Même si on peut indenter comme on veut (plusieurs espaces ou plusieurs tabulations, mais pas une combinaison des deux), les développeurs recommandent l'utilisation de quatre espaces. Vous pouvez

Chunk id: 3047
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
x = []
y = []
with open("sin2ori.dat", "r") as f_in:
for line in f_in:
coords = line.split()
x.append(float(coords[0]))
y.append(float(coords[1]))
plt.figure(figsize=(8,8))
plt.plot(x, y)

Chunk id: 4687
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
! Dans la suite du chapitre, nous verrons quelques exemples qui illustrent cela (cf. la rubrique suivante).

Chunk id: 3564
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
encourageons donc à utiliser dorénavant les objets *array* lorsque vous aurez besoin de faire des opérations élément par élément.

Chunk id: 4655
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
la [PEP8](https://www.python.org/dev/peps/pep-0008/), cf. chapitre 15). L'argument passé dans les parenthèses indique que notre classe `Application` hérite de la classe `tk.Tk`. Par ce mécanisme,

Chunk id: 3971
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
de données fournies comme liste de lignes :  
```python
>>> df = pd.DataFrame(columns=["a", "b", "c", "d"],
...                   index=["chat", "singe", "souris"],

Chunk id: 3966
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
### 17.4.2 *Dataframes*  
Un autre type d'objet particulièrement intéressant introduit par *pandas*
sont les *dataframes*. Ceux-ci correspondent à des tableaux à deux dimensions

Chunk id: 3033
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
[...]
Liste 19 : min = 1.05 ; max = 99.36 ; moyenne = 49.43
Liste 20 : min = 1.33 ; max = 97.63 ; moyenne = 46.53

Chunk id: 232
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*random*](https://docs.python.org/fr/3/library/random.html#module-random) : génération de nombres aléatoires.

Chunk id: 3734
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
array([[1.        , 0.        , 0.        ],
[0.        , 0.5       , 0.        ],
[0.        , 0.        , 0.33333333]])
>>> np.linalg.det(a)
6.0
>>> np.linalg.eig(a)

Chunk id: 3036
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
script avec des listes de 1000 éléments, puis 10 000 éléments. Les écarts changent-ils quand le nombre d'éléments par liste augmente ?

Chunk id: 4235
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
3. Parcourez chaque ligne de la matrice, calculez la température moyenne de chaque jour puis stockez-la dans une liste `mean_temps`.

Chunk id: 1476
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
print("Attributs d'instance :", citron1.taille, citron1.couleur,
citron1.masse)
citron1.augmente_masse(100)
print("Attributs d'instance :", citron1.taille, citron1.couleur,
citron1.masse)
```

Chunk id: 3161
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#12-conseils-pour-installer-et-configurer-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Content:
que Python soit installé sur votre ordinateur. La bonne nouvelle est que vous pouvez installer gratuitement Python sur votre machine, que ce soit sous Windows, Mac OS X ou Linux. Nous donnons dans

Chunk id: 4190
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Toutes ces méthodes, enchaînées les unes à la suite des autres, peuvent vous
sembler complexes mais chacune d'elles correspond à une étape particulière

Chunk id: 4701
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
comme options la hauteur et la largeur du *canvas*. Même s'il s'agit d'arguments par mot-clé, donc optionnels, c'est une bonne pratique de les préciser. En effet, les valeurs par défaut risqueraient

Chunk id: 1824
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
la classe mère `Fruit` à nouveau, et nous n'aurions pas à réécrire les mêmes méthodes pour chaque fruit, simplement à les appeler. Par exemple :

Chunk id: 4441
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
```  
La syntaxe est légèrement différente. Le symbole `%` est d'abord appelé dans la chaîne de caractères (dans l'exemple ci-dessus `%d`, `%d` et `%.2f`) pour :

Chunk id: 1598
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
pour la méthode et `affiche_coucou()` pour la fonction. À l'extérieur de la classe, on utilise `instance.affiche_coucou()` pour la méthode et `affiche_coucou()` pour la fonction.

Chunk id: 1495
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
peuvent se modifier sans problème de l'extérieur avec une syntaxe `instance.attribut_d_instance = nouvelle_valeur` et de l'intérieur avec une syntaxe `self.attribut_d_instance = nouvelle_valeur`. Ce

Chunk id: 2280
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
...     return argument_1 + argument_2
...
>>> ma_fonction("texte très long", "tigre",
...             "singe", "souris")
'texte très longtigre'
```

Chunk id: 538
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
La fonction `dict()` va convertir l'argument qui lui est passé en dictionnaire. Il s'agit donc d'une fonction de *casting* comme `int()`, `str()`, etc. Toutefois, l'argument qui lui est passé doit

Chunk id: 3337
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> x.capitalize()
'Girafe'
```  
Il existe une méthode associée aux chaînes de caractères qui est particulièrement pratique, la méthode `.split()` :  
```python

Chunk id: 3508
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
*Conseil :* vous trouverez des explications sur le format PDB et des exemples de code pour lire ce type de fichier en Python dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 4661
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
classique : `racine = tk.Tk()`. Ici, l'effet de l'appel du constructeur de la classe mère permet d'instancier la fenêtre Tk dans la variable `self` directement. C'est-à-dire que la prochaine fois que

Chunk id: 3819
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
- Le livre de Nicolas Rougier [*From Python to Numpy*](https://www.labri.fr/perso/nrougier/from-python-to-numpy/) est une très bonne ressource pour explorer plus en détails les possibilités de

Chunk id: 1512
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
![Illustration avec *Python Tutor* de la non destruction d'un attribut de classe (étape 1).](img/classe_var_instance2.png){ #fig:classe_var_instance2 width=90% }

Chunk id: 3105
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
```python
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
```

Chunk id: 2116
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1975-autres-exercices
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.5 Autres exercices +++
Content:
D'autres exercices plus approfondis sur les classes sont accessibles sur notre [site internet](https://python.sdv.univ-paris-diderot.fr/livre-dunod). N'hésitez pas à aller le visiter.

Chunk id: 176
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
- elle était liée à un objet par un point ;
- en général, elle agissait sur ou utilisait l'objet auquel elle était liée.

Chunk id: 3486
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
Vous avez toutes les informations pour effectuer cet exercice. Si toutefois vous coincez sur la mise en place du drapeau, voici l'algorithme en pseudo-code pour vous aider :  
```text
drapeau <- Faux

Chunk id: 3303
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
'voici une belle f-string'
```  
Que signifie le `f` que l'on accole aux guillements de la chaîne de caractères ? Celui-ci est appelé « préfixe de chaîne de caractères » ou *stringprefix*.

Chunk id: 2787
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#546-produit-de-nombres-consecutifs
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.6 Produit de nombres consécutifs
Content:
Calculez ensuite le produit des nombres consécutifs deux à deux de `entiers` en utilisant une boucle. Exemple pour les premières itérations :  
```text
8
24
48
[...]
```

Chunk id: 4822
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Il existe de nombreux autres événements que l'on peut capturer et lier à des méthodes / fonctions *callback*. Vous trouverez une liste complète

Chunk id: 2499
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
teste la deuxième et ainsi de suite... Le code correspondant à la première condition vérifiée est exécuté puis Python sort du bloc d'instructions du `if`.

Chunk id: 4250
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
- Avec des masques de booléens, récupérez les coordonnées des phosphores de la monocouche du haut dans un *array* 2D `upper`. Faites de même avec la monocouche du bas dans un *array* 2D `lower`.

Chunk id: 4303
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selections-par-filtre
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.5 Sélections par filtre
Content:
#### 17.6.6.5 Sélections par filtre  
Déterminez combien de d'individus mesurent plus de 1,80 m.  
Quelle femme a moins de 35 ans ?

Chunk id: 3399
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
'swapcase', 'title', 'translate', 'upper', 'zfill']
```

Chunk id: 4323
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
« `,` » entre les différents éléments. Python a également ajouté un espace à chaque fois que l'on utilisait le séparateur « `,` ». On peut modifier ce comportement en passant à la fonction `print()`

Chunk id: 330
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#883-nom-et-contenu-du-repertoire-courant
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.3 Nom et contenu du répertoire courant
Content:
Déterminez également le nombre total de fichiers et de répertoires présents dans le répertoire courant.  
Documentation de la fonction `os.getcwd()` :

Chunk id: 4987
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
est une fractale classique. On se propose ici de la dessiner avec un algorithme tiré du [jeu du chaos](https://fr.wikipedia.org/wiki/Jeu_du_chaos). Celui-ci se décompose en pseudo-code de la façon

Chunk id: 301
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
L'intérêt de récupérer des arguments passés dans la ligne de commande à l'appel du script est de pouvoir ensuite les utiliser dans le script.

Chunk id: 3869
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
>>> res_esummary[0]["DOI"]
'10.1007/s10534-012-9520-3'
>>> res_esummary[0]["PubDate"]
'2012 Aug'
>>> res_esummary[0]["Source"]
'Biometals'
```

Chunk id: 4496
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#20-fenetres-graphiques-et-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Content:
19 sur le sujet. Par ailleurs, nous vous conseillons de relire également la rubrique *Arguments positionnels et arguments par mot-clé* du chapitre 9 sur les fonctions.

Chunk id: 1047
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
nombreux autres types (par exemple, les booléens, les nombres complexes, etc.). Si vous n'êtes pas effrayés, vous pouvez vous en rendre compte

Chunk id: 4357
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
type de variable (entiers, chaînes de caractères, *floats*, etc.). Attention toutefois pour les chaînes de caractères, utilisez des guillemets simples au sein des accolades si vous définissez votre

Chunk id: 4865
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
la création du label utiliser l'option `textvariable=` avec votre variable de contrôle (par exemple `tk.Label(..., textvariable=var, ...)`) pour que cela soit fonctionnel.

Chunk id: 3651
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
copie distincte de l'*array* initial, soit la fonction `copy.deepcopy()` comme pour les listes (cf. chapitre 11 *Plus sur les listes*) :

Chunk id: 4420
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#33-ecriture-scientifique
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.3 Écriture scientifique
Content:
```python
>>> print(f"{1_000_000_000:e}")
1.000000e+09
>>> print(f"{0.000_000_001:e}")
1.000000e-09
```

Chunk id: 4858
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
(cf. rubrique précédente) dans un *label*, et que cet affichage se mette à jour au fur et à mesure des mouvements de la baballe, il faudrait utiliser des variables de contrôle. On peut créer de

Chunk id: 3196
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Python est un langage interprété, c'est-à-dire que chaque ligne de code est lue puis interprétée afin d'être exécutée par l'ordinateur. Pour vous en rendre compte, ouvrez un *shell* puis lancez la

Chunk id: 4109
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
la plus petite valeur est 33548.100000 et la plus grande 77067.900000. Pratique !  
La colonne `Source` contient des chaînes de caractères, on peut rapidement

Chunk id: 4642
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
`.mainloop()` y est obligatoire, vous pourrez utiliser au choix `.quit()` ou `.destroy()` pour quitter l'application.

Chunk id: 2680
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
open-box-rem

Chunk id: 233
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*time*](https://docs.python.org/fr/3/library/time.html#module-time) : accès à l'heure de l'ordinateur et aux fonctions gérant le temps.

Chunk id: 2732
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
|      `==`      | égal à                  |
|      `!=`      | différent de            |
|       `>`      | strictement supérieur à |
|      `>=`      | supérieur ou égal à     |

Chunk id: 1394
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
depuis le `self` vers la variable `couleur` (qui se trouve elle-même dans l'espace nommé `Citron instance`). Si d'autres attributs étaient créés, ils seraient tous répertoriés dans cet espace `Citron

Chunk id: 2171
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
Voici un exemple en reprenant un graphique présenté dans le chapitre 17 *Quelques modules d'intérêt en bioinformatique* (figure @fig:jupyter-matplotlib).

Chunk id: 370
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1311-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.1 Définition
Content:
caractères. Même si on ne l'a pas vu explicitement, les objets de type *range* sont également des containers.

Chunk id: 663
Number of Tokens: 105
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
>>> t2 = ("Plouf", 2, (1, 3))
>>> t2
('Plouf', 2, (1, 3))
>>> hash(t2)
286288423668065022
>>> t3 = (1, (3, 4), "Plaf", [3, 4, 5])
>>> t3
(1, (3, 4), 'Plaf', [3, 4, 5])
>>> hash(t3)

Chunk id: 4568
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
le tri de dictionnaire par valeur (avec une syntaxe `sorted(dico, key=dico.get)`, cf. chapitre 13 *Dictionnaires, tuples et sets*) ainsi que les objets `property` (cf. chapitre 19 *Avoir la classe

Chunk id: 517
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
On retrouve la méthode `.get()` vue plus haut, mais sans les parenthèses : `key=dico.get` mais pas `key=dico.get()`. Une fonction ou méthode passée en argument sans les parenthèses est appelée

Chunk id: 4166
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Gallus gallus           1993-09-15   2005-09-28
Homo sapiens            1992-02-10   2018-03-22
Oryctolagus cuniculus   1990-08-16   2001-07-24
Sus scrofa              2001-07-03   2001-07-03
```

Chunk id: 4168
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Chez l'Homme (`Homo sapiens`), la première structure de transferrine a été déposée dans la PDB
le 10 février 1992 et la dernière le 22 mars 2018.

Chunk id: 66
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
```python
>>> def ma_fonction(x):
...     print(f"x vaut {x} dans la fonction")
...
>>> ma_fonction(2)
x vaut 2 dans la fonction
>>> print(x)
Traceback (most recent call last):

Chunk id: 1896
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
pythonique, la classe `property`. Nous allons voir cette nouvelle classe dans la prochaine rubrique et nous vous dirons comment opérer systématiquement pour accéder, modifier, voire détruire, chaque

Chunk id: 3747
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
À chaque itération, la variable `row` est un *array* 1D correspondant à chaque ligne de `a`. Cela est lié au fait que l'utilisation d'un indiçage unique `a[i]` pour un *array* 2D correspond à sa

Chunk id: 2118
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
Les notebooks Jupyter sont des cahiers électroniques qui, dans le même document, peuvent rassembler du texte, des images, des formules mathématiques et du code informatique exécutable. Ils sont

Chunk id: 3552
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> b = np.array([1, 2, 3.5])
>>> b
array([1. , 2. , 3.5])
>>> type(b)
<class 'numpy.ndarray'>
```

Chunk id: 2287
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
...     print(f"ma variable vaut {ma_variable}")
...
ma variable vaut 3
```

Chunk id: 1252
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1163-sequence-dadn-complementaire-inverse
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.3 Séquence d'ADN complémentaire inverse
Content:
Utilisez cette fonction pour transformer la séquence d'ADN `TCTGTTAACCATCCACTTCG` en sa séquence complémentaire inverse.

Chunk id: 2963
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
alloué à la fonction est détruit**. Ainsi, toutes les variables créées dans la fonction n'existent plus. On comprend pourquoi elles portent le nom de *locales* puisqu'elles n'existent que lorsque la

Chunk id: 3787
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
open-box-rem

Chunk id: 582
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
des dictionnaires, des tuples ou d'autres listes, mais aussi des dictionnaires contenant des tuples, des listes, etc. Les combinaisons sont infinies !

Chunk id: 4381
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Enfin, il est possible de préciser sur combien de caractères vous voulez qu'un résultat soit écrit et comment se fait l'alignement (à gauche, à droite ou centré). Dans la portion de code suivante, le

Chunk id: 2059
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
### 19.6.4 Autres bonnes pratiques  
Voici quelques points en vrac auxquels nous vous conseillons de faire attention :

Chunk id: 353
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
Avec $R = 1$, l'aire du carré vaut $(2R)^2$ soit 4 et l'aire du disque délimité par le cercle vaut $\pi R^2$ soit $\pi$.

Chunk id: 3464
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
Créez la fonction `get_alphabet()` qui utilise une boucle et la fonction `chr()` et qui renvoie une chaîne de caractères contenant toutes les lettres de l'alphabet.

Chunk id: 136
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
open-box-adv  
Pour les raisons évoquées ci-dessus, nous vous conseillons de privilégier la première version :  
```python
liste_notes = ajoute_un(liste_notes)
```  
close-box-adv

Chunk id: 521
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
>>> for key in sorted(dico, key=dico.get):
...     print(key, dico[key])
...
b 5
a 15
c 20
```  
Enfin, l'argument `reverse=True` fonctionne également :  
```python

Chunk id: 4651
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
def creer_widgets(self):
self.label = tk.Label(self, text="J'adore Python !")
self.bouton = tk.Button(self, text="Quitter", command=self.quit)
self.label.pack()
self.bouton.pack()

Chunk id: 4680
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Toutefois, si on « étire » la fenêtre à la souris, le titre le deviendra. On pourra noter que cette méthode `.title()` est héritée de la classe mère Tk.

Chunk id: 3280
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
>>> animaux = "girafe tigre"
>>> animaux[0:4]
'gira'
>>> animaux[9:]
'gre'
>>> animaux[:-2]
'girafe tig'
>>> animaux[1:-2:2]
'iaetg'
```

Chunk id: 3221
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
```python
>>> Voici une longue ligne de code \
... décrite sur deux lignes
résultat
```

Chunk id: 1918
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Comment cela fonctionne-t-il concrètement dans un code ? Regardons cet exemple (nous avons mis des `print()` un peu partout pour bien comprendre ce qui se passe) :  
```python
class Citron:

Chunk id: 4715
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
représenter une fonction mathématique (ou tout autre objet dans un repère régi par un repère mathématique), il faudra faire un changement de repère.

Chunk id: 2259
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
#code non recommandé :
ma_variable=3+7
mon_texte="souris"
mon_texte== ma_variable
```  
Il n'y a, par contre, pas d'espace à l'intérieur de crochets, d'accolades et de parenthèses :  
```python

Chunk id: 3319
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
Les caractères spéciaux non interprétés dans les *raw strings* sont de manière générale tout ce dont le *backslash* modifie la signification, par exemple un `\n`, un `\t`, etc.

Chunk id: 1986
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
open-box-warn

Chunk id: 4195
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
```python
>>> date1 = df["Deposit Date"].value_counts()
>>> date2 = date1.resample("A")
>>> date3 = date2.count()
>>> date4 = date3.sort_values(ascending=False)
>>> date4.head()
2001-12-31    5

Chunk id: 2687
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
```  
Dans les exemples ci-dessus, nous avons exécuté une boucle en itérant directement sur une liste. Une tranche d'une liste étant elle même une liste, on peut également itérer dessus :  
```python

Chunk id: 2013
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
la classe en `instance._NomClasse__attribut` à l'extérieur de la classe. Ce mécanisme a été conçu initialement pour pouvoir retrouver des noms d'attributs identiques lors de l'héritage. Si par

Chunk id: 4205
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1762-distance-entre-deux-atomes-carbones-alpha-consecutifs-de-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Content:
89 acides aminés. Sa structure tridimensionnelle, obtenue par cristallographie aux rayons X, se trouve dans la *Protein Data Bank* (PDB) sous le code 1BTA.

Chunk id: 2230
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
disponible en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod). Avant d'écrire la moindre ligne de code, faites en sorte que lorsque vous pressez la touche tabulation, cela ajoute 4

Chunk id: 4565
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
utilise cette construction pour lancer une fonction lors de l'interaction de l'utilisateur avec un *widget* : par exemple, lorsque l'utilisateur clique sur un bouton et qu'on souhaite lancer une

Chunk id: 2740
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
on peut aussi utiliser les opérateurs `<`, `>`, `<=` et `>=`. Dans ce cas, l'ordre alphabétique est pris en compte, par exemple :

Chunk id: 2387
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
L'outil `pylint` va lui aussi vérifier une partie de ces règles mais il va également essayer de comprendre le contexte du code et proposer des éléments d'amélioration. Par exemple :

Chunk id: 3801
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
Utilisez *NumPy* pour :  
- les opérations vectorielles (éléments par éléments) ;

Chunk id: 971
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
retrouver `\1`. Si cela est confus, retenez seulement qu'il faut mettre un `\\` devant le numéro de groupe.

Chunk id: 1398
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
*Python Tutor* nous rappelle qu'elle ne renvoie rien (d'où le `None` dans la case *Return value*) une fois son exécution terminée. Et comme avec les fonctions classiques, l'espace mémoire contenant

Chunk id: 1463
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
### 19.1.8 Différence entre les attributs de classe et d'instance

Chunk id: 3674
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```python
>>> np.loadtxt("donnees.dat")
array([[  1.,   7., 310.],
[ 15.,  -4.,  35.],
[ 78.,  95.,  79.]])
```  
Pratique, non ? Attention toutefois aux points suivants :

Chunk id: 4688
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
## 20.6 Le *widget canvas*  
### 20.6.1 Un *canvas* simple et le système de coordonnées

Chunk id: 2790
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#549-triangle-gauche
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.9 Triangle gauche
Content:
### 5.4.9 Triangle gauche  
Créez un script qui dessine un triangle comme celui-ci :  
```text
*
**
***
****
*****
******
*******
********
*********
**********
```

Chunk id: 2493
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
Dans le code suivant, nous utilisons l'instruction `random.choice(liste)` qui renvoie un élément choisi au hasard dans une liste. L'instruction `import random` sera vue plus tard dans le chapitre 8

Chunk id: 4722
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Le code suivant crée une telle application :  
```python
import tkinter as tk
import random as rd

Chunk id: 1295
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
chapitres précédents, et vous comprendrez sans doute de nombreuses subtilités qui avaient pu vous paraître absconses.

Chunk id: 1207
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
pointent vers la même liste. Donc, si on modifie la liste `x`, la liste `y` est modifiée de la même manière. Rappelez-vous de ceci dans vos futurs programmes car cela pourrait avoir des effets

Chunk id: 2234
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
Si on souhaite ensuite utiliser une fonction d'un module, la première syntaxe conduit à `module.fonction()` ce qui rend explicite la provenance de la fonction. Avec la seconde syntaxe, il faudrait

Chunk id: 4429
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
avec l'opérateur `%` est maintenant clairement déconseillée pour un certain nombre de [raisons](https://docs.python.org/fr/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting).

Chunk id: 332
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#883-nom-et-contenu-du-repertoire-courant
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.3 Nom et contenu du répertoire courant
Content:
Documentation de la fonction `os.listdir()` :  
<https://docs.python.org/fr/3/library/os.html#os.listdir>

Chunk id: 4515
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
sachez que certains logiciels scientifiques ont été développés avec la bibliothèque graphique Tk (par exemple pymol, vmd, etc.). Qui sait, peut-être serez-vous le prochain développeur d'un outil

Chunk id: 4237
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
### 17.6.4 Calcul du centre de masse d'une membrane

Chunk id: 545
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
Si un des sous-éléments a plus de 2 éléments (ou moins), Python renvoie une erreur :  
```python
>>> dict([("girafe", 2), ("singe", 3, 4)])
Traceback (most recent call last):

Chunk id: 4263
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#requete-avec-un-mot-cle
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.1 Requête avec un mot-clé
Content:
Choisissez un des PMID renvoyé et vérifiez dans PubMed que l'article associé est bien à propos de la barstar. Pour cela, indiquez le PMID choisi dans la barre de recherche de PubMed et cliquez sur

Chunk id: 3344
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
close-box-def  
Il est possible de modifier le séparateur de champs, par exemple :  
```python
>>> animaux = "girafe:tigre:singe::souris"
>>> animaux.split(":")

Chunk id: 3371
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
Dans un premier temps, on découpe la chaîne de caractères avec la méthode `.split()` :  
```python
>>> val2 = val.split()
>>> val2
['3.4', '17.2', 'atom']
```

Chunk id: 1783
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
def __str__(self):
print("(1) Je rentre dans la méthode .__str__() de la classe "
"Citron")
print("Je vais lancer la méthode .affiche_conseil() héritée "
"de la classe Fruit")

Chunk id: 4602
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
l'arrêt de l'application si on clique dessus. À nouveau, on passe la fenêtre parente en premier argument, le texte à écrire dans le bouton, puis la couleur de ce texte. Le dernier argument

Chunk id: 2376
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ligne 5. Il manque un espace après l'opérateur `*` à la ligne 26 (colonne 21) du script.  
Ligne 6. Il y a un espace de trop entre `print` et `(` à la ligne 31 (colonne 10) du script.

Chunk id: 3126
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
9
```  
Même si en théorie ces fonctions peuvent prendre en argument une liste de *strings*, on les utilisera la plupart du temps avec des types numériques (liste d'entiers et / ou de *floats*).

Chunk id: 1571
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
est terminée. Un module a donc son propre espace de noms qui est bien distinct de tout programme principal / fonction / méthode appelant un composant de ce module. Enfin, les variables globales

Chunk id: 4837
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Toplevel* : pour créer des fenêtres indépendantes.
- *PanedWindow* : container pour d'autres *widgets*, mais ici l'utilisateur peut réajuster les zones affectées à chaque *widget* fils.

Chunk id: 2857
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
Pour finir sur les généralités, nous avons utilisé dans la Figure @fig:schema_fonction le terme **programme principal** (*main* en anglais) pour désigner l'endroit depuis lequel on appelle une

Chunk id: 3454
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
du mot. Chaque lettre de la séquence ne peut être utilisée qu'une seule fois. Par exemple, « coucou » est composable à partir de « uocuoceokzefhu ».

Chunk id: 2552
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#671-jours-de-la-semaine
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.1 Jours de la semaine
Content:
Constituez une liste `semaine` contenant le nom des sept jours de la semaine.  
En utilisant une boucle, écrivez chaque jour de la semaine ainsi que les messages suivants :

Chunk id: 3086
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
```python
>>> animaux[-4]
'girafe'
```  
Dans ce cas, on utilise plutôt `animaux[0]`.

Chunk id: 3998
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.1 Sélection de colonnes
Content:
#### 17.4.4.1 Sélection de colonnes  
On peut sélectionner une colonne par son étiquette :  
```python
>>> df["Lyon"]
chat      11
singe     21
souris    31
```

Chunk id: 1882
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Vous vous posez sans doute la question : mais dans ce cas, quel est l'intérêt de mettre des *getters* et des *setters* en Python ? La réponse est très simple : cette  stratégie n'est pas une manière

Chunk id: 3118
Number of Tokens: 84
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
```python
>>> enclos1 = ["girafe", 4]
>>> enclos2 = ["tigre", 2]
>>> enclos3 = ["singe", 5]
>>> zoo = [enclos1, enclos2, enclos3]
>>> zoo
[['girafe', 4], ['tigre', 2], ['singe', 5]]
```

Chunk id: 2160
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
Il faut cependant indiquer à Jupyter que cette cellule est au format Markdown en cliquant sur *Code* sous la barre de menu puis en choisissant *Markdown*.

Chunk id: 3080
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
liste          : ["A", "B", "C", "D", "E", "F"]
indice positif :   0    1    2    3    4    5
indice négatif :  -6   -5   -4   -3   -2   -1
```

Chunk id: 2948
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
- Étape 3 : Python lit et met en mémoire la variable `z`. Celle-ci étant créée dans le programme principal, il s'agira d'une variable *globale*. Ainsi, elle sera également stockée dans le *Global

Chunk id: 400
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
```python
>>> a = 4
>>> id(a)
140318876873440
>>> a = 5
>>> id(a)
140318876873472
```

Chunk id: 2251
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
`a2`, `i`, `truc`, `toto`... Les noms de variables à un caractère sont néanmoins autorisés pour les boucles et les indices :

Chunk id: 4057
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Voici un aperçu des premières lignes :  
```python
>>> df.head()
PDB ID              Source Deposit Date  Length       MW
0   1A8E        Homo sapiens   1998-03-24     329  36408.4

Chunk id: 4452
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
- On peut éventuellement préciser le formatage en mettant un caractère deux-points `:` puis par exemple ici `.2f` qui signifie 2 chiffres après la virgule.

Chunk id: 630
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
### 13.3.4 Tuples contenant des listes  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 2521
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
```python
>>> x = 2
>>> y = 2
>>> if x == 2 and y == 2:
...     print("le test est vrai")
...
le test est vrai
```

Chunk id: 2282
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
```python
>>> print("ATGCGTACAGTATCGATAAC"
...       "ATGACTGCTACGATCGGATA"
...       "CGGGTAACGCCATGTACATT")
ATGCGTACAGTATCGATAACATGACTGCTACGATCGGATACGGGTAACGCCATGTACATT
```

Chunk id: 381
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
- **itérable** (*iterable* en anglais) : on peut faire une boucle dessus.  
Certains containers sont appelés objets séquentiels ou séquence.  
open-box-def

Chunk id: 606
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
open-box-rem

Chunk id: 307
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```bash
$ python compte_lignes.py
ERREUR : il faut exactement un argument.
$ python compte_lignes.py zoo1.txt
zoo1.txt contient 4 lignes.
$ python compte_lignes.py zoo2.txt

Chunk id: 1210
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
>>> x[1] = -15
>>> y
[1, 2, 3]
```  
L'instruction `x[:]` a créé une copie « à la volée » de la liste `x`. Vous pouvez utiliser aussi la fonction `list()` qui renvoie explicitement une liste:

Chunk id: 4793
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
de n'importe quel objet dessiné dans le *canvas* (c'est-à-dire que cela déplace l'objet).

Chunk id: 4183
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
(celles où il y a eu le plus de dépôts), on utilisera également la méthode
`.head()` :  
```python
>>> (df["Deposit Date"].value_counts()
...                    .resample("A")

Chunk id: 271
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
se peut que vous ayez des résultats différents selon la version de Python. Néanmoins, vous devriez systématiquement obtenir les mêmes résultats si vous relancez plusieurs fois de suite ces

Chunk id: 4723
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
class AppliCanevas(tk.Tk):
def __init__(self):
tk.Tk.__init__(self)
self.size = 500
self.creer_widgets()

Chunk id: 4284
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
de publications associées à chaque années. Bien évidemment, les listes `x` et `y` doivent avoir la même taille. Au fait, en quelle année la barstar apparaît pour la première fois dans une publication

Chunk id: 1428
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
close-box-warn  
Ligne 7. Cette ligne va afficher le contenu de la variable `self`.

Chunk id: 3654
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
[0, 0]])
>>> b
array([[   0,    0],
[   0, -300]])
>>> c
array([[   0,    0],
[   0, -500]])
```  
La fonction `np.full()` est expliquée dans la rubrique suivante.  
open-box-rem

Chunk id: 302
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Voici à titre d'exemple le script `compte_lignes.py` qui va prendre comme argument le nom d'un fichier puis afficher le nombre de lignes qu'il contient.  
```
import sys

Chunk id: 1989
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
close-box-warn  
Au lieu de ça, on parle en Python d'attributs publics et *non publics*.  
open-box-def

Chunk id: 4826
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Checkbutton* : affiche des cases à cocher.
- *Entry* : demande à l'utilisateur de saisir une valeur / une phrase.

Chunk id: 318
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
La fonction `os.getcwd()` renvoie le répertoire (sous forme de chemin complet) depuis lequel est lancé Python :  
```python
>>> import os
>>> os.getcwd()
'/home/pierre'
```

Chunk id: 557
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
L'affectation et l'indiçage fonctionnent comme avec les listes. Mais si on essaie de modifier un des éléments du tuple (en ligne 10), Python renvoie un message d'erreur. Ce message est similaire à

Chunk id: 1068
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
- Même si on ne met que des entiers à gauche et à droite du symbole `e` (comme dans `1e6`), Python génère systématiquement un *float*.

Chunk id: 278
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
possibles entre 0 et 1. La fonction `random.randint()` tire aussi un entier dans une distribution uniforme. La fonction `random.gauss()` tire quant à elle un *float* aléatoire dans une distribution

Chunk id: 240
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
base dans Python mais qui sont très utilisés en bioinformatique et en analyse de données. Citons-en quelques-uns: *NumPy* (manipulations de vecteurs et de matrices, algèbre linéaire), *Biopython*

Chunk id: 3847
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
```  
La valeur associée à la clé `IdList` est une liste qui contient les identifiants
(PMID) des articles scientifiques associés à la requête (ici `transferrin`) :  
```python

Chunk id: 712
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
>>> [(base, seq.count(base)) for base in set(seq)]
[('c', 15), ('g', 10), ('t', 11), ('a', 10)]
```

Chunk id: 3920
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
plt.grid()
plt.savefig("concentration_vs_temps.png", bbox_inches='tight', dpi=200)
```
Le résultat est représenté sur la figure @fig:conc-vs-tps.

Chunk id: 1128
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
on passe un (ou plusieurs) argument(s), qui effectue une action et qui peut renvoyer un résultat ou plus généralement un objet. Par exemple, la fonction `type()` renvoie le type de la variable qu'on

Chunk id: 3063
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#42-utilisation
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.2 Utilisation
Content:
indice :        0        1        2         3
```  
Soyez très **attentif** au fait que les indices d'une liste de *n* éléments commencent à *0* et se terminent à *n-1*. Voyez l'exemple suivant :

Chunk id: 2798
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
Pour une matrice de dimensions 2 $\times$ 2, le schéma de la figure @fig:parcoursmatrice vous indique comment parcourir une telle matrice. L'affichage attendu est :  
```text
ligne colonne
1    1

Chunk id: 917
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
>>> if re.search("tigre", animaux):
...     print("OK")
...
OK
```  
open-box-warn

Chunk id: 2172
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
![Incorporation d'un graphique dans un notebook Jupyter.](img/jupyter-matplotlib.png "Incorporation d'un graphique dans un notebook Jupyter."){ #fig:jupyter-matplotlib width=80% }

Chunk id: 3622
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
>>> a = np.resize(l, (4, 2))
>>> a
array([[2, 7],
[6, 4],
[0, 3],
[1, 5]])
>>> a.max()
7
```

Chunk id: 4821
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
"Exemple de canvas animé"){ #fig:canvas_anime width=80% }

Chunk id: 4746
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
suite. Vous pourrez noter ici l'avantage de programmer avec une classe, le *canvas* est directement accessible dans n'importe quelle méthode de la classe avec `self.canv` (pas besoin de le passer en

Chunk id: 2899
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
## 9.5 Arguments positionnels et arguments par mot-clé

Chunk id: 4790
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Ligne 38. La méthode `.move()` est appelée, ainsi l'animation démarrera dès l'exécution du constructeur, donc peu après l'instanciation de notre application (Ligne 86).

Chunk id: 3799
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
puissance. On pourrait au premier abord être tenté d'abandonner les listes, toutefois elles gardent toute leur importance. Alors quand utiliser les listes ou quand utiliser les *arrays NumPy* ? Voici

Chunk id: 4418
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#33-ecriture-scientifique
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.3 Écriture scientifique
Content:
## 3.3 Écriture scientifique

Chunk id: 4700
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
de la fenêtre principale en tant qu'argument positionnel, puis les options. Notons que nous lui passons comme options la hauteur et la largeur du *canvas*. Même s'il s'agit d'arguments par mot-clé,

Chunk id: 4628
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Ligne 9. L'instruction `racine.mainloop()` va lancer le gestionnaire d'événements que nous avons évoqué ci-dessus. C'est lui qui interceptera la moindre action de l'utilisateur, et qui lancera les

Chunk id: 1444
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
méthodes d'une classe. Le `self` est également nécessaire pour appeler une méthode de la classe depuis une autre méthode :

Chunk id: 2581
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
nombres de la suite de Syracuse. Avec différents points de départ (c'est-à-dire avec différentes valeurs de *n*), la conjecture de Syracuse est-elle toujours vérifiée ? Quels sont les nombres qui

Chunk id: 1475
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
if __name__ == "__main__":
citron1 = Citron()
print("Attributs de classe :", citron1.forme, citron1.saveur)
print("Attributs d'instance :", citron1.taille, citron1.couleur,
citron1.masse)

Chunk id: 1616
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
cas, avec l'apparition d'un nouveau mot-clé nommé `nonlocal`. Toutefois ces aspects vont au-delà du présent ouvrage. Pour plus d'informations sur les fonctions imbriquées et la directive `nonlocal`,

Chunk id: 4659
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 5. On appelle ici le constructeur de la classe mère `tk.Tk.__init__()`. Pourquoi fait-on cela ? On se souvient dans la version linéaire de l'application, on avait utilisé une instanciation

Chunk id: 2177
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
## 18.5 Les *magic commands*  
La commande précédente (`%matplotlib inline`) est une *magic command*. Il en existe beaucoup, en voici deux :

Chunk id: 3882
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
l iron overload attributed to deficiency in hepcidin, a peptide hor
mone synthesized largely by the liver that inhibits dietary iron ab

Chunk id: 3189
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#14-introduction-au-shell
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.4 Introduction au *shell*
Content:
## 1.4 Introduction au *shell*  
Un *shell* est un interpréteur de commandes interactif permettant d'interagir avec l'ordinateur. On utilisera le *shell* pour lancer l'interpréteur Python.

Chunk id: 728
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
des *frozensets* mais pas l'inverse. A quoi servent-ils ? Comme la différence entre tuple et liste, l'immutabilité des *frozensets* donne l'assurance de ne pas pouvoir les modifier par erreur. Pour

Chunk id: 29
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
une autre fonction, cette dernière peut appeler une autre fonction et ainsi de suite (et autant de fois qu'on le veut). Une fonction peut même s'appeler elle-même, cela s'appelle une fonction

Chunk id: 2758
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
Une boucle `while` nécessite généralement **trois éléments** pour fonctionner correctement :  
1. Initialisation de la variable d'itération avant la boucle (ligne 1).

Chunk id: 3230
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Le gros avantage de ce type de langage est qu'on peut immédiatement tester une commande à l'aide de l'interpréteur, ce qui est très utile pour débugger (c'est-à-dire trouver et corriger les

Chunk id: 889
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`(CG|TT)`  
:   Les chaînes de caractères `CG` ou `TT`.  
Exemple : la *regex* `A(CG|TT)C` est retrouvée dans `ACGC` ou `ATTC`.

Chunk id: 320
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
```python
>>> import os
>>> os.listdir()
['1BTA.pdb', 'demo.py', 'tests']
```  
Le résultat est renvoyé sous forme d'une liste contenant à la fois le nom des fichiers et des répertoires.

Chunk id: 4446
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
Depuis la version 2.7 de Python, la méthode `.format()` (voir la rubrique suivante pour la définition d'une méthode) a apporté une nette amélioration pour mettre en place l'écriture formatée.

Chunk id: 4233
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
2. Récupérez les valeurs de températures depuis le fichier et mettez-les dans un *array* 2D. La fonction [`np.loadtxt()`](https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html) et son

Chunk id: 1979
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
à certains attributs avec des objets *property*, cela ne changera rien du côté client. Ce dernier utilisera toujours `instance.attribut` ou

Chunk id: 1073
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
```python
>>> avogadro_number = 6.022_140_76e23
>>> print(avogadro_number)
6.02214076e+23
>>> humans_on_earth = 7_807_568_245
>>> print(humans_on_earth)
7807568245
```

Chunk id: 1753
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
déjà tout une panoplie de méthodes héritées de la classe `object`. Regardez l'exemple suivant :

Chunk id: 2810
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
```text
ligne colonne
1    2
1    3
1    4
2    3
2    4
3    4
Pour une matrice 4x4, on a parcouru 6 cases
```  
Testez votre script avec `N=3`, puis `N=4` et enfin `N=5`.

Chunk id: 3164
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#121-python-2-ou-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.1 Python 2 ou Python 3 ?
Content:
### 1.2.1 Python 2 ou Python 3 ?  
Ce cours est basé sur la **version 3 de Python**, qui est désormais le standard.

Chunk id: 2465
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.

Chunk id: 339
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#886-sequences-aleatoires-dadn
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.6 Séquences aléatoires d'ADN
Content:
Documentation de la fonction `random.choice()` :  
<https://docs.python.org/fr/3/library/random.html#random.choice>

Chunk id: 2359
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
être des erreurs de style (PEP 8 et 257) ou des erreurs logiques (manipulation d'une variable, chargement de module).

Chunk id: 2677
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
```python
for animal in animaux:
print(animal)
print(animal*2)
print("C'est fini")
```

Chunk id: 4280
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
Calculez maintenant le nombre de publications par année. Vous créerez pour cela un dictionnaire `freq` qui aura pour clé les années (oui, une clé de dictionnaire peut aussi être un entier) et pour

Chunk id: 1376
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
close-box-rem

Chunk id: 2950
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 3.](img/fct_step3.png){ #fig:fct_step3 width=80% }
\

Chunk id: 4252
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
- Une fois tout cela effectué, créez un graphique 3D pour représenter les différents centres de masse. Vous pourrez utiliser la fonction `scatter()` du module *matplotlib*. Pour l'[affichage en

Chunk id: 4259
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1765-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Content:
L'objectif de cet exercice est d'interroger automatiquement la base de données
bibliographique PubMed pour déterminer le nombre d'articles relatifs à la barstar
publiés chaque année.

Chunk id: 1075
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
```python
>>> print(7_80_7568_24_5)
7807568245
```

Chunk id: 72
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
File "<stdin>", line 1, in <module>
File "<stdin>", line 2, in fct
UnboundLocalError: local variable 'x' referenced before assignment
```

Chunk id: 27
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
au programme principal. Enfin, notez bien que la fonction `calc_vals()` appelle la fonction `polynome()` à chaque itération de la boucle.

Chunk id: 2458
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
```text
>>> import this
The Zen of Python, by Tim Peters

Chunk id: 4743
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Lignes 30 à 40. On définit deux méthodes qui vont dessiner des paquets de 20 cercles (cas spécial d'une ellipse) ou 20 lignes aléatoires. Lors de la création de ces cercles et lignes, on ne les

Chunk id: 1092
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
Vous observez que les opérateurs `+` et `*` se comportent différemment s'il s'agit d'entiers ou de chaînes de caractères : `2 + 2` est une addition alors que `"2" + "2"` est une concaténation. On

Chunk id: 3962
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
```python
>>> s[[1, 3]]
b    20
d    40
dtype: int64
>>> s[["b", "d"]]
b    20
d    40
dtype: int64
```  
Les étiquettes permettent de modifier et d'ajouter des éléments :  
```python

Chunk id: 2571
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#676-nombres-pairs
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.6 Nombres pairs
Content:
Pour cet exercice, vous pourrez utiliser l'opérateur modulo `%`  qui renvoie le reste de la division entière entre deux nombres et dont voici quelques exemples d'utilisation :  
```python
>>> 4 % 3
1

Chunk id: 620
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
`_` ». Notez que l'on peut utiliser une ou plusieurs variables *underscores(s)*. Dans l'exemple ci-dessus, la 2e et la 4e variable renvoyées par la fonction seront ignorées dans la suite du code.

Chunk id: 699
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
La méthode `.add()` ajoute au *set* l'élément passé en argument. Toutefois, si l'élément est déjà présent dans le *set*, il n'est pas ajouté puisqu'on a au plus une copie de chaque élément. La

Chunk id: 3721
Number of Tokens: 87
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
```python
>>> a = np.resize(np.arange(1, 10), (3, 3))
>>> a
array([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
>>> np.transpose(a)
array([[1, 4, 7],
[2, 5, 8],
[3, 6, 9]])
```

Chunk id: 4492
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#365-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.5 Écriture formatée 2
Content:
forme arrondie en utilisant l'écriture formatée et les *f-strings*. On souhaite que le programme affiche la sortie suivante :

Chunk id: 3656
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
que soit sa dimensionnalité. Ceci n'était pas le cas avec la fonction `list()` pour les copies de listes à partir de la dimensionnalité 2 :

Chunk id: 2415
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
def __init__(self):
"""Résumé de la docstring décrivant le constructeur.

Description détaillée ligne 1
Description détaillée ligne 2
Description détaillée ligne 3
"""
[...]

Chunk id: 48
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
1` sera exécutée. À ce moment précis de l'exécution, les appels successifs forment une sorte de *pile* (voir la figure @fig:fct-recursive-factorielle). La valeur 1 sera ainsi renvoyée au niveau de

Chunk id: 2911
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> def fct(x=1):
...     return x
...
>>> fct()
1
>>> fct(10)
10
```  
open-box-def

Chunk id: 179
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Avec les modules, nous rencontrons une syntaxe similaire. Par exemple, dans l'instruction `math.cos()`, on pourrait penser que `.cos()` est aussi une méthode. En fait la [documentation officielle de

Chunk id: 4578
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
```python
>>> import tkinter as tk
>>> racine = tk.Tk()
>>> label = tk.Label(racine, text="J'adore Python !")
>>> bouton = tk.Button(racine, text="Quitter", fg="red",

Chunk id: 1067
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
- `1e6` ou `3.12e-3` n'implique pas l'utilisation du nombre exponentiel *e* mais signifie $1 \times 10^{6}$ ou $3.12 \times 10^{-3}$ respectivement ;

Chunk id: 3362
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
>>> chaine = "  Comment enlever les espaces au début et à la fin ?       "
>>> chaine.strip()
'Comment enlever les espaces au début et à la fin ?'
```

Chunk id: 4510
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Au delà de l'aspect convivial pour l'utilisateur, vous pourrez, avec une GUI, construire des fenêtres illustrant des éléments que votre programme génère à la volée. Ainsi, vous « verrez » ce qui se

Chunk id: 1044
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
Le **type** d'une variable correspond à la nature de celle-ci. Les trois principaux types dont nous aurons besoin dans un premier temps sont les entiers (*integer* ou *int*), les nombres décimaux que

Chunk id: 4236
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
4. À l'aide des deux listes `days` et `mean_temps`, déterminez et affichez le jour le plus chaud.

Chunk id: 1887
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Imaginons que l'on ait une instance nommée `obj` et que l'on souhaite faire la somme de ses trois attributs `x`, `y` et `z` :

Chunk id: 2219
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#151-de-la-bonne-syntaxe-avec-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Content:
La PEP 8 [*Style Guide for Python Code*](https://www.python.org/dev/peps/pep-0008/) est une des plus anciennes PEP (les numéros sont croissants avec le temps). Elle consiste en un nombre important de

Chunk id: 3963
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
dtype: int64
```  
Les étiquettes permettent de modifier et d'ajouter des éléments :  
```python
>>> s["c"] = 300
>>> s["z"] = 50
>>> s
a     10
b     20
c    300
d     40
z     50
dtype: int64
```

Chunk id: 275
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
de probablités utilisée par la fonction. Par exemple, La fonction de base du module random est `random.random()`, elle renvoie un *float* aléatoire entre 0 et 1 tiré dans une **distribution

Chunk id: 2751
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
petite est celle qui présente le caractère ayant le plus petit code ASCII (les caractères suivants de la chaîne de caractères sont ignorés dans la comparaison), comme dans l'exemple `"abb" < "ada"`

Chunk id: 1740
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
[...]
```  
L'aide nous montre que `Citron` a hérité de `builtins.object` bien que nous ne l'ayons pas déclaré explicitement. Cela se fait donc de manière implicite.  
open-box-rem

Chunk id: 3279
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
'a'
```  
Nous pouvons donc utiliser certaines propriétés des listes comme les tranches :  
```python
>>> animaux = "girafe tigre"
>>> animaux[0:4]
'gira'
>>> animaux[9:]
'gre'
>>> animaux[:-2]

Chunk id: 2645
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Est-ce votre nombre est plus grand, plus petit ou égal à 87 ? [+/-/=] -
Est-ce votre nombre est plus grand, plus petit ou égal à 81 ? [+/-/=] -

Chunk id: 4663
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
besoin de cette instance (lors de la création des *widgets* par exemple, cf. lignes 9 et 10), on utilisera directement `self` plutôt que `racine` ou tout autre nom donné à l'instance. Comme vu dans

Chunk id: 1144
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2113-predire-le-resultat-operations-et-conversions-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.3 Prédire le résultat : opérations et conversions de types
Content:
### 2.11.3 Prédire le résultat : opérations et conversions de types  
Essayez de prédire le résultat de chacune des instructions suivantes, puis vérifiez-le dans l'interpréteur Python :

Chunk id: 4882
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
```python
import tkinter as tk

Chunk id: 2783
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#544-nombres-pairs-et-impairs
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.4 Nombres pairs et impairs
Content:
qui, à partir de la liste `impairs`, construit une liste `pairs` dans laquelle tous les éléments de `impairs` sont incrémentés de 1.

Chunk id: 1643
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
destinées à changer le comportement de fonctions ou opérateurs internes à Python avec les instances d'une classe que l'on a créée.

Chunk id: 3213
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
```python
>>> 1+1
2
>>> 6*3
18
```

Chunk id: 2223
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
### 15.1.1 Indentation

Chunk id: 3065
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#42-utilisation
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.2 Utilisation
Content:
>>> animaux[0]
'girafe'
>>> animaux[1]
'tigre'
>>> animaux[3]
'souris'
```  
Par conséquent, si on appelle l'élément d'indice 4 de notre liste, Python renverra un message d'erreur :  
```python

Chunk id: 4928
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
Pour autant, cela fonctionne et on voit un bouton apparaître ! En fait, *Tkinter* va automatiquement instancier la fenêtre principale, si bien qu'il n'est pas obligatoire de passer cette instance en

Chunk id: 1703
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
overriding*), tout comme on parlait de *redéfinition des opérateurs* un peu plus haut. C'est le même mécanisme, car la redéfinition des opérateurs revient finalement à redéfinir une méthode magique

Chunk id: 1014
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1645-le-defi-du-de-htmliseur-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.5 Le défi du dé-htmliseur (exercice +++)
Content:
Créez un script `dehtmliseur.py` qui lit le fichier [`fichier_a_dehtmliser.html`](https://python.sdv.univ-paris-diderot.fr/data-files/fichier_a_dehtmliser.html) au format HTML et qui renvoie à

Chunk id: 4193
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
`df["Deposit Date"]` et ligne 5, juste après `head()`) permet de répartir élégamment
cette longue instruction sur plusieurs lignes.  
Bien sûr, on aurait pu créer des variables intermédiaires

Chunk id: 43
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
![Fonction récursive : factorielle.](img/fct_recursive_factorielle.png){ #fig:fct-recursive-factorielle width=90% }

Chunk id: 4425
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
la version 2.7 jusqu'à la 3.5 il était plutôt conseillé d'utiliser la méthode `.format()` (voir la rubrique suivante pour la définition du mot « méthode »). Même si les *f-strings* sont devenues la

Chunk id: 2901
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
Que se passe-t-il si une fonction attend deux arguments et que nous ne lui en passons qu'un seul ?

Chunk id: 2602
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
Pour en savoir plus sur le monde merveilleux des protéines, n'hésitez pas à consulter la page Wikipedia sur la [structure secondaire des

Chunk id: 3340
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
souris
```  
La méthode `.split()` découpe une chaîne de caractères en plusieurs éléments appelés *champs*, en utilisant comme séparateur n'importe quelle combinaison « d'espace(s) blanc(s) ».

Chunk id: 4645
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
De manière générale, il est vivement conseillé de développer ses applications *Tkinter* en utilisant une classe. Cela présente l'avantage d'encapsuler l'application de manière efficace et d'éviter

Chunk id: 4152
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```python
>>> from scipy.stats import linregress
>>> lr = linregress(dfz["Length"], dfz["MW"])
>>> lr
LinregressResult(slope=116.18244897959184, intercept=-1871.6131972789153,

Chunk id: 4084
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
2   Length        41 non-null     int64
3   MW            41 non-null     float64
dtypes: float64(1), int64(1), object(2)
memory usage: 1.6+ KB
```

Chunk id: 1120
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
le mot **objet** pour désigner une variable. Par exemple, « une variable de type entier » sera pour nous équivalent à « un objet de type entier ». Nous verrons dans le chapitre 19 *Avoir la classe

Chunk id: 1816
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
son nom. Même si cela peut paraître pratique, nous vous conseillons d'utiliser dans un premier temps la syntaxe

Chunk id: 3171
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
*Biopython*), mais également Jupyter Lab qui vous permettra d'éditer des *notebooks* Jupyter. Vous trouverez en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod) une documentation

Chunk id: 3707
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
`np.concatenate()` prend un argument optionnel, à savoir `axis`. Comme nous l'avions expliqué plus haut, celui-ci va indiquer à *NumPy* si on veut concaténer le long de l'axe 0 (les lignes) ou le

Chunk id: 865
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
close-box-rem  
Après avoir introduit le vocabulaire des *regex*, voici quelques éléments de syntaxe des métacaractères :  
`^`  
:   Début de chaîne de caractères ou de ligne.

Chunk id: 1337
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
### 19.1.3 Les attributs de classe  
Si on ajoute une variable dans une classe comme on créait une variable locale dans une fonction, on crée ce qu'on appelle un attribut de classe :  
```python

Chunk id: 3830
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
Seq('TATAGCCGATATCGTACG')
>>> ADN.reverse_complement()
Seq('GCATGCTATAGCCGATAT')
```  
Traduction en séquence protéique :  
```python
>>> ADN.translate()
Seq('ISAIAC')
```

Chunk id: 3471
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
- Monsieur Jack vous dactylographiez bien mieux que votre ami Wolf
- Buvez de ce whisky que le patron juge fameux

Chunk id: 2341
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
```  
Lignes 6 et 7. La section `Parameters` précise les paramètres de la fonction. Les tirets sur la ligne 7 permettent de souligner le nom de la section et donc de la rendre visible.

Chunk id: 3194
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#14-introduction-au-shell
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.4 Introduction au *shell*
Content:
Par exemple, si on vous demande de lancer l'instruction suivante :  
`$ python`  
il faudra taper seulement `python` sans le `$` ni l'espace après le `$`.

Chunk id: 3824
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#172-module-biopython
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Content:
## 17.2 Module *Biopython*  
Le module [*Biopython*](http://biopython.org/) propose des fonctionnalités très utiles en bioinformatique.

Chunk id: 4733
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Lignes 4 à 6. Comme montré dans la rubrique *Construire une application Tkinter avec une classe*, notre classe `AppliCanevas` hérite de la classe générale `tk.Tk` et la fenêtre Tk se retrouve dans la

Chunk id: 508
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1326-methode-get
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.6 Méthode `.get()`
Content:
KeyError: 'age'
```  
La méthode `.get()` s'affranchit de ce problème. Elle extrait la valeur associée à une clé mais ne renvoie pas d'erreur si la clé n'existe pas :  
```python
>>> ani2.get("nom")

Chunk id: 2316
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
modules*. À nouveau, les développeurs de Python ont émis des recommandations dans la PEP 8 et plus exhaustivement dans la [PEP 257](https://www.python.org/dev/peps/pep-0257/) sur la manière de

Chunk id: 2322
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
```python
"""Docstring de plusieurs lignes, la première ligne est un résumé.

Chunk id: 4123
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
plus complexe mais aussi beaucoup plus puissante :  
```python
>>> df.pivot_table(index="Source", values=["Length", "MW"], aggfunc=[min, max])
min             max
Length       MW Length       MW

Chunk id: 2694
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
```python
>>> for i in range(4):
...     print(i)
...
0
1
2
3
```  
Dans cet exemple, nous pouvons faire plusieurs remarques importantes :

Chunk id: 2862
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
programme principal. Nous aurons l'occasion de revenir sur cette notion de programme principal plus tard dans ce chapitre ainsi que dans le chapitre 12 *Plus sur les fonctions*.

Chunk id: 577
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
Enfin, on peut utiliser la fonction `tuple(sequence)` qui fonctionne exactement comme la fonction `list()`, c'est-à-dire qu'elle prend en argument un objet de type container et renvoie le tuple

Chunk id: 4937
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
crée de grosses applications graphiques (où on utilise souvent des *widgets* parents contenant d'autres *widgets* enfants). Une autre source d'information sur les *widgets* se trouvent dans les

Chunk id: 177
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Par exemple, la méthode `.format()` (vue au chapitre 3) dans l'instruction `"{}".format(3.14)` utilise l'objet chaîne de caractères `"{}"` (auquel elle est liée) pour finalement renvoyer une autre

Chunk id: 3892
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
### 17.3.1 Représentation sous forme de points

Chunk id: 1190
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
```python
>>> seq = "CAAAGGTAACGC"
>>> seq_list = []
>>> seq_list
[]
>>> for base in seq:
...   seq_list.append(base)
...
>>> seq_list
['C', 'A', 'A', 'A', 'G', 'G', 'T', 'A', 'A', 'C', 'G', 'C']

Chunk id: 4359
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
### 3.2.3 Spécification de format  
Les *f-strings* permettent de remplacer des variables au sein d'une chaîne de caractères. On peut également spécifier le format de leur affichage.

Chunk id: 2050
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Notez que si on instancie la classe `citron1 = Citron()` et qu'on invoque l'aide sur l'instance `help(citron1)`, on obtient la même page d'aide. Comme pour les modules, si on invoque l'aide pour une

Chunk id: 4364
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> prop_GC = (4500 + 2575) / 14800
>>> print("La proportion de GC est", prop_GC)
La proportion de GC est 0.4780405405405405
```

Chunk id: 796
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
Créez une fonction `compte_mots_2_lettres()` qui prend comme argument une séquence sous la forme d'une chaîne de caractères et qui renvoie tous les mots de 2 lettres qui existent dans la séquence

Chunk id: 2364
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Avec une description plus longue.
Sur plusieurs lignes.

Returns
-------
int
Le produit des deux nombres.

"""
return nombre1 *nombre2

Chunk id: 2134
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
La première chose à faire est de donner un nom à votre notebook en cliquant sur *Untitled*, à droite du logo de Jupyter. Si le nom de votre notebook est *test* alors le fichier *test.ipynb* sera créé

Chunk id: 1821
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
open-box-adv  
Pour les deux raisons citées ci-dessus, nous vous conseillons de systématiquement utiliser le constructeur de la classe mère lors de l'instanciation.  
close-box-adv

Chunk id: 4702
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
optionnels, c'est une bonne pratique de les préciser. En effet, les valeurs par défaut risqueraient de nous mener à dessiner hors de la zone visible (cela ne génère pas d'erreur mais n'a guère

Chunk id: 3532
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
Miniconda que nous vous avons conseillé d'utiliser (consultez pour cela la documentation en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod)), vous pouvez rapidement les installer avec

Chunk id: 1955
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Coucou je suis dans le get
La masse de notre citron est 100 g
Coucou je suis dans le set
Coucou je suis dans le get
La masse de notre citron est 25 g
{'_masse': 25}
```

Chunk id: 492
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
*Conseil* : pour les débutants, vous pouvez sauter cette fin de rubrique.  
Enfin, il existe la méthode `.items()` qui renvoie un nouvel objet `dict_items` :  
```python

Chunk id: 2164
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
![Notebook avec une cellule au format Markdown.](img/jupyter-markdown-1.png "Notebook avec une cellule au format Markdown."){ #fig:jupyter-markdown-1 width=80% }

Chunk id: 4156
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```python
>>> plt.clf()
>>> plt.scatter(dfz["Length"], dfz["MW"])
<matplotlib.collections.PathCollection object at 0x7f85b97bfef0>

Chunk id: 2841
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
1. À laquelle vous passez aucune, une ou plusieurs variable(s) entre parenthèses. Ces variables sont appelées **arguments**. Il peut s'agir de n'importe quel type d'objet Python.

Chunk id: 4605
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
que l'instance de la fenêtre mère `tk.Tk` (que nous avons nommée `racine`) possède une méthode `.destroy()` qui va détruire le *widget* sur lequel elle s'applique. Comme on tue la fenêtre principale

Chunk id: 174
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
Dans le chapitre 3 *Affichage*, nous avons introduit la syntaxe `truc.bidule()` avec `truc` étant un objet et `.bidule()` une méthode. Nous vous avions expliqué qu'une *méthode* était une fonction un

Chunk id: 4063
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
- la date à laquelle cette structure a été déposée dans la *Protein Data Bank* (`Deposit Date`) ;
- le nombre d'acides aminés qui constituent la protéine (`Length`) ;

Chunk id: 3929
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
et en ordonnées des points à représenter. On indique ensuite des arguments facultatifs comme le style de la ligne (`ls`) et sa couleur (`color`).

Chunk id: 2270
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
ma_liste[::2]
#code non recommandé :
ma_liste[1 : 3]
ma_liste[1: 4:2 ]
ma_liste[ : :2]
```  
Enfin, on n'ajoute pas plusieurs espaces autour du `=` ou des autres opérateurs pour faire joli :

Chunk id: 1203
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
```  
Vous voyez que la modification de `x` modifie `y` aussi ! Pour comprendre ce qui se passe nous allons de nouveau utiliser le site *Python Tutor* avec cet exemple (Figure @fig:copy_list) :

Chunk id: 79
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
close-box-warn  
Soyez extrêmement attentifs avec les types modifiables (tels que les listes) car vous pouvez les changer au sein d'une fonction :  
```python
>>> def ma_fonction():

Chunk id: 4340
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
nous avons vu les chaînes de caractères ou encore *strings* qui étaient représentées par un texte entouré de guillemets simples ou doubles. Par exemple :

Chunk id: 3848
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
(PMID) des articles scientifiques associés à la requête (ici `transferrin`) :  
```python
>>> res_esearch["IdList"]
['30411489', '30409795', '30405884', '30405827', '30402883', '30401570',

Chunk id: 3408
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1081-parcours-dune-liste-de-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.1 Parcours d'une liste de chaînes de caractères
Content:
### 10.8.1 Parcours d'une liste de chaînes de caractères  
Soit la liste `['girafe', 'tigre', 'singe', 'souris']`. Avec une boucle, affichez chaque élément ainsi que sa taille (nombre de caractères).

Chunk id: 1165
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1115-sort
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.5 `.sort()`
Content:
### 11.1.5 `.sort()`  
La méthode `.sort()` trie les éléments d'une liste du plus petit au plus grand:  
```python
>>> a = [3, 1, 2]
>>> a.sort()
>>> a
[1, 2, 3]
```

Chunk id: 4354
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
```python
>>> print(f"J'affiche l'entier {10} et le float {3.14}")
J'affiche l'entier 10 et le float 3.14
>>> print(f"J'affiche la chaine {'Python'}")
J'affiche la chaine Python
```

Chunk id: 1501
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
logique de ne pas pouvoir les modifier via une instance. Les attributs de classe Python ressemblent en quelque sorte aux attributs statiques du C++.

Chunk id: 1093
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
de chaînes de caractères : `2 + 2` est une addition alors que `"2" + "2"` est une concaténation. On appelle ce comportement **redéfinition des opérateurs**. Nous serons amenés à revoir cette notion

Chunk id: 2738
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
Vous pouvez également effectuer des comparaisons sur des chaînes de caractères.  
```python
>>> animal = "tigre"
>>> animal == "tig"
False
>>> animal != "tig"
True
>>> animal == "tigre"
True
```

Chunk id: 684
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
>>> s2 = {3.14, [1, 2]}
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
```

Chunk id: 503
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1325-existence-dune-cle-ou-dune-valeur
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.5 Existence d'une clé ou d'une valeur
Content:
...     print("La clé 'age' existe pour ani2")
...
```  
Dans le second test (lignes 5 à 7), le message n'est pas affiché car la clé `age` n'est pas présente dans le dictionnaire `ani2`.

Chunk id: 2418
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
def une_fonction_complexe(arg1, arg2, arg3):
"""Résumé de la docstring décrivant la fonction.

Chunk id: 261
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
nombres aléatoires est un problème complexe. On utilise plutôt des « [générateurs de nombres pseudo-aléatoires](https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_pseudo-al%C3%A9atoires)

Chunk id: 855
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Avant de présenter les *regex* en Python, nous allons faire un petit détour par Unix. En effet, certains programmes comme `egrep`, `sed` ou encore `awk` savent interpréter les expressions régulières.

Chunk id: 2675
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
open-box-rem  
Les notions de bloc d'instruction et d'indentations ont été introduites dans le chapitre 1 *Introduction*.  
close-box-rem

Chunk id: 4422
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#33-ecriture-scientifique
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.3 Écriture scientifique
Content:
```python
>>> avogadro_number = 6.022_140_76e23
>>> print(f"{avogadro_number:.0e}")
6e+23
>>> print(f"{avogadro_number:.3e}")
6.022e+23
>>> print(f"{avogadro_number:.6e}")
6.022141e+23
```

Chunk id: 2456
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
tout programmeur. Comme les développeurs de Python ne manque pas d'humour, celle-ci est accessible sous la forme d'un « œuf de Pâques » (*easter egg* en anglais) ou encore « fonctionnalité cachée

Chunk id: 4914
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
Les arguments `*args` et `**kwargs` récupérent facilement tous les arguments « positionnels » et « par mot-clé ». Pour plus de détails sur comment `*args` et `**kwargs` fonctionnent, reportez-vous au

Chunk id: 2936
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Une variable est dite **globale** lorsqu'elle est créée dans le programme principal. Elle sera visible partout dans le programme.

Chunk id: 1290
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
dans la conception des programmes / algorithmes. Elle nécessite donc la lecture de nombreux exemples, mais surtout beaucoup de pratique. Bien structurer ses programmes en POO est un véritable art. Il

Chunk id: 4968
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2081-application-de-base
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.1 Application de base
Content:
Concevez une application qui affiche l'heure dans un *label* (par exemple `09:10:55`) et qui possède un boutton quitter. L'heure affichée sera celle au moment du lancement de l'application. Pour «

Chunk id: 4801
Number of Tokens: 5
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
```python
import time

Chunk id: 2355
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Les outils `pycodestyle`, `pydocstyle` et `pylint` doivent par contre être installés sur votre machine. Avec la distribution Miniconda, cette étape d'installation se résume à une ligne de commande :

Chunk id: 4752
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
par l'utilisateur. L'application consiste en une « baballe » qui se déplace dans la fenêtre et dont on contrôle les propriétés à la souris (cf. figure @fig:canvas_anime). Vous pouvez télécharger le

Chunk id: 3292
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
```python
>>> print("Un retour à la ligne\npuis une tabulation\t puis un guillemet\"")
Un retour à la ligne
puis une tabulation     puis un guillemet"
>>> print('J\'affiche un guillemet simple')

Chunk id: 483
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1323-iteration-sur-les-cles-pour-obtenir-les-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.3 Itération sur les clés pour obtenir les valeurs
Content:
Par défaut, l'itération sur un dictionnaire se fait sur les clés. Dans cet exemple, la variable d'itération `key` prend successivement la valeur de chaque clé, `ani2[key]` donne la valeur

Chunk id: 3510
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
Dans cet exercice, on souhaite compter le nombre de gènes du fichier GenBank [NC_001133.gbk](https://python.sdv.univ-paris-diderot.fr/data-files/NC_001133.gbk) (chromosome I de la levure

Chunk id: 223
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
rn', 'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'g
etrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate',

Chunk id: 2572
Number of Tokens: 83
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#676-nombres-pairs
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.6 Nombres pairs
Content:
```python
>>> 4 % 3
1
>>> 5 % 3
2
>>> 4 % 2
0
>>> 5 % 2
1
>>> 6 % 2
0
>>> 7 % 2
1
```  
Vous remarquerez qu'un nombre est pair lorsque le reste de sa division entière par 2 est nul.

Chunk id: 214
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
`help(random.randint)`  
close-box-rem  
La commande `help()` est en fait une commande plus générale permettant d'avoir de l'aide sur n'importe quel objet chargé en mémoire.  
```python

Chunk id: 75
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
```python
>>> def ma_fonction():
...     global x
...     x = x + 1
...
>>> x = 1
>>> ma_fonction()
>>> x
2
```

Chunk id: 3359
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Cette méthode est particulièrement utile lorsqu'on lit un fichier et que l'on veut récupérer certaines lignes commençant par un mot-clé. Par exemple dans un fichier PDB, les lignes contenant les

Chunk id: 3301
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
## 10.4 Préfixe de chaîne de caractères  
Nous avons vu au chapitre 3 la notion de *f-string*. Il s'agit d'un mécanisme pour formater du texte au sein d'une chaîne de caractères. Par exemple :

Chunk id: 2262
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
```python
#code recommandé :
ma_liste[1]
mon_dico{"clé"}
ma_fonction(argument)
#code non recommandé :
ma_liste [1]
mon_dico {"clé"}
ma_fonction (argument)
```

Chunk id: 2087
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Ligne 5. On instancie un nouvel objet `citron`.  
Lignes 6 à 11. On peut retrouver les différents attributs avec une syntaxe `instance.attribut`.

Chunk id: 3478
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
61 catcctaaca ctaccctaac acagccctaa tctaaccctg gccaacctgt ctctcaactt
[...]
230101 tgttagtgtt agtattaggg tgtggtgtgt gggtgtggtg tgggtgtggg tgtgggtgtg

Chunk id: 4539
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
La bibliothèque Tk que nous piloterons avec le module Python *Tkinter* propose tous les éléments cités ci-dessus (fenêtre graphique, *widgets*, gestionnaire d'événements). Nous aurons cependant

Chunk id: 1650
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
def __str__(self):
return (f"Votre citron est de couleur {self.couleur} "
f"et de taille {self.taille}")

Chunk id: 2416
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
def une_méthode_simple(self):
"""Docstring d'une ligne décrivant la méthode."""
[...]

def une_méthode_complexe(self, arg1):
"""Résumé de la docstring décrivant la méthode.

Chunk id: 1494
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Qu'en est-il de la manière de modifier ces deux types d'attributs ? Les attributs d'instance peuvent se modifier sans problème de l'extérieur avec une syntaxe `instance.attribut_d_instance =

Chunk id: 3561
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
**élément par élément** sur ce type d'objet, ce qui est bien commode lorsqu'on analyse de grandes quantités de données. Regardez ces exemples :

Chunk id: 1351
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
comme un attribut également, concept que vous croiserez peut-être en consultant de la documentation externe.

Chunk id: 3243
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#17-commentaires
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.7 Commentaires
Content:
jusqu'à la fin de la ligne et est considéré comme un commentaire.  
Les commentaires doivent expliquer votre code dans un langage humain.

Chunk id: 3182
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
ne sont pas des éditeurs de texte, ce sont des traitements de texte qui ne peuvent pas et ne doivent pas être utilisés pour écrire du code informatique.

Chunk id: 3794
Number of Tokens: 115
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
[0.92913469, 0.08383269, 0.10670144, 0.14554345]])
>>> seuil = 0.3
>>> a[a < seuil] = 0
>>> a[a > seuil] = 1
>>> a
array([[1., 1., 1., 0.],
[1., 1., 1., 1.],
[1., 0., 0., 1.],
[1., 0., 0., 0.]])

Chunk id: 1819
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
- Cela donne la garantie que toutes les variables de la classe mère sont bien initialisées. On réduit ainsi les risques de dysfonctionnement des méthodes héritées de la classe mère.

Chunk id: 4165
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
min          max
Deposit Date Deposit Date
Source
Anas platyrhynchos      1995-08-03   1996-12-11
Gallus gallus           1993-09-15   2005-09-28
Homo sapiens            1992-02-10   2018-03-22

Chunk id: 2310
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
```python
>>> var_1 = "Ma chaîne de caractères"
>>> var_1
'Ma chaîne de caractères'
>>> var_2 = 'Ma chaîne de caractères'
>>> var_2
'Ma chaîne de caractères'
>>> var_1 == var_2
True
```

Chunk id: 465
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
des éléments par des noms (clés) plutôt que par des indices. Les humains retiennent mieux les noms que les chiffres. Ainsi, l'usage des dictionnaires rend en général le code plus lisible. Par

Chunk id: 3382
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
Les éléments de la liste initiale sont concaténés les uns à la suite des autres et intercalés par un séparateur qui peut être n'importe quelle chaîne de caractères. Ici, on a utilisé un tiret, un

Chunk id: 3530
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
Ces modules ne sont pas fournis avec la distribution Python de base (contrairement à tous les autres modules vus précédemment). Avec la distribution Miniconda que nous vous avons conseillé d'utiliser

Chunk id: 4954
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
### 20.7.3 Bibliographie pour aller plus loin  
Voici quelques ressources que vous pouvez utiliser pour continuer votre apprentissage de *Tkinter* :  
1. En anglais :

Chunk id: 3753
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
variables à la fois. Et bien, il est possible d'utiliser cette fonctionnalité aussi avec les *arrays NumPy* :

Chunk id: 1702
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
qui prend la priorité. Dans ce cas, on dit que la méthode est *redéfinie* (en anglais on parle de *method overriding*), tout comme on parlait de *redéfinition des opérateurs* un peu plus haut. C'est

Chunk id: 1479
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
que la taille, la couleur et la masse d'un citron peuvent varier !), avec des valeurs par défaut.

Chunk id: 1221
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
En Python, la notion de liste de compréhension (ou compréhension de listes) représente une manière originale et très puissante de générer des listes. La syntaxe de base consiste au moins en une

Chunk id: 2010
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
est rien, car on va voir que l'attribut est toujours accessible et modifiable. Si on modifiait le programme principal comme suit :

Chunk id: 3353
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animaux = "girafe tigre"
>>> animaux.find("i")
1
```  
On trouve aussi la méthode `.replace()` qui substitue une chaîne de caractères par une autre :  
```python

Chunk id: 823
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
Créez la fonction `trouve_calpha()` qui prend en argument le nom d'un fichier PDB (sous la forme d'une chaîne de caractères), qui sélectionne uniquement les lignes contenant des carbones alpha et qui

Chunk id: 803
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
### 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*

Chunk id: 595
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
```  
La méthode `.dict_items()` itère comme `enumerate()` sur une série de tuples.  
De la même façon, on peut itérer sur 3 valeurs en même temps à partir d'une liste de tuples de 3 éléments :

Chunk id: 279
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
uniforme. La fonction `random.gauss()` tire quant à elle un *float* aléatoire dans une distribution Gaussienne.

Chunk id: 3000
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
close-box-rem

Chunk id: 3621
Number of Tokens: 95
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
```python
>>> import random as rd
>>> l = list(range(8))
>>> rd.shuffle(l)
>>> l
[2, 7, 6, 4, 0, 3, 1, 5]
>>> a = np.resize(l, (4, 2))
>>> a
array([[2, 7],
[6, 4],
[0, 3],
[1, 5]])
>>> a.max()
7

Chunk id: 4739
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
*canvas* dans la fenêtre avec la méthode `.pack()` en lui précisant où le placer avec la variable *Tkinter* `tk.LEFT`.

Chunk id: 788
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
Dans cet exemple, Python a automatiquement compté chaque caractère `a`, `t`, `g` et `c` de la chaîne de caractères passée en argument. Cela crée un objet de type `Counter` qui se comporte ensuite

Chunk id: 1782
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
print("(3) J'ai fini dans le constructeur de Citron, "
"les attributs sont :\n"
f"self.taille: {self.taille}, self.masse: {self.masse}\n"
f"self.saveur: {self.saveur}, self.forme: {self.forme}\n")

Chunk id: 3334
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
On remarque que l'utilisation de ces méthodes n'altère pas la chaîne de caractères de départ mais renvoie une chaîne de caractères transformée.

Chunk id: 3432
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|   Aspartate   |       Asp      |       D       |
|    Cystéine   |       Cys      |       C       |
|   Glutamate   |       Glu      |       E       |

Chunk id: 3871
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'Biometals'
```  
Enfin, pour récupérer le résumé de la publication précédente, nous allons
utiliser la fonction `Entrez.efetch()` :  
```python

Chunk id: 187
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
On peut également importer toutes les fonctions d'un module :  
```python
>>> from random import *
>>> randint(0,50)
46
>>> uniform(0,2.5)
0.64943174760727951
```

Chunk id: 3226
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
```python
>>> Voici une ligne de code qui \
... est vraiment très longue car \
... elle est découpée sur trois lignes
résultat
```

Chunk id: 3504
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
Les numéros des carbones alpha seront affichés sur 2 caractères. La distance sera affichée avec deux chiffres après la virgule. Voici un exemple avec les premiers carbones alpha :  
```text
1  2 3.80

Chunk id: 1609
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
attribut de classe et un attribut d'instance ont le même nom, c'est l'attribut d'instance qui est **prioritaire**.

Chunk id: 1299
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#191-construction-dune-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Content:
citron que nous allons faire évoluer et complexifier. Attention, certains exemples sont destinés à vous montrer comment les classes fonctionnent mais leur utilisation n'aurait pas de sens dans un

Chunk id: 633
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
On voit que si on modifie un élément de la liste `l1` en ligne 5 ou bien qu'on ajoute un élément à `t[0]` en ligne 6, Python s'exécute et ne renvoie pas de message d'erreur. Or nous avions dit qu'un

Chunk id: 1764
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
`.__init__()` héritée de la classe *object* (puisque nous ne l'avons pas définie dans la classe `Citron`).

Chunk id: 532
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1329-cle-associee-au-minimum-ou-au-maximum-des-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.9 Clé associée au minimum ou au maximum des valeurs
Content:
```python
>>> dico = {"a": 15, "b": 5, "c":20}
>>> max(dico, key=dico.get)
'c'
>>> min(dico, key=dico.get)
'b'
```

Chunk id: 1020
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1646-nettoyeur-de-doublons-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.6 Nettoyeur de doublons (exercice +++)
Content:
[...]
```  
Écrivez un script `ote_doublons.py` qui lit le fichier `breves_doublons.txt` et qui supprime tous les doublons à l'aide d'une *regex*. Le script affichera le nouveau texte à l'écran.

Chunk id: 3756
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
Pour utiliser l'affectation multiple sur les colonnes, il suffit d'utiliser la transposée `a.T` :  
```python
>>> c1, c2, c3 = a.T
>>> c1
array([1, 4, 7])
>>> c2
array([2, 5, 8])
>>> c3

Chunk id: 1653
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Lignes 7 à 14. Création d'une classe `CitronCool` où nous avons ajouté la nouvelle méthode `.__str__()`. Cette dernière renvoie une chaîne de caractères contenant la description de l'instance.

Chunk id: 1684
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
pré-existante. On parle de classe mère et de classe fille. En Python, l'héritage peut être multiple lorsqu'une classe fille hérite de plusieurs classes mères.

Chunk id: 3124
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
## 4.9 Minimum, maximum et somme d'une liste  
Les fonctions `min()`, `max()` et `sum()` renvoient respectivement le minimum, le maximum et la somme d'une liste passée en argument.  
```python

Chunk id: 793
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1381-composition-en-acides-amines
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.1 Composition en acides aminés
Content:
En utilisant un dictionnaire, déterminez le nombre d’occurrences de chaque acide aminé dans la séquence `AGWPSGGASAGLAILWGASAIMPGALW`. Le dictionnaire ne doit contenir que les acides aminés présents

Chunk id: 1118
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
Nous avons vu dans ce chapitre la notion de **variable** qui est commune à tous les langages de programmation. Toutefois, Python est un langage dit « orienté objet », il se peut que dans la suite du

Chunk id: 3854
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
En réalité, le nombre exact de publications est connu :  
```python
>>> res_esearch["Count"]
'33988'
```  
Pour ne pas saturer les serveurs du NCBI, seulement 20 PMID sont renvoyés par défaut.

Chunk id: 1181
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
```python
>>> liste = [1, 2, 3]
>>> help(liste.reverse)
Help on built-in function reverse:

Chunk id: 4800
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
`.move()` est détruit lorsque Python rencontre la méthode `.after()`. On obtiendrait un résultat similaire avec la boucle suivante :

Chunk id: 3884
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
sorption and macrophage iron efflux. Studies of inherited human dis
ease and model organisms indicate that transferrin is an essential

Chunk id: 4748
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
### 20.6.3 Un *canvas* animé dans une classe

Chunk id: 809
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
dans la séquence du chromosome I de la levure du boulanger *Saccharomyces cerevisiae* (fichier [`NC_001133.fna`](https://python.sdv.univ-paris-diderot.fr/data-files/NC_001133.fna)).

Chunk id: 4624
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Vous voyez maintenant la même fenêtre avec les mêmes fonctionnalités par rapport à la version dans l'interpréteur (voir la figure @fig:exemple1_tkinter). Nous commentons ici les différences (dans le

Chunk id: 3956
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#174-module-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Content:
```python
>>> import pandas
```  
Pandas est souvent chargé avec un nom raccourci, comme pour *NumPy* et *matplotlib* :  
```python
>>> import pandas as pd
```

Chunk id: 1135
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#210-minimum-et-maximum
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.10 Minimum et maximum
Content:
par une virgule. `min()` et `max()` prennent en argument autant d'entiers et de *floats* que l'on veut, mais il en faut au moins deux.

Chunk id: 1656
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
L'utilisation de la fonction `print()` sur l'instance `citron1` construite à partir de la classe `CitronBasique` affiche le message abscons que nous avons déjà croisé. Par contre, pour l'instance

Chunk id: 4973
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
qui met à jour l'heure dans le *label* et qui se rappelle elle-même toutes les secondes (n'oubliez pas la méthode `.after()`, cf. rubrique *Un canvas animé dans une classe* ci-dessus). Pour cette

Chunk id: 139
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1263-conclusion
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.3 Conclusion
Content:
du chapitre 9, elles sont incontournables et tout programmeur se doit de les maîtriser. Voici les derniers conseils que nous pouvons vous donner :

Chunk id: 2492
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
Par exemple, on se propose de tirer au sort une base d'ADN puis d'afficher le nom de cette dernière. Dans le code suivant, nous utilisons l'instruction `random.choice(liste)` qui renvoie un élément

Chunk id: 2870
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
`print()`. Que veut dire valeur renvoyée ? Et bien cela signifie que cette dernière est récupérable dans une variable :

Chunk id: 2633
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Pour arriver rapidement à deviner le nombre, l'astuce consiste à prendre à chaque fois la moitié de l'intervalle dans lequel se trouve le nombre. Voici le détail des différentes étapes :

Chunk id: 4709
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
associé au *canvas*. Comme dans la plupart des bibliothèques graphiques, l'origine du repère du *canvas* (*i.e.* la coordonnée $(0,0)$) est en haut à gauche. Les $x$ vont de gauche à droite, et les

Chunk id: 2307
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
```python
x = x + 1   #My wonderful comment.
```  
open-box-rem

Chunk id: 3469
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
de caractères est un pangramme ou `xxx n'est pas un pangramme` sinon. Pensez à vous débarrasser des majuscules le cas échéant.

Chunk id: 2021
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
conçu pour ça. Les concepteurs de Python le disent clairement dans la PEP 8: « *Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed

Chunk id: 4289
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
plt.bar(x, y)

#redéfinition des valeurs affichées sur l'axe des ordonnées
plt.yticks(list(range(0, max(y), 2)))

Chunk id: 4763
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
width=2, fill="blue")
#Binding des actions.
self.canv.bind("<Button-1>", self.incr)
self.canv.bind("<Button-2>", self.boom)
self.canv.bind("<Button-3>", self.decr)
self.bind("<Escape>", self.stop)

Chunk id: 1346
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
### 19.1.4 Les méthodes  
Dans notre classe on pourra aussi ajouter des fonctions.  
open-box-def

Chunk id: 3865
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'NlmUniqueID', 'ISSN', 'ESSN', 'PubTypeList', 'RecordStatus', 'PubStatus',
'ArticleIds', 'DOI', 'History', 'References', 'HasAbstract', 'PmcRefCount',
'FullJournalName', 'ELocationID', 'SO'])
```

Chunk id: 333
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#884-affichage-temporise
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.4 Affichage temporisé
Content:
### 8.8.4 Affichage temporisé  
Affichez les nombres de 1 à 10 avec 1 seconde d'intervalle. Utilisez pour cela le module *time* et sa fonction `sleep()`.

Chunk id: 624
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
Le caractère *underscore* (`_`) est couramment utilisé dans les noms de variable pour séparer les mots et être explicite, par exemple `seq_ADN` ou `liste_listes_residus`. On verra dans le chapitre 15

Chunk id: 702
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
dans le *set*, il ne se passe rien, le *set* reste intact. Comme les *sets* ne sont pas ordonnés ni indexables, il n'y a pas de méthode pour insérer un élément à une position précise contrairement

Chunk id: 4986
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
Le [triangle de Sierpinski](https://fr.wikipedia.org/wiki/Triangle_de_Sierpi%C5%84ski) est une fractale classique. On se propose ici de la dessiner avec un algorithme tiré du [jeu du

Chunk id: 1962
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
la notion de décorateur va au-delà du présent ouvrage. Si vous souhaitez plus d'informations, vous pouvez consulter par exemple le [site

Chunk id: 4946
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
car cela dépasse le cadre de cet ouvrage. Pour de plus amples explications sur cette question, vous pouvez consulter le site

Chunk id: 1675
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
pour vous jeter à l'eau et commencer à construire vos propres classes. L'apprentissage de toutes les méthodes magiques va bien sûr au-delà du présent ouvrage. Toutefois, si vous souhaitez aller plus

Chunk id: 3094
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
Notez que lorsqu'aucun indice n'est indiqué à gauche ou à droite du symbole deux-points, Python prend par défaut tous les éléments depuis le début ou tous les éléments jusqu'à la fin respectivement.

Chunk id: 2124
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
Ce notebook est constitué de cinq cellules : deux avec du texte en Markdown (la première et la dernière) et trois avec du code Python (notées avec `In [ ]`).

Chunk id: 2580
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
Créez un script qui, partant d'un entier positif *n* (par exemple 10 ou 20), crée une liste des nombres de la suite de Syracuse. Avec différents points de départ (c'est-à-dire avec différentes

Chunk id: 2291
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
```python
>>> ma_liste = [1, 2, 3,
...             4, 5, 6,
...             7, 8, 9]
>>> mon_dico = {"clé1": 13,
...             "clé2": 42,
...             "clé3": -10}
```

Chunk id: 2377
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Remarquez que curieusement, `pycodestyle` n'a pas détecté que le nom de la fonction `Multiplie_nombres()` ne respecte pas la convention de nommage.

Chunk id: 3665
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```python
>>> np.zeros((2,3), int)
array([[0, 0, 0],
[0, 0, 0]])
```

Chunk id: 2193
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
$ jupyter lab
```  
Une nouvelle page devrait s'ouvrir dans votre navigateur web et vous devriez
obtenir une interface similaire à la figure @fig:jupyterlab-1.

Chunk id: 4949
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#application-tkinter-avec-plusieurs-pages
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.7 Application *Tkinter* avec plusieurs pages
Content:
#### 20.7.2.7 Application *Tkinter* avec plusieurs pages

Chunk id: 2216
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
close-box-def  
On va aborder dans ce chapitre sans doute la plus célèbre des PEP, à savoir la PEP 8, qui est incontournable lorsque l'on veut écrire du code Python correctement.  
open-box-def

Chunk id: 3982
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
Le même *dataframe* peut aussi être créé à partir des valeurs fournies
en colonnes sous la forme d'un dictionnaire :  
```python
>>> data = {"a": np.arange(10, 40, 10),

Chunk id: 1214
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
![Copie de liste avec une tranche `[:]` et la fonction `list()`.](img/copy_list2.png){ #fig:copy_list2 width=80% }

Chunk id: 2315
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
élément essentiel de nos programmes Python comme on l'a vu au chapitre 14 *Création de modules*. À nouveau, les développeurs de Python ont émis des recommandations dans la PEP 8 et plus

Chunk id: 4884
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
def create_widgets(self):
self.label = tk.Label(self.racine, text="J'adore Python !")
self.bouton = tk.Button(self.racine, text="Quitter",
fg="green", command=self.quit)
self.label.pack()

Chunk id: 1308
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Ligne 2. La classe ne contient rien, mais il faut mettre au moins une ligne, on met donc ici le mot-clé Python `pass` qui ne fait rien (comme dans une fonction qui ne fait rien).

Chunk id: 2308
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Nous terminerons par une remarque qui concerne la syntaxe, mais qui n'est pas incluse dans la PEP 8. On nous pose souvent la question du type de guillemets à utiliser pour déclarer une chaîne de

Chunk id: 4952
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#application-tkinter-avec-plusieurs-pages
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.7 Application *Tkinter* avec plusieurs pages
Content:
fenêtre différentes. Le [livre de Gérard Swinnen](https://inforef.be/swi/python.htm) et le site [pythonprogramming](https://pythonprogramming.net/change-show-new-frame-tkinter/) sont des bonnes

Chunk id: 405
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
raisonnement peut être tenu pour les autres types numériques comme les *floats* et booléens. Si on regarde maintenant ce qu'il se passe pour une liste :

Chunk id: 3298
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
Attention, les caractères spéciaux n'apparaissent intérprétés que lorsqu'ils sont utilisés avec la fonction `print()`. Par exemple, le `\n` n'apparait comme un saut de ligne que lorsqu'il est dans

Chunk id: 4975
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
ci-dessus). Pour cette mise à jour, vous pourrez utiliser la méthode `.configure()`, par exemple : `self.label.configure(text=heure)` où `heure` est une chaîne de caractères représentant l'heure

Chunk id: 184
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
close-box-rem  
Il existe un autre moyen d'importer une ou plusieurs fonctions d'un module :  
```python
>>> from random import randint
>>> randint(0,10)
7
```

Chunk id: 2715
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
`for prenom in ["Joe", "Bill", "John"]:`  
ou  
`for proportion in [0.12, 0.53, 0.07, 0.28]:`

Chunk id: 1947
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Dans les méthodes accesseur et mutateur il ne faut surtout pas utiliser `self.masse` à la place de `self._masse`. Pourquoi ? Par exemple, dans l'accesseur, si on met `self.masse` cela signifie que

Chunk id: 4807
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
autre argument que nous avons nommé ici `mclick`. Il s'agit d'un objet spécial géré par *Tkinter* qui va nous donner des informations sur l'événement généré par l'utilisateur. Dans les lignes 62 et

Chunk id: 3278
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
```python
>>> animaux = "girafe tigre"
>>> animaux
'girafe tigre'
>>> len(animaux)
12
>>> animaux[3]
'a'
```  
Nous pouvons donc utiliser certaines propriétés des listes comme les tranches :

Chunk id: 527
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: '<' not supported between instances of 'int' and 'str'
```

Chunk id: 2062
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
- Nous vous déconseillons de mettre comme paramètre par défaut une liste vide (ou tout autre objet séquentiel modifiable) :  
```python
def __init__(self, liste=[]):
self.liste = liste
```

Chunk id: 4569
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
*Dictionnaires, tuples et sets*) ainsi que les objets `property` (cf. chapitre 19 *Avoir la classe avec les objets*).

Chunk id: 1685
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
close-box-def  
En Python, lorsque l'on veut créer une classe héritant d'une autre classe, on ajoutera après le nom de la classe fille le nom de la ou des classe(s) mère(s) entre parenthèses :

Chunk id: 4844
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
de base de *Tkinter* et qui en propose de nouveaux (*Combobox*, *Notebook*, *Progressbar*, *Separator*, *Sizegrip* et *Treeview*). Typiquement, si vous utilisez *ttk*, nous vous conseillons

Chunk id: 494
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
```python
>>> dico = {0: "t", 1: "o", 2: "t", 3: "o"}
>>> dico.items()
dict_items([(0, 't'), (1, 'o'), (2, 't'), (3, 'o')])
```

Chunk id: 2208
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
vous vous rendrez compte que cela est parfaitement vrai. Alors plus de temps à perdre, voyons en quoi consistent ces bonnes pratiques.

Chunk id: 2968
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
globales. Cela viendra aussi avec la pratique. Nous irons un peu plus loin sur les fonctions dans le chapitre 12. D'ici là, essayez de vous entraîner au maximum avec les fonctions. C'est un concept

Chunk id: 2500
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
## 6.3 Importance de l'indentation  
De nouveau, faites bien attention à l'indentation ! Vous devez être très rigoureux sur ce point. Pour vous en convaincre, exécutez ces deux exemples de code :

Chunk id: 4941
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
#### 20.7.2.6 Passage d'arguments à vos fonctions callback

Chunk id: 2701
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
L'instruction `list(range(4))` se contente de transformer un objet de type *range* en un objet de type *list*. Si vous vous souvenez bien, il s'agit d'une fonction de *casting*, qui convertit un type

Chunk id: 1903
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Toutefois, si on souhaite contrôler l'accès, la modification (voire la destruction) de certains attributs stratégiques, Python met en place une classe nommée `property`. Celle-ci permet de combiner

Chunk id: 4013
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-sur-les-lignes-et-les-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.3 Sélection sur les lignes et les colonnes
Content:
Nantes  Lyon
singe       22    21
souris      32    31
```  
Notez qu'à partir du moment où on souhaite effectuer une sélection sur des lignes,

Chunk id: 2972
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
## 9.7 Principe DRY

Chunk id: 3495
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
Utilisez la fonction `trouve_calpha()` pour afficher à l'écran les carbones alpha des deux premiers résidus (acides aminés).

Chunk id: 1402
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
nous indique que `citron1` est une instance de la classe `Citron` par une flèche pointant vers l'espace `Citron instance`. Cette instance contient un attribut nommé `couleur` auquel on accéde avec la

Chunk id: 2722
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
...     print(animal)
...
girafe
tigre
singe
souris
```  
Toutefois, il se peut qu'au cours d'une boucle vous ayez besoin des indices, auquel cas vous devrez itérer sur les indices :  
```python

Chunk id: 4895
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
prend la valeur `None` par défaut ? ». Et bien, c'est parce que notre classe Application peut s'appeler sans passer d'instance de fenêtre Tk. Voici un exemple avec les lignes qui changent seulement

Chunk id: 4820
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
au moment où on effectue un clic central ; panneau de droite: après avoir effectué plusieurs clics gauches).](img/example_canvas_baballe.png "Exemple de canvas animé"){ #fig:canvas_anime width=80% }

Chunk id: 192
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
import random
```  
puis d'appeler explicitement les fonctions voulues, par exemple :  
```python
random.randint(0,2)
```

Chunk id: 4695
Number of Tokens: 7
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
```python
import tkinter as tk

Chunk id: 2563
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#674-frequence-des-acides-amines
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.4 Fréquence des acides aminés
Content:
`["A", "R", "A", "W", "W", "A", "W", "A", "R", "W", "W", "R", "A", "G"]`  
Calculez la fréquence des acides aminés alanine (A), arginine (R), tryptophane (W) et glycine (G) dans cette séquence.

Chunk id: 1647
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
une instance de cette classe. La méthode magique qui permettra cela est nommée `.__str__()` : elle redéfinit le comportement d'une instance avec la fonction `print()`.

Chunk id: 1961
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Il s'agit des *décorateurs* `@property`, `@attribut.setter` et `@attribut.deleter`. Toutefois, la notion de décorateur va au-delà du présent ouvrage. Si vous souhaitez plus d'informations, vous

Chunk id: 1516
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
![Illustration avec *Python Tutor* de la non destruction d'un attribut de classe (étape 2).](img/classe_var_instance3.png){ #fig:classe_var_instance3 width=90% }

Chunk id: 1441
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
méthode `.__init__()` et n'est plus visible lorsque l'exécution de cette dernière est terminée (cf. chapitres 9 et 12 sur les fonctions). Ainsi, Python renvoie une erreur car `var` n'existe pas

Chunk id: 3162
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#12-conseils-pour-installer-et-configurer-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Content:
Python sur votre machine, que ce soit sous Windows, Mac OS X ou Linux. Nous donnons dans cette rubrique un résumé des points importants concernant cette installation. Tous les détails et la marche à

Chunk id: 2253
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
>>> for i in range(len(ma_liste)):
...     print(ma_liste[i])
```  
Bien sûr, une écriture plus « pythonique » de l'exemple précédent permet de se débarrasser de l'indice `i` :  
```python

Chunk id: 3593
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
>>> d = a.reshape((3, 4))
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: cannot reshape array of size 6 into shape (3,4)
```

Chunk id: 2816
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
1 ou -1. Par exemple, si elle est à l'emplacement 0, elle peut sauter à l'emplacement 1 ou -1; si elle est à l'emplacement 2, elle peut sauter à l'emplacement 3 ou 1, etc.

Chunk id: 1491
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
def affiche_attributs(self):
print(f"attribut de classe: {self.saveur}")
print(f"attribut d'instance: {self.couleur}")

Chunk id: 2743
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
le caractère *a* est situé avant le caractère *b* dans l'ordre alphabétique. En fait, c'est l'ordre [ASCII](http://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange) des

Chunk id: 31
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
(voir la rubrique suivante). Attention toutefois à retrouver vos petits si vous vous perdez dans les appels successifs !

Chunk id: 2249
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
appelé *snake_case*. Il est différent du *CamelCase* utilisé pour les noms des
classes et des exceptions.  
close-box-rem

Chunk id: 1405
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
![Fonctionnement d'un constructeur (étape 4).](img/classe_constructeur4.png){ #fig:classe_constructeur4 width=90% }  
open-box-adv

Chunk id: 4595
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
si bien qu'ils sont toujours des arguments par mot-clé. Si on ne précise pas un de ces arguments lors de la création du *widget*, l'argument prendra alors une valeur par défaut. Cette liste des

Chunk id: 3977
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
Ligne 2. L'argument `index` définit le nom des lignes, sous forme de liste.  
Lignes 3-5. L'argument `data` fournit le contenu du *dataframe*, sous la forme

Chunk id: 1993
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
Par exemple, reprenons la classe `Citron` de la rubrique précédente dont l'attribut `.masse` est contrôlé avec un objet *property* :  
```python
>>> citron = Citron()
Coucou je suis dans le set

Chunk id: 1923
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
if __name__ == "__main__":
print("(1) Je suis dans le programme principal, "
"je vais instancier un Citron")
citron = Citron(masse=100)
print("(3) Je reviens dans le programme principal")

Chunk id: 448
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
En premier, on définit un dictionnaire vide avec les accolades `{}` (tout comme on peut le faire pour les listes avec `[]`). Ensuite, on remplit le dictionnaire avec différentes clés (`"nom"`,

Chunk id: 1041
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
à la variable située à gauche (ici, `x`). D'autres langages de programmation comme *R* utilisent les symboles `<-` pour rendre l'affectation d'une variable plus explicite, par exemple `x <- 2`.

Chunk id: 1084
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
```python
>>> 5 // 4
1
>>> 5 % 4
1
>>> 8 // 4
2
>>> 8 % 4
0
```  
Les symboles `+`, `-`, `*`, `/`, `**`, `//` et `%` sont appelés **opérateurs**, car ils réalisent des opérations sur les variables.

Chunk id: 1188
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
## 11.2 Construction d'une liste par itération  
La méthode `.append()` est très pratique car on peut l'utiliser pour construire une liste au fur et à mesure des itérations d'une boucle.

Chunk id: 1899
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Dans la rubrique précédente, on vient de voir que les *getters* et *setters* traditionnels rencontrés dans d'autres langages orientés objet ne représentent pas une pratique pythonique. En Python,

Chunk id: 3691
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Il existe d'autres fonctions plus avancées telles que [np.genfromttxt()](https://numpy.org/doc/stable/reference/generated/numpy.genfromtxt.html) gérant les données manquantes, ou encore

Chunk id: 2336
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
On illustre ici la solution *NumPy* pour des raisons de goût personnel. Sentez-vous libre d'aller explorer la proposition de Google. Voici un exemple très simple :  
```python

Chunk id: 523
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
>>> sorted(dico, key=dico.get, reverse=True)
['c', 'a', 'b']
```  
open-box-rem

Chunk id: 4864
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
`var.get()` qui récupère la valeur actuelle contenue dans `var`. Enfin, il faudra lors de la création du label utiliser l'option `textvariable=` avec votre variable de contrôle (par exemple

Chunk id: 2319
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
méthodes. Lorsque l'explication est courte et compacte comme dans certaines fonctions ou méthodes simples, utilisez des *docstrings* d'une ligne :

Chunk id: 3285
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
Par conséquent, si vous voulez modifier une chaîne de caractères, vous devez en construire une nouvelle. Pour cela, n'oubliez pas que les opérateurs de concaténation (`+`) et de duplication (`*`)

Chunk id: 1718
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
Vous l'avez compris, il y aura un ordre pour la résolution des noms d'attributs ou de méthodes en fonction du ou des héritage(s) de notre classe (à nouveau, cela provient de la manière dont Python

Chunk id: 1148
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#11-plus-sur-les-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Content:
ce cours. Dans ce chapitre nous allons plus loin avec les méthodes associées aux listes, ainsi que d'autres caractéristiques très puissantes telles que les tests d'appartenance ou les listes de

Chunk id: 52
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
3 correspond à `nb` et 2 provient de `calc_factorielle(nb - 1)` soit 2) va être renvoyé à l'appel précédent, pour finir par $4 \times 6 = 24$ (où 4 correspond à `nb` et 6 provient de

Chunk id: 4712
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
vert et n'apparaît pas sur la vraie fenêtre *Tkinter*.](img/example_canvas1_coor.png "Exemple 1 de canvas avec coordonnées"){ #fig:exemple1_canvas width=60% }

Chunk id: 574
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
>>> t
(1, 2, 3)
>>> t = 1, 2, 3
>>> t
(1, 2, 3)
```  
Toutefois, afin d'éviter les confusions, nous vous conseillons d'utiliser systématiquement les parenthèses lorsque vous débutez.

Chunk id: 1032
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
Dans d'autres langages (en C par exemple), il faut coder ces différentes étapes une par une. Python étant un langage dit de *haut niveau*, la simple instruction `x = 2` a suffi à réaliser les 3

Chunk id: 2323
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Après avoir sauté une ligne, on décrit les détails de cette docstring.
blablabla
blablabla
blublublu
bliblibli
On termine la docstring avec les triples guillemets sur la ligne suivante.
"""
```

Chunk id: 3853
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
faisons cette même requête directement sur le site de PubMed depuis un navigateur
web, nous obtenons plus de 33900 résultats.  
En réalité, le nombre exact de publications est connu :  
```python

Chunk id: 982
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
correspondant au chromosome I de la levure *Saccharomyces cerevisiae*.

Chunk id: 2501
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
**Code 1**  
```python
nombres = [4, 5, 6]
for nb in nombres:
if nb == 5:
print("Le test est vrai")
print(f"car la variable nb vaut {nb}")
```  
Résultat :  
```text
Le test est vrai

Chunk id: 1287
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
déjà vu ces mots vous en souvenez-vous ?), ou bien encore l'*héritage* (capacité à définir une classe à partir d'une classe pré-existante et d'y ajouter de nouvelles fonctionnalités). Tous ces

Chunk id: 954
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1635-la-methode-findall
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.5 La méthode `.findall()`
Content:
```python
>>> regex = re.compile("([0-9]+)\.([0-9]+)")
>>> resultat = regex.findall("pi vaut 3.14 et e vaut 2.72")
>>> resultat
[('3', '14'), ('2', '72')]
```

Chunk id: 3944
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Ligne 11. La fonction `bar()` construit le diagramme en bâtons. Elle prend en argument la position des barres (`x`) et leurs hauteurs (`distribution`).

Chunk id: 4461
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
mais présente l'inconvénient -- comme avec l'opérateur `%` -- de devoir mettre la liste des variables tout à la fin, alourdissant ainsi la syntaxe. En effet, dans l'exemple avec la proportion de GC,

Chunk id: 3995
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
singe      20    21      22   23
souris     30    31      32   33
```  
La méthode `.head(n)` renvoie les *n* premières lignes du *dataframe*
(par défaut, *n* vaut 5) :  
```python
>>> df.head(2)

Chunk id: 3855
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Pour ne pas saturer les serveurs du NCBI, seulement 20 PMID sont renvoyés par défaut.
Mais vous pouvez augmenter cette limite en utilisant le paramètre `retmax` dans la fonction `Entrez.esearch()`.

Chunk id: 4191
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
sembler complexes mais chacune d'elles correspond à une étape particulière
du traitement des données. L'utilisation des parenthèses (ligne 1, juste avant

Chunk id: 757
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1354-types-de-base
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.4 Types de base
Content:
|:----------------|:--------------------------------------:|:--------:|:-------:|:---------:|:----------:|:--------:|

Chunk id: 913
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
`search(motif, chaine)`. Si `motif` est retrouvé dans `chaine`, Python renvoie un objet du type `SRE_Match`.

Chunk id: 124
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
open-box-adv  
Plutôt que d'utiliser des variables globales, passez vos variables explicitement aux fonctions comme des argument(s).  
close-box-adv

Chunk id: 722
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
La méthode `.issubset()` indique si un *set* est inclus dans un autre *set*. La méthode `isdisjoint()` indique si un *set* est disjoint d'un autre *set*, c'est-à-dire, s'ils n'ont aucun élément en

Chunk id: 3893
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Dans cet exemple, nous considérons l'évolution de la concentration d'un produit dans le sang (exprimé en mg/L) en fonction du temps (exprimé en heure).  
Nous avons les résultats suivants :

Chunk id: 430
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
Voici un exemple :  
```python
>>> hash("Plouf")
5085648805260210718
>>> hash(5)
5
>>> hash(3.14)
322818021289917443
>>> hash([1, 2, 3])
Traceback (most recent call last):

Chunk id: 1427
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
l'appeler `self` car c'est une convention générale en Python. Ainsi, quelqu'un qui lira votre code comprendra immédiatement de quoi il s'agit.

Chunk id: 1860
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
if __name__ == "__main__":
#définition de citron1
citron1 = Citron()
print(citron1.get_couleur(), citron1.get_masse())
#on change les attributs de citron1 avec les setters

Chunk id: 1515
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
instance` qui est vide ; ainsi, Python utilisera l'attribut de classe `.saveur` qui contient toujours la valeur `acide` (cf. figure @fig:classe_var_instance3).

Chunk id: 4754
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
```python
"""Super appli baballe !!!

Chunk id: 1858
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
def get_couleur(self):
return self.couleur

def set_couleur(self, value):
self.couleur = value

def get_masse(self):
return self.masse

Chunk id: 2744
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
[ASCII](http://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange) des caractères qui est pris en compte (à  chaque caractère correspond un code numérique), on peut donc aussi

Chunk id: 3462
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
« z »). La fonction `chr()` prend en argument un code ASCII sous la forme d'un entier et renvoie le caractère correspondant (sous la forme d'une chaîne de caractères). Ainsi `chr(97)` renvoie `'a'`,

Chunk id: 1968
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
On a vu dans la rubrique *Accès et modifications des attributs depuis l'extérieur* que nous avions le moyen de contrôler cet accès avec la classe *property*. Toutefois, cela peut parfois alourdir

Chunk id: 2643
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
```text
Pensez à un nombre entre 1 et 100.
Est-ce votre nombre est plus grand, plus petit ou égal à 50 ? [+/-/=] +
Est-ce votre nombre est plus grand, plus petit ou égal à 75 ? [+/-/=] +

Chunk id: 1461
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
À noter, l'instanciation affichera le message `Le citron c'est trop bon !` puisque la méthode `.affiche_attributs()` est appelée dans le constructeur `.__init__()`.

Chunk id: 4862
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
`var = tk.StringVar()`, on peut modifier la valeur d'une variable de contrôle avec la méthode `var.set(nouvelle_valeur)` : ceci mettra à jour tous les *widgets* utilisant cette variable `var`. Il

Chunk id: 2873
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
```python
>>> def hello():
...     print("bonjour")
...
>>> hello()
bonjour
```

Chunk id: 4670
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
est maintenant `self` (au lieu de `racine` précédemment) indiquant la fenêtre dans laquelle sera construit ce *widget*.

Chunk id: 3570
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
[[4, 5],
[5, 6]]])
```

Chunk id: 3991
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
```python
>>> df.shape
(3, 4)
```  
Ici, le *dataframe* `df` a 3 lignes et 4 colonnes.  
L'attribut `.columns` renvoie le nom des colonnes et permet aussi de renommer

Chunk id: 2866
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
les tests `if`, un bloc d’instructions est donc attendu. De même que pour les boucles et les tests, l'**indentation** de ce bloc d'instructions (qu'on appelle le corps de la fonction) est

Chunk id: 1582
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
citron1 = Citron("très acide", "jaune foncé")
print("Dans citron1.affiche_attributs():", citron1.affiche_attributs())
print(f"Dans le programme principal: {saveur}, {couleur}")
```

Chunk id: 3667
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
```python
>>> np.full((2, 3), 7, int)
array([[7, 7, 7],
[7, 7, 7]])
>>> np.full((2, 3), 7, float)
array([[ 7.,  7.,  7.],
[ 7.,  7.,  7.]])
```

Chunk id: 1510
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
le même nom ! Tout ceci est dû à la manière dont Python gère les **espaces de noms** (voir rubrique *Espaces de noms*). Dans ce cas, l'attribut d'instance est **prioritaire** sur l'attribut de

Chunk id: 4373
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Notez enfin que le formatage avec `.xf` (`x` étant un entier positif) renvoie un résultat arrondi.

Chunk id: 3064
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#42-utilisation
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.2 Utilisation
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> animaux[0]
'girafe'
>>> animaux[1]
'tigre'
>>> animaux[3]
'souris'
```

Chunk id: 3832
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
Seq('ISAIAC')
```
Dans l'annexe A *Quelques formats de données rencontrés en biologie*, vous
trouverez de nombreux exemples d'utilisation de *Biopython* pour manipuler

Chunk id: 4512
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
de manière explicite et en direct ! Par exemple, si on réalise une simulation de particules, on a envie de voir un « film » des particules en mouvement, c'est-à-dire comment ces particules bougent au

Chunk id: 3728
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
close-box-rem

Chunk id: 3698
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
L'avantage d'écrire au format binaire est que cela prend moins de place pour les gros tableaux.

Chunk id: 1434
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
(ou objet) `citron1` (ou vers n'importe quelle autre instance, par exemple si on crée `citron2 = Citron()` le `self` sera une référence vers `citron2`).

Chunk id: 676
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Remarquez que la répétition du 5 dans la définition du *set* en ligne 1 donne au final un seul 5 car chaque élément ne peut être présent qu'une seule fois. Comme pour les dictionnaires (jusqu'à la

Chunk id: 401
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
En ligne 1 on définit l'entier `a` puis on regarde son identifiant. En ligne 4, on pourrait penser que l'on modifie `a`. Toutefois, on voit que son identifiant en ligne 6 est différent de la ligne 3.

Chunk id: 4170
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
été déposées en fonction du temps.  
La méthode `.value_counts()` peut être utilisée mais elle ne renvoie que
le nombre de structures déposées dans la PDB pour un jour donné. Par exemple,

Chunk id: 4888
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Lignes 4 et 5. Ici réside la principale différence par rapport à ce que nous vous avons montré dans ce chapitre : en ligne 4 on passe l'argument `racine` à notre constructeur, puis en ligne 5 on

Chunk id: 249
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
```  
Le module *random* permet aussi de permuter aléatoirement des listes :  
```python
>>> x = [1, 2, 3, 4]
>>> random.shuffle(x)
>>> x
[2, 3, 1, 4]
>>> random.shuffle(x)
>>> x
[4, 2, 1, 3]
```

Chunk id: 4708
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
Le rendu de l'image est montré dans la figure @fig:exemple1_canvas ainsi que le système de coordonnées associé au *canvas*. Comme dans la plupart des bibliothèques graphiques, l'origine du repère du

Chunk id: 84
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
La figure @fig:fct_liste vous montre le mécanisme à l'oeuvre lorsqu'on passe une liste à une fonction.

Chunk id: 4426
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
rubrique suivante pour la définition du mot « méthode »). Même si les *f-strings* sont devenues la manière conseillée pour mettre en place l'écriture formatée, ces deux anciennes manières, sont

Chunk id: 1312
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Lignes 9 et 10. Lorsqu'on tape le nom de l'instance `citron1`, l'interpréteur nous rappelle qu'il s'agit d'un objet de type `Citron` ainsi que son adresse en mémoire.

Chunk id: 3812
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
ou vos commentaires lorsque vous utilisez des *arrays NumPy*. *NumPy* permettant de réaliser des opérations vectorielles de manière très compacte, il est essentiel de se mettre à la place du lecteur

Chunk id: 3818
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
open-box-more

Chunk id: 4838
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
Vous trouverez la documentation exhaustive pour tous ces *widgets* (ainsi que ceux que nous avons décrits dans les rubriques précédentes) sur le [site de l'Institut des mines et de technologie du

Chunk id: 56
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
qu'une fonction qui en appelle une autre (ici il s'agit d'elle-même) reste « figée » dans le même état, jusqu'à ce que la fonction appelée lui renvoie une valeur.

Chunk id: 3513
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
```text
gene            complement(<1807..>2169)
gene            <2480..>2707
gene            complement(<7235..>9016)
gene            complement(<11565..>11951)
gene            <12046..>12426
[...]

Chunk id: 389
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
plusieurs de ses éléments. Tous les autres types que nous avons vus précédemment sont quant à eux non modifiables : les chaînes de caractères ou *strings*, les objets de type *range*, mais également

Chunk id: 1692
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
class Fille(Mere):
def salut(self):
return "Un salut de la classe fille !"

Chunk id: 1217
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
>>> y
[[1, 2], [3, 55]]
```  
et  
```python
>>> y = list(x)
>>> x[1][1] = 77
>>> x
[[1, 2], [3, 77]]
>>> y
[[1, 2], [3, 77]]
```

Chunk id: 32
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
## 12.2 Fonctions récursives  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 2188
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
obtenues par séquençage haut débit. Ces analyses ont donné lieu à la publication de l'article scientifique « [*An open RNA-Seq data analysis pipeline tutorial with an example of reprocessing data

Chunk id: 3392
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
d__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__'
, '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__',

Chunk id: 3600
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
modifié (à l'image des méthodes sur les listes comme `.reverse()`, cf. chapitre 11 *Plus sur les listes*). Si l'option `refcheck=False` n'est pas présente, Python peut parfois renvoyer une erreur

Chunk id: 2162
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
mathématiques...) avec quelques balises très simples. Voici un exemple dans une notebook Jupyter (figure @fig:jupyter-markdown-1) et le rendu lorsque la cellule est exécutée (figure

Chunk id: 166
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
- Ensuite, ligne 2, nous utilisons la fonction `randint(0, 10)` du module *random*. Cette fonction renvoie un nombre entier tiré aléatoirement entre `0` inclus et `10` inclus.

Chunk id: 1
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
Avant d'aborder ce chapitre, nous vous conseillons de relire le chapitre 9 *Fonctions* et de bien en assimiler toutes les notions (et aussi d'en faire les exercices). Nous avons vu dans ce chapitre 9

Chunk id: 2496
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
...     print("choix d'une adénine")
... elif base == "t":
...     print("choix d'une thymine")
... elif base == "c":
...     print("choix d'une cytosine")
... elif base == "g":

Chunk id: 3474
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
du chromosome I de la levure *Saccharomyces cerevisiae* contenu dans le fichier au format GenBank [`NC_001133.gbk`](https://python.sdv.univ-paris-diderot.fr/data-files/NC_001133.gbk).

Chunk id: 3835
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Le sous-module *Entrez* de *Biopython* permet d’utiliser les ressources du NCBI
et notamment d'interroger le site [PubMed](https://www.ncbi.nlm.nih.gov/pubmed/).

Chunk id: 3840
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
>>> res_esearch = Entrez.read(req_esearch)
```  
Ligne 1. On charge directement le sous-module *Entrez*.  
Ligne 2. Lors d'une requête sur le site du NCBI, il est important de définir correctement

Chunk id: 1900
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
dans d'autres langages orientés objet ne représentent pas une pratique pythonique. En Python, pour des raisons de lisibilité, il faudra dans la mesure du possible conserver une syntaxe

Chunk id: 888
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
:   Au plus *m* fois le caractère précédent ou l'expression entre parenthèses précédente.  
Exemple : la *regex* `A(C){,2}T` est retrouvée dans `AT`, `ACT` et `ACCT` mais pas dans `ACCCT` ou `ACC`.

Chunk id: 4161
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
On obtient ainsi le graphique de la figure @fig:transferrine3.  
![Masse moléculaire en fonction de la taille (zoom) avec un modèle linaire.](img/transferrine3.png){ #fig:transferrine3 width=70% }

Chunk id: 2891
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
## 9.4 Renvoi de résultats  
Un énorme avantage en Python est que les fonctions sont capables de renvoyer plusieurs objets à la fois, comme dans cette fraction de code :  
```python

Chunk id: 4387
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
un alignement centré. Il est également possible d'indiquer le caractère qui servira de remplissage lors des alignements (l'espace est le caractère par défaut).

Chunk id: 822
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
qui correspond à la [structure tridimensionnelle de la protéine barstar](http://www.rcsb.org/pdb/explore.do?structureId=1BTA) sur le site de la *Protein Data Bank* (PDB).

Chunk id: 2446
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
d'autres objets), documentez et illustrez l'organisation de cette structure de données sur un exemple simple.

Chunk id: 1696
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Ce code affiche la sortie suivante :  
```
Un salut de la classe fille !
Vous avez le bonjour de la classe mère !
```

Chunk id: 563
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
La fonction `id()` montre que le tuple créé en ligne 6 est bien différent de celui créé en ligne 4 bien qu'ils aient le même nom. Comme on a vu plus haut, ceci est dû à l'opérateur d'affectation

Chunk id: 4566
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
un *widget* : par exemple, lorsque l'utilisateur clique sur un bouton et qu'on souhaite lancer une fonction particulière suite à ce clic. Notez enfin que nous les avons déjà croisées avec le tri de

Chunk id: 4089
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
0   Source        41 non-null     object
1   Deposit Date  41 non-null     object
2   Length        41 non-null     int64
3   MW            41 non-null     float64

Chunk id: 4497
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#20-fenetres-graphiques-et-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Content:
close-box-adv

Chunk id: 4463
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
```python
>>> print(f"On a {nb_G} G et {nb_C} C -> prop GC = {prop_GC:.2f}")
On a 4500 G et 2575 C -> prop GC = 0.48
```  
open-box-adv

Chunk id: 3606
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
open-box-rem  
Depuis le début de ce chapitre, nous avons toujours montré l'affichage d'un *array* dans l'interpréteur :  
```python
>>> a = np.array(range(10))
>>> a

Chunk id: 3974
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
>>> df
a   b   c   d
chat    10  11  12  13
singe   20  21  22  23
souris  30  31  32  33
```  
Ligne 1. Le *dataframe* est créé avec la fonction `DataFrame()` à laquelle

Chunk id: 2181
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
Enfin, avec les environnements Linux ou Mac OS X, il est possible de lancer une commande Unix depuis un notebook Jupyter. Il faut pour cela précéder la commande du symbole « `!` ». La figure

Chunk id: 120
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
Heureusement, Python est orienté objet et permet « d'encapsuler » des variables dans des objets et de s'affranchir définitivement des variables globales (nous verrons cela dans le chapitre 19 *Avoir

Chunk id: 460
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
close-box-rem  
On peut aussi initialiser toutes les clés et les valeurs d'un dictionnaire en une seule opération :  
```python
>>> ani2 = {"nom": "singe", "poids": 70, "taille": 1.75}

Chunk id: 3206
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Les blocs  
- `PS C:\Users\pierre>` pour Windows,
- `iMac-de-pierre:Downloads$` pour Mac OS X,
- `pierre@jeera:~$` pour Linux.

Chunk id: 565
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
utilisé en ligne 6 (`t = t + (2,)`) qui crée un nouvel objet distinct de celui de la ligne 1. Cet exemple montre que les tuples sont peu adaptés lorsqu'on a besoin d'ajouter, retirer, modifier des

Chunk id: 621
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
ci-dessus, la 2e et la 4e variable renvoyées par la fonction seront ignorées dans la suite du code. Cela a le mérite d'éviter de polluer l'attention du lecteur du code.

Chunk id: 1278
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
close-box-def

Chunk id: 4780
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Ici, on va « intercepter » des événements générés par des clics de souris sur le *canvas* et les lier à une fonction / méthode (comme nous l'avions fait pour les clics sur des boutons avec l'option

Chunk id: 2083
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Attention cette classe est différente de celles que l'on a rencontrées jusqu'à maintenant, car elle hérite de la classe `builtins.tuple` (on peut le voir en faisant `help(Citron)`). En ligne 2, on

Chunk id: 559
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
à celui que nous avions rencontré quand on essayait de modifier une chaîne de caractères (cf. chapitre 10). De manière générale, Python renverra un message `TypeError: '[...]' does not support item

Chunk id: 600
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
### 13.3.3 Affectation multiple et le nom de variable `_`

Chunk id: 2081
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Citron(masse=10, couleur='jaune', saveur='acide', forme='ellipsoide')
>>> citron.masse
10
>>> citron.forme
'ellipsoide'
```

Chunk id: 4924
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
chapitre. Rappelons nous de la PEP 20 (cf. chapitre 15 *Bonnes Pratiques en programmation Python*), les assertions « *Simple is better than complex* » ou « *Sparse is better than dense* » nous

Chunk id: 3701
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
Il peut être très utile de concaténer un ou plusieurs *arrays*. Il existe pour cela plusieurs fonctions dans *NumPy*, nous développerons celle qui nous parait la plus intuitive et directe :

Chunk id: 1942
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
Comme `self.masse` appelle la méthode `.set_masse()`, cela permet de contrôler si la valeur est correcte dès l'instanciation. C'est donc une pratique que nous vous recommandons. Si on avait utilisé

Chunk id: 2180
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
![*Magic command* `%whos`.](img/jupyter-whos.png){ #fig:jupyter-whos width=80% }  
![*Magic command* `%history`.](img/jupyter-history.png){ #fig:jupyter-history width=80% }

Chunk id: 2886
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
```python
>>> def fois(x, y):
...     return x*y
...
>>> fois(2, 3)
6
>>> fois(3.1415, 5.23)
16.430045000000003
>>> fois("to", 2)
'toto'
>>> fois([1,3], 2)
[1, 3, 1, 3]
```

Chunk id: 4141
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
On peut zoomer sur le groupe de points le plus à gauche en ne sélectionnant
que les protéines constituées de moins de 400 résidus :
```
>>> dfz = df[df["Length"]<400]
```

Chunk id: 2935
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Une variable est dite **locale** lorsqu'elle est créée dans une fonction. Elle n'existera et ne sera visible que lors de l'exécution de ladite fonction.

Chunk id: 1060
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#23-nommage
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.3 Nommage
Content:
Le nom des variables en Python peut être constitué de lettres minuscules (`a` à `z`), de lettres majuscules (`A` à `Z`), de nombres (`0` à `9`) ou du caractère souligné (`_`). Vous ne pouvez pas

Chunk id: 1975
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
l'utiliser que lorsque cela se révèle vraiment nécessaire, donc avec parcimonie. Le but étant de ne pas surcharger le code inutilement. Cela va dans le sens des recommandations des développeurs de

Chunk id: 230
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
- [*sys*](https://docs.python.org/fr/3/library/sys.html#module-sys) : interaction avec l'interpréteur Python, passage d'arguments (cf. plus bas).

Chunk id: 202
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
NAME
random - Random variable generators.

MODULE REFERENCE
https://docs.python.org/3.7/library/random

Chunk id: 2070
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
les dans la méthode `.__init__()` (et nulle part ailleurs). Par exemple, si vous avez besoin d'une liste comme attribut, créez la plutôt dans le constructeur :

Chunk id: 1902
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
`instance.attribut` pour l'accès aux attributs d'instance, et une syntaxe `instance.attribut = nouvelle_valeur` pour les modifier.

Chunk id: 2806
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
2 est équivalent à 2 et 1), en excluant par ailleurs chaque élément avec lui même (1 et 1, 2 et 2, etc). Pour mieux comprendre ce qui est demandé, la figure @fig:demimatrice indique les cases à

Chunk id: 4744
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
d'une ellipse) ou 20 lignes aléatoires. Lors de la création de ces cercles et lignes, on ne les récupère pas dans une variable car on ne souhaite ni les réutiliser ni changer leurs propriétés par la

Chunk id: 884
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `A(C){2,4}T` est retrouvée dans `ACCT`, `ACCCT` et `ACCCCT` mais pas dans `ACT`, `ACCCCCT` ou `ACCC`.  
`{n,}`

Chunk id: 4225
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#calcul-de-la-distance
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.4 Calcul de la distance
Content:
autre qui contient les coordonnées des $n-1$ derniers carbones alpha. Affichez les dimensions des matrices pour vérification.

Chunk id: 3503
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
`numero_calpha_1 numero_calpha_2 distance`

Chunk id: 3195
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
## 1.5 Premier contact avec Python

Chunk id: 4031
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
On souhaite combiner ces deux *dataframes*, c'est-à-dire connaître pour les 4 villes (Lyon, Paris, Nantes et Strasbourg) le nombre d'animaux. On remarque d'ores et déjà qu'il y a des singes à Lyon et

Chunk id: 892
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`\w`  
: remplace n'importe quel caractère alphanumérique et le caractère souligné (*underscore*) (*w* signifie *word character*), équivalent à `[0-9A-Za-z_]`.  
`\s`

Chunk id: 2729
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
Avant de passer à une autre sorte de boucles (les boucles `while`), nous abordons tout de suite les **comparaisons**. Celles-ci seront reprises dans le chapitre 6 sur les *Tests*.

Chunk id: 2961
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
- Étape 8 : Python quitte la fonction et la valeur renvoyée par celle-ci est affectée à la variable *globale* `resultat`. Notez bien que lorsque Python quitte la fonction, **l'espace des variables

Chunk id: 909
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
N'hésitez pas à explorer ces sites avant de vous lancer dans les exercices ou dans l'écriture de vos propres *regex* !

Chunk id: 2488
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
```python
>>> x = 2
>>> if x == 2:
...     print("Le test est vrai !")
... else:
...     print("Le test est faux !")
...
Le test est vrai !
>>> x = 3
>>> if x == 2:

Chunk id: 3793
Number of Tokens: 103
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
[0.93102132, 0.41864373, 0.45807961, 0.98288744],
[0.48198211, 0.16877376, 0.14431518, 0.74784176],
[0.92913469, 0.08383269, 0.10670144, 0.14554345]])
>>> seuil = 0.3
>>> a[a < seuil] = 0

Chunk id: 247
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
```python
>>> import random
>>> random.randint(0, 10)
4
>>> random.randint(0, 10)
10
>>> random.uniform(0, 10)
6.574743184892878
>>> random.uniform(0, 10)
1.1655547702189106
```

Chunk id: 2497
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
... elif base == "c":
...     print("choix d'une cytosine")
... elif base == "g":
...     print("choix d'une guanine")
...
choix d'une cytosine
```

Chunk id: 858
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Par exemple, pour le programme `egrep` :  
```text
$ egrep "^DEF" herp_virus.gbk
DEFINITION  Human herpesvirus 2, complete genome.
```

Chunk id: 2330
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
1. ce que fait la fonction ou la méthode,
2. ce qu'elle prend en argument,
3. ce qu'elle renvoie.

Chunk id: 1381
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
```  
Étape 1 (voir figure @fig:classe_constructeur1). Au départ, *Python Tutor* nous montre que la classe `Citron` a été mise en mémoire, elle contient pour l'instant la méthode `.__init__()`.

Chunk id: 3493
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
Créez la fonction `trouve_calpha()` qui prend en argument le nom d'un fichier PDB (sous la forme d'une chaîne de caractères), qui sélectionne uniquement les lignes contenant des carbones alpha, qui

Chunk id: 1354
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
if __name__ == "__main__":
citron1 = Citron()
citron1.coucou()
```

Chunk id: 2356
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```
$ conda install -c conda-forge pycodestyle pydocstyle pylint
```  
open-box-def

Chunk id: 2354
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Le site [pep8online](http://pep8online.com/), par exemple, est très simple d'utilisation. On copie / colle le code à évaluer puis on clique sur le bouton *Check code*.

Chunk id: 4127
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
```  
L'argument `index` précise la colonne dont on agrège les données.  
L'argument `values` indique sur quelles colonnes les statistiques sont calculées.

Chunk id: 842
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
sont aussi appelées en anglais *regular expressions* ou en plus court *regex*. Dans la suite de ce chapitre, nous utiliserons souvent le mot *regex* pour désigner une expression régulière. Les

Chunk id: 1198
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#113-test-dappartenance
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.3 Test d'appartenance
Content:
## 11.3 Test d'appartenance  
L'opérateur `in` teste si un élément fait partie d'une liste.  
```python
liste = [1, 3, 5, 7, 9]
>>> 3 in liste
True
>>> 4 in liste
False
>>> 3 not in liste
False

Chunk id: 3992
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
L'attribut `.columns` renvoie le nom des colonnes et permet aussi de renommer
les colonnes d'un *dataframe* :  
```python
>>> df.columns
Index(['a', 'b', 'c', 'd'], dtype='object')

Chunk id: 848
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
des informations d'intérêt comme par exemple récupérer les coordonnées 3D des atomes d'une protéine dans un fichier PDB ou encore extraire les gènes d'un fichier GenBank.

Chunk id: 3203
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
>>>
```  
ou pour Linux :  
```text
pierre@jeera:~$ python
Python 3.7.1 (default, Dec 14 2018, 19:28:38)
[GCC 7.3.0] :: Anaconda, Inc. on linux

Chunk id: 1249
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1163-sequence-dadn-complementaire-inverse
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.3 Séquence d'ADN complémentaire inverse
Content:
### 11.6.3 Séquence d'ADN complémentaire inverse

Chunk id: 4906
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
en pratiquant, voire de convictions philosophiques sur la manière de programmer. Toutefois, nous pensons qu'hériter de la classe `tk.Tk` est une manière plus générale et plus compacte : tout ce qui

Chunk id: 147
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#code
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.1 Prédire la sortie
Subsubsection Name: 12.7.1.3 Code 3
Content:
#### 12.7.1.3 Code 3  
```python
def hello(prenom):
print(f"Bonjour {prenom}")
print(x)


#Programme principal.
x = 10
hello("Patrick")
print(x)
```

Chunk id: 3463
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
caractère correspondant (sous la forme d'une chaîne de caractères). Ainsi `chr(97)` renvoie `'a'`, `chr(98)` renvoie `'b'` et ainsi de suite.

Chunk id: 4124
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
min             max
Length       MW Length       MW
Source
Anas platyrhynchos       686  75731.8    686  75731.8
Gallus gallus            328  36105.8    686  75957.1

Chunk id: 4719
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Il s'agit d'une application dans laquelle il y a une zone de dessin, un bouton dessinant des cercles, un autre des lignes et un dernier bouton qui quitte l'application (figure @fig:exemple2_canvas).

Chunk id: 1297
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#191-construction-dune-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Content:
## 19.1 Construction d'une classe

Chunk id: 3965
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
```python
>>> s[s>30]
c    300
d     40
z     50
dtype: int64
```  
et même combiner plusieurs critères de sélection :  
```python
>>> s[(s>20) & (s<100)]
d    40
z    50
dtype: int64
```

Chunk id: 1781
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
"le constructeur de la classe mère Fruit !")
Fruit.__init__(self, taille, masse, saveur, forme)
print("(3) J'ai fini dans le constructeur de Citron, "
"les attributs sont :\n"

Chunk id: 3807
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
en ajoutant une ligne avec `np.concatenate()` à chaque tour de boucle) ; lorsqu'on ne peut pas utiliser les fonctions de lecture de fichier de *NumPy* pour quelque raison que ce soit, il est tout à

Chunk id: 3875
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
qui contient un pseudo-dictionnaire, qui contient... Oui, c'est compliqué !
Pour faire court, le résumé peut s'obtenir avec l'instruction :  
```python

Chunk id: 317
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
...
le fichier est absent
```  
Dans cet exemple, si le fichier n'existe pas sur le disque, on quitte le programme avec la fonction `exit()` du module *sys* que nous venons de voir.

Chunk id: 2034
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
Il s'agit d'une classe assez impressionnante qui crée des objets
citrons.
Par défaut une instance de Citron contient l'attribut de classe
saveur.
"""
saveur = "acide"

Chunk id: 4845
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
*Separator*, *Sizegrip* et *Treeview*). Typiquement, si vous utilisez *ttk*, nous vous conseillons d'utiliser les *widgets* *ttk* en priorité, et pour ceux qui n'existent pas dans *ttk*, ceux de

Chunk id: 1585
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
Dans __init__(), vous venez de créer un citron: très acide, jaune foncé
Dans citron1.affiche_attributs(): très acide, jaune foncé
Dans le programme principal: sucrée, orange
```

Chunk id: 3409
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
### 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA

Chunk id: 2720
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
Quand utiliser l'une ou l'autre des 2 méthodes ? La plus efficace est celle qui réalise **les itérations directement sur les éléments** :  
```python

Chunk id: 3689
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
possibles](https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html) permettant de changer le format, les séparateurs, etc.

Chunk id: 2048
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
n'oubliez pas que les *docstrings* sont destinées aux utilisateurs de votre classe. Elle doivent donc contenir tout ce dont un utilisateur a besoin pour comprendre ce que fait la classe et comment

Chunk id: 4167
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Sus scrofa              2001-07-03   2001-07-03
```  
Chez l'Homme (`Homo sapiens`), la première structure de transferrine a été déposée dans la PDB

Chunk id: 3823
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
close-box-more

Chunk id: 3418
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
```text
UBI4_SCerevisiae.fasta
La séquence contient WWW bases
La longueur de la séquence est un multiple de 3 nucléotides
La séquence possède XXX codons
10 premières bases : YYYYYYYYYY

Chunk id: 3293
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
puis une tabulation     puis un guillemet"
>>> print('J\'affiche un guillemet simple')
J'affiche un guillemet simple
```

Chunk id: 3695
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
binaire. De même, il existe des fonctions ou méthodes permettant d'écrire au format binaire : [np.save()](https://numpy.org/doc/stable/reference/generated/numpy.save.html) ou

Chunk id: 2665
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Notez bien les types des variables utilisées ici :  
- `animaux` est une **liste** sur laquelle on itère,

Chunk id: 4406
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
```python
>>> f"{perc_GC:10.3f}"
'    47.804'
>>> type(f"{perc_GC:10.3f}")
<class 'str'>
```

Chunk id: 1449
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
méthode interne à la classe `Citron`, on doit utiliser une syntaxe `self.méthode()`. Le `self` sert donc pour accéder aux attributs mais aussi aux méthodes, ou plus généralement à tout ce qui est

Chunk id: 3535
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#171-module-numpy
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Content:
## 17.1 Module *NumPy*

Chunk id: 993
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1642-enzyme-de-restriction
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.2 Enzyme de restriction
Content:
| BbvBI   | GGYRCC       |
| BcoI    | CYCGRG       |
| Psp5II  | RGGWCCY      |
| BbvAI   | GAANNNNTTC   |

Chunk id: 4782
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
La méthode pour faire cela est `.bind()`, voilà pourquoi on parle de *event binding* en anglais. Cette méthode prend en argument le type d'événement à capturer en tant que chaîne de caractères avec

Chunk id: 183
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
vous vous approprierez le vocabulaire. Ici, la syntaxe `module.fonction()` est là pour rappeler de quel module provient la fonction en un coup d’œil !

Chunk id: 3143
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
# 1 Introduction  
## 1.1 C'est quoi Python ?

Chunk id: 2892
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
```python
>>> def carre_cube(x):
...     return x**2, x**3
...
>>> carre_cube(2)
(4, 8)
```

Chunk id: 922
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
Il existe aussi la fonction `match()` dans le module `re` qui fonctionne sur le modèle de `search()`. La différence est qu'elle renvoie un objet du type `SRE_Match` seulement lorsque la *regex*

Chunk id: 23
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
et on pourra ainsi noter que ses variables *locales* (`debut`, `fin`, `liste_vals` et `x`) sont toujours là .

Chunk id: 1888
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
```python
#pythonique
obj.x + obj.y + obj.z

Chunk id: 4440
Number of Tokens: 88
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#341-loperateur
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.1 L'opérateur `%`
Content:
John a 32 ans
>>> nb_G = 4500
>>> nb_C = 2575
>>> prop_GC = (nb_G + nb_C)/14800
>>> print("On a %d G et %d C -> prop GC = %.2f" % (nb_G, nb_C, prop_GC))
On a 4500 G et 2575 C -> prop GC = 0.48
```

Chunk id: 3820
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
est une très bonne ressource pour explorer plus en détails les possibilités de *NumPy*. L'auteur y aborde notamment la puissante notion de « masque ».

Chunk id: 1614
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
def fct_dans_fonction1():
[...]
```

Chunk id: 286
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```python
import sys
print(sys.argv)
```  
Ensuite, dans un *shell*, exécutons le script `test.py` suivi de plusieurs arguments. Par exemple :  
```bash
$ python test.py salut girafe 42

Chunk id: 3361
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Enfin, la méthode `.strip()` permet de « nettoyer les bords » d'une chaîne de caractères :  
```python
>>> chaine = "  Comment enlever les espaces au début et à la fin ?       "
>>> chaine.strip()

Chunk id: 3159
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#12-conseils-pour-installer-et-configurer-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Content:
## 1.2 Conseils pour installer et configurer Python

Chunk id: 1273
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
un objet. Dans notre exemple, la classe correspondrait au « moule » utilisé pour construire autant d'objets citrons que nécessaire.

Chunk id: 1577
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
classe possède par définition son propre espace de noms qui ne peut être en aucun cas confondu avec celui d'une fonction ou d'un programme principal. Reprenons un exemple simple :

Chunk id: 3761
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
nous avions définis uniquement des *arrays* avec des types numériques *int* ou *float*. Il est tout à fait possible de définir des *arrays* de booléens. La fonction `np.full()` vue ci-dessus nous

Chunk id: 2785
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#545-calcul-de-la-moyenne
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.5 Calcul de la moyenne
Content:
Voici les notes d'un étudiant `[14, 9, 6, 8, 12]`. Calculez la moyenne de ces notes. Utilisez l'écriture formatée pour afficher la valeur de la moyenne avec deux décimales.

Chunk id: 1563
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
Dans prog principal i: 1000000
Dans prog principal j: 2
Dans module, i local: -27478524
Dans module, j global: -76
Dans prog principal i: 1000000
Dans prog principal j: 2
```

Chunk id: 2889
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
méfiez-vous tout de même de cette grande flexibilité qui pourrait conduire à des surprises dans vos futurs programmes. En général, il est plus judicieux que chaque argument ait un type précis

Chunk id: 1592
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
```python
class Citron:
def __init__(self):
self.couleur = "jaune"
self.affiche_coucou()
affiche_coucou()

Chunk id: 4849
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
```python
import tkinter as tk
import tkinter.ttk as ttk
```  
Ainsi vous pourrez utiliser des *widgets* de *Tkinter* et de *ttk* en même temps.

Chunk id: 253
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
'G'
>>> random.choices(bases, k=5)
['G', 'A', 'A', 'T', 'G']
>>> random.choices(bases, k=5)
['A', 'T', 'A', 'A', 'C']
>>> random.choices(bases, k=10)

Chunk id: 1101
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#253-operations-illicites
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.3 Opérations illicites
Content:
indique que vous devez utiliser une variable de type *str* c'est-à-dire une chaîne de caractères et pas un *int*, c'est-à-dire un entier.

Chunk id: 1350
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
à l'esprit qu'une méthode est finalement un objet de type fonction. Ainsi, elle peut être vue comme un attribut également, concept que vous croiserez peut-être en consultant de la documentation

Chunk id: 1115
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#28-note-sur-la-division-de-deux-nombres-entiers
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.8 Note sur la division de deux nombres entiers
Content:
>>> x
0.75
>>> type(x)
<class 'float'>
```  
open-box-rem  
Ceci n'était pas le cas en Python 2. Pour en savoir plus sur ce point, vous pouvez consulter le chapitre 21 *Remarques complémentaires*.

Chunk id: 804
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
Créez une fonction `lit_fasta()` qui prend comme argument le nom d'un fichier FASTA sous la forme d'une chaîne de caractères, lit la séquence dans le fichier FASTA et la renvoie sous la forme d'une

Chunk id: 129
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
#Programme principal.
liste_notes = [10, 8, 16, 7, 15]
liste_notes = ajoute_un(liste_notes)
print(liste_notes)
```

Chunk id: 4590
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
toujours être passé en premier et il est vivement conseillé de le préciser. Nous avons passé un autre argument avec le nom `text` pour indiquer, comme vous l'avez deviné, le texte que nous souhaitons

Chunk id: 409
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
démontre la mutabilité des listes : quelle que soit la manière dont on modifie une liste, celle-ci garde le même identifiant.

Chunk id: 966
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
Si vous avez capturé des groupes, il suffit d'utiliser `\\1`, `\\2` (etc.) pour utiliser les groupes correspondants dans la chaîne de caractères substituée. On notera que la syntaxe générale pour

Chunk id: 1869
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
```python
jaune 0
Traceback (most recent call last):
File "./getter_setter.py", line 26, in <module>
citron1.set_masse(-100)
File "./getter_setter.py", line 17, in set_masse

Chunk id: 4731
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
def dessine_lignes(self):
for i in range(20):
x, y, x2, y2 = [rd.randint(1, self.size) for j in range(4)]
self.canv.create_line(x, y, x2, y2, fill=self.rd_col())

Chunk id: 948
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
Les méthodes `.start()` et `.end()` donnent respectivement la position de début et de fin de la zone qui correspond à la *regex*. Notez que la méthode `.search()` ne renvoie que la première zone qui

Chunk id: 4206
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1762-distance-entre-deux-atomes-carbones-alpha-consecutifs-de-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Content:
L'objectif de cet exercice est de calculer la distance entre carbones alpha consécutifs le long de la chaîne peptidique avec module *NumPy*.

Chunk id: 4366
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
plus lisiblement, vous pouvez spécifier dans les accolades `{}` le format qui vous intéresse. Dans le cas présent, vous voulez formater un *float* pour l'afficher avec deux puis trois décimales :

Chunk id: 2877
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
```python
>>> var = hello()
bonjour
>>> print(var)
None
```  
Ceci n'est pas une faute car Python n'émet pas d'erreur, toutefois cela ne présente, la plupart du temps, guère d'intérêt.

Chunk id: 581
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
qui contiennent une collection d'autres objets. En Python, on peut construire des listes qui contiennent des dictionnaires, des tuples ou d'autres listes, mais aussi des dictionnaires contenant des

Chunk id: 1146
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#11-plus-sur-les-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Content:
# 11 Plus sur les listes

Chunk id: 1026
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
valeur que l'on va stocker dedans) se font en même temps. Pour vous en convaincre, testez les instructions suivantes après avoir lancé l'interpréteur :

Chunk id: 1552
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
du programme principal (ou celui du module), donc des variables *globales* s'y trouvant. S'il ne trouve pas de nom, il va chercher dans les commandes *internes* à Python (on parle des [*Built-in

Chunk id: 2275
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
```python
>>> ma_variable = 3
>>> if ma_variable > 1 and ma_variable < 10 \
... and ma_variable % 2 == 1 and ma_variable % 3 == 0:
...     print(f"ma variable vaut {ma_variable}")
...

Chunk id: 1008
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
- La ligne de commentaire d'une séquence au format FASTA est de la forme
`>sp|O95139|NDUB6_HUMAN NADH dehydrogenase [...]`
Elle débute toujours pas le caractère `>`.

Chunk id: 2573
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
### 6.7.7 Conjecture de Syracuse (exercice +++)

Chunk id: 2610
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
dit composé. Par exemple $6 = 2 \times 3$ est composé, tout comme $21 = 3 \times 7$, mais 11 est premier car 1 et 11 sont les seuls diviseurs de 11. Les nombres 0 et 1 ne sont ni premiers ni

Chunk id: 1559
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
print("Dans prog principal i:", i)
print("Dans prog principal j:", j)
```  
Le module `mod.py` contient les instructions suivantes :  
```python
def fct():
i = -27478524

Chunk id: 4154
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
rvalue=0.993825553885062, pvalue=1.664932379936294e-22,
stderr=2.765423239336685)
```  
Ce modèle linaire nous indique qu'un résidu a une masse d'environ 116 Dalton,

Chunk id: 94
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
une fonction, est de la passer explicitement (comme nous l'avons fait pour la copie de liste) afin qu'elle reste intacte dans le programme principal.

Chunk id: 1130
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
Si ces notions vous semblent obscures, ne vous inquiétez pas, au fur et à mesure que vous avancerez dans le cours, tout deviendra limpide.

Chunk id: 3598
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Attention, cette modification de la forme de l'*array* par la méthode `.resize()` est faite « sur place » (*in place*), c'est-à-dire que la méthode ne renvoie rien mais l'*array* est bel et bien

Chunk id: 3632
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
Dans le cas d'un objet *array* à deux dimensions, vous pouvez récupérer une ligne complète (d'indice *i*), une colonne complète (d'indice *j*) ou bien un seul élément. La figure

Chunk id: 1687
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
class Mere2:
#contenu de la classe mère 2


class Fille1(Mere1):
#contenu de la classe fille 1

Chunk id: 4920
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
le futur. Cela est bien utile lorsqu'on distribue notre classe à la communauté et que l'on souhaite que les futurs utilisateurs puissent passer des arguments *Tkinter* au constructeur de notre

Chunk id: 829
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
*Conseil* : vous trouverez des explications sur le format PDB et des exemples de code pour lire ce type de fichier en Python dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 1564
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
Dans module, j global: -76
Dans prog principal i: 1000000
Dans prog principal j: 2
```  
Lignes 3 et 4. On a bien les valeurs de `i` et `j` définies dans le programme principal de `test.py`.

Chunk id: 4883
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
class Application(tk.Frame):
def __init__(self, racine=None):
tk.Frame.__init__(self, racine)
self.racine = racine
self.create_widgets()

Chunk id: 686
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
*set* sera défini seulement par des valeurs `{valeur_1, valeur_2, ...}` alors que le dictionnaire aura toujours des couples clé:valeur `{clé_1: valeur_1, clé_2: valeur_2, ...}`.

Chunk id: 1994
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
```python
>>> citron = Citron()
Coucou je suis dans le set
>>> citron.masse
Coucou je suis dans le get
0
>>> citron.masse = -16
Coucou je suis dans le set
Traceback (most recent call last):

Chunk id: 4757
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
import tkinter as tk
import random as rd

Chunk id: 607
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
Nous avons appelé l'opération `x, y, z = 1, 2, 3` affectation multiple pour signifier que l'on affectait des valeurs à plusieurs variables en même temps. Toutefois, vous pourrez rencontrer aussi

Chunk id: 2970
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Enfin, comme vous avez pu le constater, *Python Tutor* nous a grandement aidé à comprendre ce qui se passait. N'hésitez pas à l'utiliser sur des exemples ponctuels, ce site vous aidera à visualiser

Chunk id: 2549
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
- La ligne 3 est intuitive car elle ressemble à un encadrement mathématique.
- La ligne 5 utilise la fonction valeur absolue `abs()` et est plus compacte.  
close-box-adv

Chunk id: 4251
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
- Calculez le centre de masse `COM` de la membrane, ainsi que de la monocouche du haut `COM_upper` et du bas `COM_lower`. Pensez aux méthodes de calcul sur les *arrays* et l'argument `axis`.

Chunk id: 806
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
chaîne de caractères. N'hésitez pas à vous inspirer d'un exercice similaire du chapitre 10 *Plus sur les chaînes de caractères*.

Chunk id: 1817
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
`ClasseMere.__init__()` qui est selon nous plus lisible (on voit explicitement le nom de la classe employée, même s'il y a plusieurs classes mères).  
close-box-rem

Chunk id: 3774
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Maintenant que les *arrays* de booléens ont été introduits, nous pouvons définir les masques booléens :  
open-box-def

Chunk id: 1417
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Cette rubrique va nous aider à mieux comprendre le rôle du `self` à travers quelques exemples simples. Regardons le code suivant dans lequel nous créons une nouvelle méthode `.affiche_attributs()`:

Chunk id: 4482
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#361-affichage-dans-linterpreteur-et-dans-un-programme
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.1 Affichage dans l'interpréteur et dans un programme
Content:
### 3.6.1 Affichage dans l'interpréteur et dans un programme  
Ouvrez l'interpréteur Python et tapez l'instruction `1+1`. Que se passe-t-il ?

Chunk id: 4285
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
taille. Au fait, en quelle année la barstar apparaît pour la première fois dans une publication scientifique ?

Chunk id: 1639
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Comment Python permet-il ces prouesses que sont le polymorphisme et la redéfinition des opérateurs ? Et bien, il utilise des méthodes dites *magiques*.  
open-box-def

Chunk id: 3815
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
et *matplotlib* (et aussi aux *notebooks Jupyter*, voir le chapitre suivant), il permet de faire de l'analyse scientifique. On verra un peu plus loin dans ce chapitre que la puissance de *NumPy* est

Chunk id: 3725
Number of Tokens: 77
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
```python
>>> a = np.resize(np.arange(4), (2, 2))
>>> a
array([[0, 1],
[2, 3]])
>>> np.dot(a, a)
array([[ 2,  3],
[ 6, 11]])
>>> a * a
array([[0, 1],
[4, 9]])
```

Chunk id: 3244
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#17-commentaires
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.7 Commentaires
Content:
Les commentaires doivent expliquer votre code dans un langage humain.
L'utilisation des commentaires est rediscutée dans le chapitre 15 *Bonnes pratiques en programmation Python*.

Chunk id: 2585
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
Syracuse atteigne le chiffre 1 puis entame son cycle trivial. Vous pourrez tester votre algorithme avec un nombre arbitraire d'itérations, typiquement 20 ou 100, suivant votre nombre *n* de départ.

Chunk id: 996
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1643-nettoyeur-despaces
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.3 Nettoyeur d'espaces
Content:
contient le célèbre poème de Jean de la Fontaine. Malheureusement, la personne qui l'a recopié a parfois mis plusieurs espaces au lieu d'un seul entre les mots.

Chunk id: 979
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#164-exercices
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Content:
## 16.4 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 366
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13-containers-dictionnaires-tuples-et-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Content:
dictionnaires, les tuples et les *sets*. Comme les listes ou les chaînes de caractères, ces trois nouveaux types sont appelés communémement des **containers**. Avant d'aborder en détail ces nouveaux

Chunk id: 1079
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
un *float* (car ce type est plus général). Par ailleurs, l'utilisation de parenthèses permet de gérer les priorités.

Chunk id: 4716
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
close-box-warn

Chunk id: 69
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
```python
>>> def ma_fonction():
...     print(x)
...
>>> x = 3
>>> ma_fonction()
3
>>> print(x)
3
```

Chunk id: 659
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
close-box-adv

Chunk id: 3457
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
mot xxx est composable à partir de yyy` si le mot (`xxx`) est composable à partir de la séquence de lettres (`yyy`) ou `Le mot xxx n'est pas composable à partir de yyy` sinon.

Chunk id: 1812
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
(voir chapitre 20) pour la construction d'interfaces graphiques, nous en verrons de nombreux exemples.

Chunk id: 601
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
L'affectation multiple est un mécanisme très puissant et important en Python. Pour rappel, il permet d'effectuer sur une même ligne plusieurs affectations en même temps, par exemple : `x, y, z = 1,

Chunk id: 4435
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
Enfin, nous indiquons à la fin de cette rubrique nos conseils sur quelle méthode utiliser.

Chunk id: 4210
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
Voici le code pour extraire les coordonnées atomiques des carbones alpha de la barstar :  
```python
with open("1bta.pdb", "r") as f_pdb, open("1bta_CA.txt", "w") as f_CA:
for ligne in f_pdb:

Chunk id: 276
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
est `random.random()`, elle renvoie un *float* aléatoire entre 0 et 1 tiré dans une **distribution uniforme**. Si on tire beaucoup de nombres, on aura la même probabilité d'obtenir tous les nombres

Chunk id: 2144
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
- Cliquer sur le menu *Insert*, puis *Insert Cell Below*.  
Une nouvelle cellule vide devrait apparaître.

Chunk id: 4184
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
```python
>>> (df["Deposit Date"].value_counts()
...                    .resample("A")
...                    .count()
...                    .sort_values(ascending=False)

Chunk id: 1755
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
>>> dir(c)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__',
'__format__', '__ge__', '__getattribute__', '__gt__', '__hash__',

Chunk id: 978
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
Nous espérons vous avoir convaincu de la puissance du module *re* et des expressions régulières. Alors, plus de temps à perdre, à vos *regex* !

Chunk id: 3350
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animal = "girafe"
>>> animal.find("i")
1
>>> animal.find("afe")
3
>>> animal.find("z")
-1
>>> animal.find("tig")
-1
```

Chunk id: 2864
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
```python
>>> def carre(x):
...     return x**2
...
>>> print(carre(2))
4
```

Chunk id: 3296
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
```  
Quand on souhaite écrire un texte sur plusieurs lignes, il est très commode d'utiliser les guillemets triples qui conservent le formatage (notamment les retours à la ligne) :  
```python

Chunk id: 2632
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
- [Patrick] « Plus grand. »
- [Pierre]  « Est-ce que ton nombre est plus petit, plus grand ou égal à 79 ? »
- [Patrick] « Égal. C'est le nombre auquel j'avais pensé. Bravo ! »

Chunk id: 4150
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
entre le nombre de résidus d'une protéine et sa masse moléculaire.  
En réalisant une régression linéaire, on détermine les paramètres de

Chunk id: 199
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```  
On constate alors qu'un rappel (ligne 5) d'une fonction du module *random* après l'avoir vidé de la mémoire (ligne 4) retourne un message d'erreur (lignes 6-8).

Chunk id: 4484
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#361-affichage-dans-linterpreteur-et-dans-un-programme
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.1 Affichage dans l'interpréteur et dans un programme
Content:
ce script en tapant `python test.py` dans un *shell*. Que se passe-t-il ? Pourquoi ? Faites en sorte d'afficher le résultat de l'addition `1+1` en exécutant le script dans un *shell*.

Chunk id: 3400
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
'swapcase', 'title', 'translate', 'upper', 'zfill']
```  
Pour l'instant, vous pouvez ignorer les méthodes qui commencent et qui se terminent par deux tirets bas (*underscores*) `__`.

Chunk id: 3526
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
de travailler sur des données biologiques, comme des séquences (nucléiques et protéiques) ou des structures (fichiers PDB). Le module *matplotlib* permet de créer des graphiques depuis Python. Enfin,

Chunk id: 911
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
Dans le module *re*, la fonction `search()` est incontournable. Elle permet de rechercher un motif, c'est-à-dire une *regex*, au sein d'une chaîne de caractères avec une syntaxe de la forme

Chunk id: 2995
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
Avez-vous réussi à prédire la sortie correctement ?  
open-box-rem

Chunk id: 3883
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
mone synthesized largely by the liver that inhibits dietary iron ab
sorption and macrophage iron efflux. Studies of inherited human dis

Chunk id: 4734
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
classe `AppliCanevas` hérite de la classe générale `tk.Tk` et la fenêtre Tk se retrouve dans la variable `self`.

Chunk id: 2426
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
commande `help()` pourra afficher. Bien sûr, ces métadonnées ne sont pas obligatoires, mais elles sont utiles lorsque le code est distribué à la communauté.

Chunk id: 4885
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
fg="green", command=self.quit)
self.label.pack()
self.bouton.pack()

Chunk id: 4992
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
Le rendu final attendu est montré dans la figure @fig:tk_Sierpinski. On utilisera un canevas de 400x400 pixels. Il y a aura un bouton « Quitter » et un bouton « Launch ! » qui calculera et affichera

Chunk id: 3256
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
instructions par rapport à la ligne précédente (`pour chaque base [...]`). Ce décalage est appelé **indentation**, et l'ensemble des lignes indentées constitue un **bloc d'instructions**.

Chunk id: 2622
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-2-plus-optimale-et-plus-rapide-mais-un-peu-plus-compliquee
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)
Content:
cette méthode, il faudra initialiser la liste de nombres premiers avec le premier nombre premier (donc 2 !).

Chunk id: 961
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
'pi vaut quelque chose et e vaut 2.72'
```  
Encore plus puissant, il est possible d'utiliser dans le remplacement des groupes qui ont été « capturés » avec des parenthèses.  
```python

Chunk id: 3283
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
```python
>>> animaux = "girafe tigre"
>>> animaux[4]
'f'
>>> animaux[4] = "F"
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 2821
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
*Conseil* : vous utiliserez l'instruction `random.choice([-1,1])` qui renvoie au hasard les valeurs -1 ou 1 avec la même probabilité. Avant d'utiliser cette instruction vous mettrez au tout début de

Chunk id: 2166
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
Notez qu'une cellule Markdown n'a pas le marqueur `In [ ]` à sa gauche.

Chunk id: 8
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
des bonnes pratiques à la fin du chapitre. Enfin, nous vous conseillons de tester tous les exemples ci-dessous avec le site [*Python Tutor*](http://www.pythontutor.com/) afin de suivre l'état des

Chunk id: 2842
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
2. Qui effectue une action.
3. Et qui renvoie un objet Python ou rien du tout.  
![Fonctionnement schématique d'une fonction.](img/schema_fonction.png){ #fig:schema_fonction width=90% }

Chunk id: 2475
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
# 6 Tests  
## 6.1 Définition

Chunk id: 3072
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
puis lui ajouter deux éléments, l'un après l'autre, d'abord avec la concaténation :  
```python
>>> a = a + [15]
>>> a
[15]
>>> a = a + [-5]
>>> a
[15, -5]
```  
puis avec la méthode `.append()` :

Chunk id: 2609
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
entier positif. Par opposition, un nombre non nul produit de deux nombres entiers différents de 1 est dit composé. Par exemple $6 = 2 \times 3$ est composé, tout comme $21 = 3 \times 7$, mais 11 est

Chunk id: 2277
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
À l'intérieur d'une parenthèse, on peut revenir à la ligne sans utiliser le caractère `\`. C'est particulièrement utile pour préciser les arguments d'une fonction ou d'une méthode, lors de sa

Chunk id: 2884
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
que vous lui passez, dès lors que les opérations que vous effectuez avec ces arguments sont valides. Python est en effet connu comme étant un langage au « typage dynamique », c'est-à-dire qu'il

Chunk id: 3306
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
close-box-rem  
Il existe différents *stringprefixes* en Python, nous vous montrons ici les deux qui nous apparaissent les plus importants.

Chunk id: 4711
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
![Exemple 1 de *canvas* avec le système de coordonnées. Le système de coordonnées est montré en vert et n'apparaît pas sur la vraie fenêtre *Tkinter*.](img/example_canvas1_coor.png "Exemple 1 de

Chunk id: 4965
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
- Le [livre](https://inforef.be/swi/python.htm) de Gérard Swinnen qui montre de nombreux exemples d'applications tkinter (pdf en libre téléchargement).

Chunk id: 924
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
```python
>>> animaux = "girafe tigre singe"
>>> re.search("tigre", animaux)
<_sre.SRE_Match object at 0x7fefdaefe718>
>>> re.match("tigre", animaux)
>>>
>>> animaux = "tigre singe"

Chunk id: 1693
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
if __name__ == "__main__":
fille = Fille()
print(fille.salut())
print(fille.bonjour())
```  
Lignes 1 à 3. On définit une classe `Mere` avec une méthode `.bonjour()`.

Chunk id: 2473
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
du site *OpenClassrooms* et [*Structuring Python Programs*](https://realpython.com/python-program-structure/)

Chunk id: 2766
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
la boucle ne s'arrêtera jamais (sauf en pressant *Ctrl-C*) puisque la condition `i < 10` sera toujours vraie.

Chunk id: 218
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
```python
>>> import random
>>> dir(random)
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST',
'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodT

Chunk id: 355
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
$$
p = \frac{\mbox{aire du cercle}}{\mbox{aire du carré}} = \frac{\pi}{4}
$$  
Soit $n$, le nombre de points effectivement dans le cercle, il vient alors  
$$
p = \frac{n}{N} = \frac{\pi}{4},
$$

Chunk id: 3898
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
```python
import matplotlib.pyplot as plt

Chunk id: 2389
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
script_quality_not_ok.py:6:29: C0326: Exactly one space required after comma
def Multiplie_nombres(nombre1,nombre2 ):
^ (bad-whitespace)

Chunk id: 4399
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#324-autres-details-sur-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.4 Autres détails sur les *f-strings*
Content:
```python
>>> print(f"Accolades littérales {{}} ou {{ ou }} et pour le formatage {10}")
Accolades littérales {} ou { ou } et pour le formatage 10
```

Chunk id: 1787
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Lignes 11 à 17. Création d'une méthode `.affiche_conseil()` qui retourne une chaîne contenant le type de fruit, les attributs d'instance du fruit, et un conseil de consommation.

Chunk id: 4174
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
```  
Si on souhaite une réponse plus globale, par exemple, à l'échelle de
l'année, la méthode `.resample()` calcule le nombre de structures déposées par
année (en fournissant l'argument `A`) :

Chunk id: 715
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
>>> set(liste_1) | set(liste_2)
{0, 1, 2, 3, 4, 5}
>>> set(liste_1) & set(liste_2)
{1, 3, 5}
```  
Notez qu'il existe des méthodes permettant de réaliser ces opérations d'union et d'intersection :

Chunk id: 1622
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Nous allons voir maintenant des propriétés très importantes des classes en Python, le polymorphisme dans cette rubrique et l'héritage dans la suivante. Ces deux concepts donnent un surplus de

Chunk id: 4916
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
Dans l'exemple ci-dessus, `*args` et `**kwargs` sont inutiles car lors de l'instanciation de notre application, on ne passe aucun argument : `app = MonApplication()`. Toutefois, on pourrait être

Chunk id: 34
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
d'obtenir une efficacité redoutable dans la résolution de certains algorithmes comme le [tri rapide](https://fr.wikipedia.org/wiki/Tri_rapide) (en anglais *quicksort*).

Chunk id: 738
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
Pour aller plus loin sur les *sets* et les *frozensets*, voici deux articles sur les sites [programiz](https://www.programiz.com/python-programming/set) et

Chunk id: 2477
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
de complexité car ils permettent à l'ordinateur de prendre des décisions. Pour cela, Python utilise l'instruction `if` ainsi qu'une comparaison que nous avons abordée au chapitre précédent. Voici un

Chunk id: 3797
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
### 17.1.11 Quelques conseils

Chunk id: 1951
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
: vous l'aurez compris, cela partira dans une récursion infinie et mènera à une erreur du type `RecursionError: maximum recursion depth exceeded`. Cela serait vrai aussi si vous aviez une fonction

Chunk id: 1440
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
comme pour les fonctions classiques, `var` est finalement une variable locale au sein de la méthode `.__init__()` et n'est plus visible lorsque l'exécution de cette dernière est terminée (cf.

Chunk id: 2093
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Lignes 5 à 8. Les attributs / éléments sont non modifiables !  
Lignes 9 à 15. Les *namedtuples* sont itérables.

Chunk id: 293
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
peut donner un argument à cette fonction (en général une chaîne de caractères) qui sera renvoyé au moment où Python quittera le script. Par exemple, si vous attendez au moins un argument en ligne de

Chunk id: 1309
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Lignes 4 et 5. Quand on tape le nom de notre classe `Citron`, Python nous indique que cette classe est connue.

Chunk id: 588
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
0 75
1 -75
2 0
>>> for bidule in enumerate([75, -75, 0]):
...     print(bidule, type(bidule))
...
(0, 75) <class 'tuple'>
(1, -75) <class 'tuple'>
(2, 0) <class 'tuple'>
```

Chunk id: 2564
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#675-notes-et-mention-dun-etudiant
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.5 Notes et mention d'un étudiant
Content:
### 6.7.5 Notes et mention d'un étudiant

Chunk id: 4419
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#33-ecriture-scientifique
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.3 Écriture scientifique
Content:
Pour les nombres très grands ou très petits, l'écriture formatée permet d'afficher un nombre en notation scientifique (sous forme de puissance de 10) avec la lettre `e` :  
```python

Chunk id: 4495
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#20-fenetres-graphiques-et-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Content:
Dans ce chapitre, nous allons utiliser des classes, nous vous conseillons de bien relire le chapitre 19 sur le sujet. Par ailleurs, nous vous conseillons de relire également la rubrique *Arguments

Chunk id: 3023
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
La fonction renverra une liste de $n$ *floats* aléatoires entre *debut* et *fin*. Pour générer un nombre aléatoire dans un intervalle donné, utilisez la fonction `uniform()` du module *random* dont

Chunk id: 356
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
$$
p = \frac{n}{N} = \frac{\pi}{4},
$$  
d'où  
$$
\pi = 4 \times \frac{n}{N}.
$$  
Déterminez une approximation de $\pi$ par cette méthode. Pour cela, pour $N$ itérations :

Chunk id: 188
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
L'instruction `from random import *` importe toutes les fonctions du module *random*. On peut ainsi utiliser toutes ses fonctions directement, comme par exemple `randint()`  et `uniform()` qui

Chunk id: 1410
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
Lors de l'instanciation, il est possible de passer des arguments au constructeur. Comme pour les fonctions, on peut passer des arguments positionnels ou par mot-clé et en créer autant que l'on veut

Chunk id: 3492
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
qui correspond à la [structure tridimensionnelle de la protéine barstar](http://www.rcsb.org/pdb/explore.do?structureId=1BTA) sur le site de la *Protein Data Bank* (PDB).

Chunk id: 2272
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
```python
#code recommandé :
x1 = 1
x2 = 3
x_old = 5
#code non recommandé :
x1    = 1
x2    = 3
x_old = 5
```

Chunk id: 28
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
Ainsi, le programmeur est libre de faire tous les appels qu'il souhaite. Une fonction peut appeler une autre fonction, cette dernière peut appeler une autre fonction et ainsi de suite (et autant de

Chunk id: 1413
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
if __name__ == "__main__":
citron1 = Citron(100)
print("citron1:", citron1.__dict__)
citron2 = Citron(150, couleur="blanc")
print("citron2:", citron2.__dict__)
```

Chunk id: 1472
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
def __init__(self, couleur="jaune", taille="standard", masse=0):
self.couleur = couleur #attribut d'instance
self.taille = taille #attribut d'instance

Chunk id: 4097
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
```  
L'affichage des données n'est pas modifié :  
```python
>>> df.head()
Source Deposit Date  Length       MW
PDB ID
1A8E          Homo sapiens   1998-03-24     329  36408.4

Chunk id: 626
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
pratiques en programmation Python* que ce style de nommage est appelé *snake_case*. Toutefois, il faut éviter d'utiliser les *underscores* en début et/ou en fin de nom de variable (par exemple :

Chunk id: 2421
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
if __name__ == "__main__":
#ici débute le programme principal
[...]
```

Chunk id: 3331
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
## 10.5 Méthodes associées aux chaînes de caractères  
Voici quelques [méthodes](https://docs.python.org/fr/3/library/string.html) spécifiques aux objets de type `str` :  
```python
>>> x = "girafe"

Chunk id: 2374
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ligne 3. Il manque un espace après la virgule qui sépare les arguments `nombre1` et `nombre2` dans la définition de la fonction `Multiplie_nombres()` à la ligne 6 (colonne 30) du script.

Chunk id: 350
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
### 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)

Chunk id: 681
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
sont les chaînes de caractères, les tuples, les entiers, les *floats*, les booléens et les *frozensets* (cf. plus bas) ; les objets non hachables que l'on connait sont les listes, les *sets* et les

Chunk id: 4760
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
self.size = 50
#Pas de deplacement.
self.dx, self.dy = 20, 20
#Création et packing du canvas.
self.canv = tk.Canvas(self, bg='light gray', height=400, width=400)
self.canv.pack()

Chunk id: 2480
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
et un second :
```python
>>> x = "souris"
>>> if x == "tigre":
...     print("Le test est vrai !")
...
```  
Il y a plusieurs remarques à faire concernant ces deux exemples :

Chunk id: 466
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
noms que les chiffres. Ainsi, l'usage des dictionnaires rend en général le code plus lisible. Par exemple, si nous souhaitions stocker les coordonnées $(x, y, z)$ d'un point dans l'espace : `coors =

Chunk id: 4507
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
nom du fichier d'entrée par l'intermédiaire d'une boîte de dialogue, et de contrôler les options en cliquant sur des boutons, ou des « listes de choix ». Une telle GUI pourrait ressembler à la figure

Chunk id: 4380
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
>>> print(f"Ce génome contient {nb_G:d} G et {nb_C:d} C, soit un %GC de {perc_GC:.2f} %")
Ce génome contient 4500 G et 2575 C, soit un %GC de 47.80 %
```

Chunk id: 2840
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
à Python comme `range()` ou `len()`. Pour l'instant, une fonction est à vos yeux une sorte de « boîte noire » (voir figure @fig:schema_fonction) :

Chunk id: 3014
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#985-sequence-complementaire
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.5 Séquence complémentaire
Content:
`seq = ["A", "T", "C", "G", "A", "T", "C", "G", "A", "T", "C"]`
affichez `seq` et sa séquence complémentaire (en utilisant votre fonction `seq_comp()`).

Chunk id: 4283
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#distribution-des-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.4 Distribution des années de publication des articles relatifs à la barstar
Content:
la méthode `.sort()`. Créez maintenant une seconde liste `y` qui contient, dans l'ordre, le nombre de publications associées à chaque années. Bien évidemment, les listes `x` et `y` doivent avoir la

Chunk id: 67
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
...
>>> ma_fonction(2)
x vaut 2 dans la fonction
>>> print(x)
Traceback (most recent call last):
File "<stdin>", line 1, in ?
NameError: name 'x' is not defined
```

Chunk id: 4530
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
« linéairement », c'est-à-dire que les instructions du programme principal s'enchaînaient les unes derrière les autres (avec bien sûr de possibles appels à des fonctions). Avec une GUI, l'exécution

Chunk id: 2712
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#513-nommage-de-la-variable-diteration
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.3 Nommage de la variable d'itération
Content:
indice ou *index* en anglais). Nous vous conseillons de suivre cette convention afin d'éviter les confusions, si vous itérez sur les indices vous pouvez appeler la variable d'itération `i` (par

Chunk id: 1474
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
def augmente_masse(self, valeur):
self.masse += valeur

Chunk id: 2213
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
Afin d'améliorer le langage Python, la communauté qui développe Python publie régulièrement des [*Python Enhancement Proposal*](https://www.python.org/dev/peps/) (PEP), suivi d'un numéro. Il s'agit

Chunk id: 2069
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
- Si vous avez besoin d'attributs modifiables, utilisez des attributs d'instance et initialisez les dans la méthode `.__init__()` (et nulle part ailleurs). Par exemple, si vous avez besoin d'une

Chunk id: 3138
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#4102-saisons
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Subsection Name: 4.10.2 Saisons
Content:
ces saisons. Créez ensuite une liste `saisons` contenant les listes `hiver`, `printemps`, `ete` et `automne`. Prévoyez ce que renvoient les instructions suivantes, puis vérifiez-le dans

Chunk id: 1212
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
Si on regarde à nouveau dans *Python Tutor* (Figure @fig:copy_list2), on voit clairement que l'utilisation d'une tranche `[:]` ou de la fonction `list()` crée des copies explicites. Chaque flèche

Chunk id: 1982
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
un objet *property*. La réponse à cela est simple, dites-le clairement dans la documentation de votre classe via les *docstrings* (voir la rubrique ci-dessous).

Chunk id: 3229
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Il existe de nombreux autres langages interprétés comme [Perl](http://www.perl.org) ou [R](http://www.r-project.org). Le gros avantage de ce type de langage est qu'on peut immédiatement tester une

Chunk id: 3286
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#102-chaines-de-caracteres-et-listes
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.2 Chaînes de caractères et listes
Content:
Pour cela, n'oubliez pas que les opérateurs de concaténation (`+`) et de duplication (`*`) (introduits dans le chapitre 2 *Variables*) peuvent vous aider. Vous pouvez également générer une liste, qui

Chunk id: 1366
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
spéciale nommée `.__init__()` : cette méthode s'appelle le « constructeur » de la classe. Il s'agit d'une méthode spéciale dont le nom est entouré de doubles *underscores* : en effet, elle sert au

Chunk id: 2693
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
les *Listes* et qui est aussi bien commode pour faire une boucle sur une liste d'entiers de manière automatique :

Chunk id: 3568
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
>>> w
array([[1, 2],
[3, 4],
[5, 6]])
```  
On peut aussi créer des tableaux à trois dimensions en passant comme argument à la fonction `array()` une liste de listes de listes :  
```python

Chunk id: 3560
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
que celui-ci est considéré comme un **vecteur**. Par conséquent, on peut effectuer des opérations **élément par élément** sur ce type d'objet, ce qui est bien commode lorsqu'on analyse de grandes

Chunk id: 3479
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
[...]
230101 tgttagtgtt agtattaggg tgtggtgtgt gggtgtggtg tgggtgtggg tgtgggtgtg
230161 ggtgtgggtg tgggtgtggt gtggtgtgtg ggtgtggtgt gggtgtggtg tgtgtggg
//
```

Chunk id: 1914
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
- L'instruction `instance.attribut = valeur` appellera la méthode
`.mutateur()`.
- L'instruction `del instance.attribut` appellera la méthode
`.destructeur()`.

Chunk id: 777
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
Le [module *collections*](https://docs.python.org/fr/3/library/collections.html) contient d'autres types de *containers* qui peuvent se révéler utiles, c'est une véritable mine d'or ! Nous

Chunk id: 4863
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
: ceci mettra à jour tous les *widgets* utilisant cette variable `var`. Il existe aussi la méthode `var.get()` qui récupère la valeur actuelle contenue dans `var`. Enfin, il faudra lors de la

Chunk id: 4485
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#362-poly-a
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.2 Poly-A
Content:
### 3.6.2 Poly-A  
Générez une chaîne de caractères représentant un brin d'ADN poly-A (c'est-à-dire qui ne contient que des bases A) de 20 bases de longueur, sans taper littéralement toutes les bases.

Chunk id: 4137
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
>>> plt.ylabel("Masse moléculaire (Dalton)")
Text(0, 0.5, 'Masse moléculaire (Dalton)')
>>> plt.savefig("transferrine1.png")
```

Chunk id: 4258
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1765-annees-de-publication-des-articles-relatifs-a-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Content:
### 17.6.5 Années de publication des articles relatifs à la barstar  
L'objectif de cet exercice est d'interroger automatiquement la base de données

Chunk id: 3581
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
- `.size` renvoie le nombre total d'éléments contenus dans l'`array`.  
```python
>>> v = np.arange(4)
>>> v
array([0, 1, 2, 3])
>>> v.ndim
1
>>> v.shape
(4,)
>>> v.size
4

Chunk id: 4010
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
```  
On peut également utiliser les tranches (comme pour les listes) :  
```python
>>> df.iloc[0:2]
Paris  Lyon  Nantes  Pau
chat      10    11      12   13
singe     20    21      22   23
```

Chunk id: 1401
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Étape 4 (voir figure @fig:classe_constructeur4). De retour dans le programme principal, *Python Tutor* nous indique que `citron1` est une instance de la classe `Citron` par une flèche pointant vers

Chunk id: 2556
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#672-sequence-complementaire-dun-brin-dadn
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.2 Séquence complémentaire d'un brin d'ADN
Content:
### 6.7.2 Séquence complémentaire d'un brin d'ADN  
La liste ci-dessous représente la séquence d'un brin d'ADN :  
`["A", "C", "G", "T", "T", "A", "G", "C", "T", "A", "A", "C", "G"]`

Chunk id: 274
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
Quand on utlise des nombres aléatoires, il est fondamental de connaitre la distribution de probablités utilisée par la fonction. Par exemple, La fonction de base du module random est

Chunk id: 1339
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
Une **variable de classe** ou **attribut de classe** est un attribut qui sera identique pour chaque instance. On verra plus bas que de tels attributs suivent des règles différentes par rapport aux

Chunk id: 3311
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
L'ajout du `r` va forcer Python à ne pas interpréter le `\n` comme un retour à la ligne, mais comme un *backslash* littéral suivi d'un *n*. Quand on demande à l'interpréteur d'afficher cette chaîne

Chunk id: 2540
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
```python
>>> 0.3
0.3
>>> f"{0.3:.5f}"
'0.30000'
>>> f"{0.3:.60f}"
'0.299999999999999988897769753748434595763683319091796875000000'
>>> f"{3 - 2.7:.60f}"

Chunk id: 3941
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
Lignes 7 et 8. On calcule la distribution des différentes bases dans la séquence. On utilise pour cela la méthode `count()` qui renvoie le nombre de fois qu'une chaîne de caractères (les différentes

Chunk id: 886
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `A(C){2,}T` est retrouvée dans `ACCT`, `ACCCT` et `ACCCCT` mais pas à `ACT` ou `ACCC`.  
`{,m}`

Chunk id: 2527
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#65-instructions-break-et-continue
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.5 Instructions `break` et `continue`
Content:
## 6.5 Instructions `break` et `continue`  
Ces deux instructions permettent de modifier le comportement d'une boucle (`for` ou `while`) avec un test.  
L'instruction `break` stoppe la boucle.

Chunk id: 464
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
Après ce premier tour d'horizon, on voit tout de suite l'avantage des dictionnaires. Pouvoir retrouver des éléments par des noms (clés) plutôt que par des indices. Les humains retiennent mieux les

Chunk id: 2951
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
- Étape 4 : La fonction `carre()` est appelée et on lui passe en argument l'entier `z`. La fonction s'exécute et un nouveau cadre est créé dans lequel *Python Tutor* va indiquer toutes les variables

Chunk id: 4228
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
### 17.6.3 Jour le plus chaud

Chunk id: 528
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
```  
On obtient ici une erreur car Python ne sait pas comparer une chaîne de caractères (`singe`) avec des valeurs numériques (`70` et `1.75`).  
close-box-rem

Chunk id: 4033
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
mais pas de lapin et qu'il y a des lapins à Nantes et Strasbourg mais pas de singe. Nous allons voir comment gérer cette situation.

Chunk id: 4458
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
dans les arguments passés à la méthode `.format()` qui dicte quelle variable doit être remplacée. Par exemple, dans `"{} {} {}".format(bidule, machin, truc)`, les premières accolades remplaceront la

Chunk id: 4459
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
exemple, dans `"{} {} {}".format(bidule, machin, truc)`, les premières accolades remplaceront la variable `bidule`, les deuxièmes la variable `machin`, les troisièmes la variable `truc`.

Chunk id: 4609
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
passée à l'argument `command=` **sans parenthèses ni arguments** : il s'agit donc d'une fonction *callback* comme expliqué ci-dessus. Dans tous les *widgets* *Tkinter*, on doit passer à l'argument

Chunk id: 4550
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
une autre fonction mais sans **aucune parenthèses ni argument**, c'est-à-dire `fct_callback` tout court. En d'autres termes, cela est différent de

Chunk id: 1583
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
print(f"Dans le programme principal: {saveur}, {couleur}")
```  
Lorsqu'on exécutera ce code, on obtiendra :  
```
Dans le programme principal: sucrée, orange

Chunk id: 1822
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Vous avez à présent bien compris le fonctionnement du mécanisme de l'héritage. Dans notre exemple, nous pourrions créer de nouveaux fruits avec un minimum d'effort. Ceux-ci pourraient hériter de la

Chunk id: 1029
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
- Python a alloué (réservé) l'espace en mémoire pour y accueillir un entier. Chaque type de variable prend plus ou moins d'espace en mémoire. Python a aussi fait en sorte qu'on puisse retrouver la

Chunk id: 4113
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
```  
Ainsi, 26 protéines sont d'origine humaine (`Homo sapiens`) et 10 proviennent
de la poule (`Gallus gallus`).

Chunk id: 868
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`.`  
:   N'importe quel caractère (mais un caractère quand même).  
Exemple : la *regex* `A.G` est retrouvée dans `ATG`, `AtG`, `A4G`, mais aussi dans `A-G` ou dans `A G`.  
`[ABC]`

Chunk id: 3993
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
```python
>>> df.columns
Index(['a', 'b', 'c', 'd'], dtype='object')
>>> df.columns = ["Paris", "Lyon", "Nantes", "Pau"]
>>> df
Paris  Lyon  Nantes  Pau
chat       10    11      12   13

Chunk id: 764
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
>>> {key:val*2 for key, val in dico.items()}
{'a': 20, 'g': 20, 't': 22, 'c': 30}
>>>
>>> animaux = (("singe", 3), ("girafe", 1), ("rhinocéros", 1), ("gazelle", 4))

Chunk id: 1667
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
crée des instances que l'on peut appeler comme des fonctions ! Dans cet exemple, nous allons vous montrer que l'on peut ainsi créer un moyen inattendu pour mettre à jour des attributs d'instance :

Chunk id: 5010
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
choix_select = widget.get(selection[0])
#Affichage.
print(f"Le choix sélectionné est {choix_select}, "
f"son type est {type(choix_select)}")

Chunk id: 3653
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
>>> b[1, 1] = -300
>>> c = copy.deepcopy(a)
>>> c[1, 1] = -500
>>> a
array([[0, 0],
[0, 0]])
>>> b
array([[   0,    0],
[   0, -300]])
>>> c
array([[   0,    0],
[   0, -500]])
```

Chunk id: 2051
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
on obtient la même page d'aide. Comme pour les modules, si on invoque l'aide pour une méthode de la classe

Chunk id: 2941
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
qui permet de visualiser l'état des variables au fur et à mesure de l'exécution d'un code Python. Avant de poursuivre, nous vous conseillons de prendre 5 minutes pour tester ce site.

Chunk id: 2136
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
open-box-rem  
L'extension *.ipynb* est l'extension de fichier des notebooks Jupyter.  
close-box-rem  
Vous pouvez entrer des instructions Python dans la première cellule. Par exemple :  
```python

Chunk id: 786
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
```python
>>> import collections
>>> compo_seq = collections.Counter("aatctccgatcgatcgatcgatgatc")
>>> compo_seq
Counter({'a': 7, 't': 7, 'c': 7, 'g': 5})
>>> type(compo_seq)

Chunk id: 2320
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
```python
"""Docstring simple d'une ligne se finissant par un point."""
```

Chunk id: 4932
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
```python
>>> racine = bouton.master
>>> racine
<tkinter.Tk object .>
>>> racine.children
{'!button': <tkinter.Button object .!button>}
>>> bouton["command"] = racine.destroy
```

Chunk id: 1111
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
lit ou écrit des nombres dans un fichier, ils sont considérés comme du texte, donc des chaînes de caractères.

Chunk id: 3106
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
La commande `list(range(10))` a généré une liste contenant tous les nombres entiers de 0 inclus à 10 **exclu**. Nous verrons l'utilisation de la fonction `range()` toute seule dans le chapitre 5

Chunk id: 4295
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1766-analyse-dun-jeu-de-donnees-avec-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Content:
Si vous n'êtes pas familier avec le format de fichier `.tsv`, nous vous conseillons de consulter l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 690
Number of Tokens: 79
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
>>> set(["ti", "to", "to"])
{'ti', 'to'}
>>> set("Maître corbeau sur un arbre perché")
{'h', 'u', 'o', 'b', ' ', 'M', 'a', 'p', 'n', 'e', 'é', 'c', 'î', 's', 't', 'r'}
```

Chunk id: 245
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
## 8.5 Module *random* : génération de nombres aléatoires

Chunk id: 4393
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Pour les *floats*, il est possible de combiner le nombre de caractères à afficher avec le nombre de décimales :  
```python
>>> print(f"{perc_GC:7.3f}")
47.804
>>> print(f"{perc_GC:10.3f}")
47.804

Chunk id: 4664
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
directement `self` plutôt que `racine` ou tout autre nom donné à l'instance. Comme vu dans le chapitre 19 *Avoir la classe avec les objets*, appeler le constructeur de la classe mère est une pratique

Chunk id: 4194
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Bien sûr, on aurait pu créer des variables intermédiaires
pour chaque étape mais cela aurait été plus lourd :  
```python
>>> date1 = df["Deposit Date"].value_counts()
>>> date2 = date1.resample("A")

Chunk id: 2668
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
parcourue. En Python, une boucle itère toujours sur un objet dit **séquentiel** (c'est-à-dire un objet constitué d'autres objets) tel qu'une liste. Nous verrons aussi plus tard d'autres objets

Chunk id: 1580
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
def affiche_attributs(self):
return f"{self.saveur}, {self.couleur}"

Chunk id: 613
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
et de les affecter à la volée dans 2 variables différentes. Cela évite l'opération laborieuse de récupérer d'abord le tuple, puis de créer les variables en utilisant l'indiçage :

Chunk id: 2206
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
Dans ce contexte, le créateur de Python, Guido van Rossum, part d'un constat simple : « *code is read much more often than it is written* » (« le code est plus souvent lu qu'écrit »). Avec

Chunk id: 403
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
fait, l'affectation en ligne 4 `a = 5` écrase l'ancienne variable `a` et en crée une nouvelle, ce n'est pas la valeur de `a` qui a été changée puisque l'identifiant n'est plus le même. Le même

Chunk id: 1843
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
## 19.5 Accès et modifications des attributs depuis l'extérieur  
### 19.5.1 Le problème

Chunk id: 1057
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
séparateur décimal. Ainsi, `3.14` est un nombre reconnu comme un *float* en Python alors que ce n'est pas le cas de `3,14`.

Chunk id: 2089
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
```python
>>> citron[0]
10
>>> citron[3]
'ellipsoide'
>>> citron.masse = 100
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
AttributeError: can't set attribute

Chunk id: 501
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1325-existence-dune-cle-ou-dune-valeur
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.5 Existence d'une clé ou d'une valeur
Content:
```python
>>> ani2 = {'nom': 'singe', 'poids': 70, 'taille': 1.75}
>>> if "poids" in ani2:
...     print("La clé 'poids' existe pour ani2")
...
La clé 'poids' existe pour ani2
>>> if "age" in ani2:

Chunk id: 4345
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
### 3.2.2 Prise en main des *f-strings*  
Les *f-strings* permettent une meilleure organisation de l'affichage des variables. Reprenons l'exemple ci-dessus à propos de notre ami John :  
```python

Chunk id: 3220
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
se présente toutefois : lorsqu'on a une longue ligne de code, on peut la couper en deux avec le caractère `\` (*backslash*) pour des raisons de lisibilité :

Chunk id: 4772
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
def incr(self, lclick):
"""Augmente la taille de la baballe."""
self.size += 10
if self.size > 200:
self.size = 200

Chunk id: 2037
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
def __str__(self):
"""Redéfinit le comportement avec print()."""
return f"saveur: {saveur}, couleur: {couleur}, taille: {taille}"

Chunk id: 4667
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
`self` avant le `.creer_widgets()` indique qu'il s'agit d'une méthode de notre classe (et non pas d'une fonction classique).

Chunk id: 4343
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
Ce caractère `f` avant les guillemets va indiquer à Python qu'il s'agit d'une *f-string* permettant de mettre en place le mécanisme de l'écriture formatée, contrairement à une *string* normale.

Chunk id: 1072
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
du caractère « souligné » (ou *underscore*) `_` pour séparer des groupes de chiffres. Par exemple :

Chunk id: 1517
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
La ligne 11 va tenter de détruire l'attribut de classe `.saveur`. Toutefois, Python interdit cela, ainsi l'erreur suivante sera générée :  
```python
Traceback (most recent call last):

Chunk id: 4464
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
Pour conclure, ces deux anciennes façons de formater une chaîne de caractères avec l'opérateur `%` ou la méthode `.format()` vous sont présentées à titre d'information. La première avec l'opérateur

Chunk id: 885
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`{n,}`  
:   Au moins *n* fois le caractère précédent ou l'expression entre parenthèses précédente.

Chunk id: 1820
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
- Finalement, autant ré-utiliser les « moulinettes » de la classe mère, c'est justement à ça que sert l'héritage ! Au final, on écrit moins de lignes de code.  
open-box-adv

Chunk id: 2630
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
- [Patrick] « Plus petit. »
- [Pierre]  « Est-ce que ton nombre est plus petit, plus grand ou égal à 81 ? »
- [Patrick] « Plus petit. »

Chunk id: 3670
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
des *arrays* automatiquement. Cela se révèle bien pratique car la plupart du temps les données que l'on analyse proviennent de fichiers. La fonction la plus simple à prendre en main est

Chunk id: 4177
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
```
Les dates apparaissent maintenant comme le dernier jour de l'année mais désignent
bien l'année complète. Dans cet exemple, une seule structure de transferrine

Chunk id: 2789
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#548-triangle-inverse
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.8 Triangle inversé
Content:
### 5.4.8 Triangle inversé  
Créez un script qui dessine un triangle comme celui-ci :  
```text
**********
*********
********
*******
******
*****
****
***
**
*
```

Chunk id: 4704
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
Ligne 6 à 8. Nous dessinons maintenant des objets graphiques à l'intérieur du canevas avec les méthodes `.create_oval()` (dessine une ellipse) et `.create_line()` (dessine une ligne). Les arguments

Chunk id: 2832
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
Créez un script qui construit une liste `fibo` avec les 15 premiers termes de la suite de Fibonacci puis l'affiche.

Chunk id: 4966
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#208-exercices
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Content:
## 20.8 Exercices  
*Conseil* : dans tous les exercices qui suivent nous vous recommandons de concevoir une classe pour chaque exercice.

Chunk id: 4347
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
Il suffit de passer un nom de variable au sein de chaque couple d'accolades et Python les remplace par leur contenu ! Première remarque, la syntaxe apparait plus lisible que l'équivalent vu ci-avant

Chunk id: 108
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
close-box-adv

Chunk id: 390
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
modifiables : les chaînes de caractères ou *strings*, les objets de type *range*, mais également des objets qui ne sont pas des containers comme les entiers, les *floats* et les booléens.

Chunk id: 102
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
(par exemple la fonction `len()` est considérée comme une fonction interne à Python, elle existe à chaque fois que vous lancez Python). On appelle cette règle la règle **LGI** pour locale, globale,

Chunk id: 141
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1263-conclusion
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.3 Conclusion
Content:
décomposer en blocs chaque tâche à effectuer, chaque bloc pouvant être une fonction ? ». Et n'oubliez pas que si une fonction s'avère trop complexe, vous pouvez la décomposer en d'autres fonctions.

Chunk id: 3006
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#983-pyramide
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.3 Pyramide
Content:
`N` et qui renvoie une pyramide de $N$ lignes sous forme de chaîne de caractères. Le programme principal demandera à l'utilisateur le nombre de lignes souhaitées (utilisez pour cela la fonction

Chunk id: 3039
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
Créez une autre fonction `calc_dist2ori()` à laquelle vous passez en argument deux listes de *floats* `list_x` et `list_y` représentant les coordonnées d'une fonction mathématique (par exemple $x$ et

Chunk id: 3452
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
### 10.8.7 Mot composable

Chunk id: 571
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
pour éviter une ambiguïté avec une simple expression. Par exemple `(2)` équivaut à l'entier `2`, `(2,)` est un tuple avec l'élément `2`.

Chunk id: 4223
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#calcul-de-la-distance
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.4 Calcul de la distance
Content:
#### 17.6.2.4 Calcul de la distance

Chunk id: 1511
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
*Espaces de noms*). Dans ce cas, l'attribut d'instance est **prioritaire** sur l'attribut de classe.

Chunk id: 665
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
```

Chunk id: 2773
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#541-boucles-de-base
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.1 Boucles de base
Content:
### 5.4.1 Boucles de base

Chunk id: 368
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1311-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.1 Définition
Content:
## 13.1 Containers  
### 13.1.1 Définition  
open-box-def  
Un **container** est un nom générique pour définir un objet Python qui contient une collection d'autres objets.  
close-box-def

Chunk id: 4859
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
des mouvements de la baballe, il faudrait utiliser des variables de contrôle. On peut créer de telles variables avec les classes `tk.StringVar` pour les chaînes de caractères, `tk.DoubleVar` pour les

Chunk id: 2299
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
sont constitués de phrases complètes, avec une majuscule au début (sauf si le premier mot est une variable qui s'écrit sans majuscule) et un point à la fin.

Chunk id: 4035
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
```python
>>> pd.concat([df1, df2])
Lyon  Nantes  Paris  Strasbourg
chat    10.0     NaN    3.0         NaN
singe   23.0     NaN   15.0         NaN
souris  17.0     NaN   20.0         NaN

Chunk id: 3904
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Ligne 1. Tout d'abord, on importe le sous-module `pyplot` du module *matplotlib* et on lui donne l'alias `plt` pour l'utiliser plus rapidement ensuite (cet alias est standard, utilisez-la

Chunk id: 946
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
```python
>>> resultat = regex.search("pi vaut 3.14")
>>> resultat.group(0)
'3.14'
>>> resultat.group(1)
'3'
>>> resultat.group(2)
'14'
>>> resultat.start()
8
>>> resultat.end()
12
```

Chunk id: 2769
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
...     i = int(reponse)
...
Entrez un entier supérieur à 10 : 4
Entrez un entier supérieur à 10 : -3
Entrez un entier supérieur à 10 : 15
>>> i
15
```

Chunk id: 4630
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
portions de code associées à chacune de ses actions. Bien sûr, comme nous développerons dans ce qui va suivre toutes nos applications *Tkinter* dans des scripts (et non pas dans l'interpréteur),

Chunk id: 516
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
L'argument `key=dico.get` indique explicitement qu'il faut réaliser le tri par les valeurs du dictionnaire. On retrouve la méthode `.get()` vue plus haut, mais sans les parenthèses : `key=dico.get`

Chunk id: 71
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
```python
>>> def ma_fonction():
...     x = x + 1
...
>>> x = 1
>>> ma_fonction()
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
File "<stdin>", line 2, in fct

Chunk id: 2600
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
Par exemple, pour les 3 premiers acides aminés :  
```text
[48.6, 53.4] n'est pas en hélice
[-124.9, 156.7] n'est pas en hélice
[-66.2, -30.8] est en hélice
```

Chunk id: 1127
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
la fonction `type()`. Pour l'instant, on retiendra qu'une fonction est une sorte de boîte à qui on passe un (ou plusieurs) argument(s), qui effectue une action et qui peut renvoyer un résultat ou

Chunk id: 2837
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
opération au sein d'un programme. Elles rendent également le code plus lisible et plus clair en le fractionnant en blocs logiques.

Chunk id: 3308
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
```python
>>> s = "Voici un retour à la ligne\nEt là une autre ligne"
>>> s
'Voici un retour à la ligne\nEt là une autre ligne'
>>> print(s)
Voici un retour à la ligne
Et là une autre ligne

Chunk id: 2300
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
La PEP 8 recommande très fortement d'écrire les commentaires en anglais, sauf si vous êtes à 120% sûr que votre code ne sera lu que par des francophones. Dans la mesure où vous allez souvent

Chunk id: 1112
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
Toute conversion d'une variable d'un type en un autre est appelé *casting* en anglais, il se peut que vous croisiez ce terme si vous consultez d'autres ressources.

Chunk id: 5004
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
self.listbox.pack()
#Ajout des items à la listbox (entiers).
for i in range(1, 10+1):
#Utilisation de ma méthode .insert(index, element)
#Ajout de l'entier i (tk.END signifie en dernier).

Chunk id: 1630
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
```python
>>> sorted("citron")
['c', 'i', 'n', 'o', 'r', 't']
>>> sorted([1, -67, 42, 0, 81])
[-67, 0, 1, 42, 81]
```

Chunk id: 4819
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
![Exemple de *canvas* animé à deux instants de l'exécution (panneau de gauche: au moment où on effectue un clic central ; panneau de droite: après avoir effectué plusieurs clics

Chunk id: 4049
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
Cette protéine est responsable du transport du fer dans l'organisme.  
Si vous n'êtes pas familier avec le format de fichier `.csv`, nous vous conseillons

Chunk id: 4320
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```python
>>> x = 32
>>> nom = "John"
>>> print(nom, "a", x, "ans")
John a 32 ans
```

Chunk id: 2266
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
ma_fonction(argument1, argument2)
#code non recommandé :
ma_liste = [1 , 2 ,3]
mon_dico = {"clé1": "valeur1", "clé2": "valeur2"}
ma_fonction(argument1 ,argument2)
```

Chunk id: 2340
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Returns
-------
int
Le produit des deux nombres.
"""
return nombre1 * nombre2
```

Chunk id: 2395
Number of Tokens: 1
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```

Chunk id: 2425
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
quelques informations sur la version du script, les auteurs, etc. Il s'agit de métadonnées que la commande `help()` pourra afficher. Bien sûr, ces métadonnées ne sont pas obligatoires, mais elles

Chunk id: 2245
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
fonction_test_27()
mon_module
```  
c'est-à-dire en minuscules avec un caractère « souligné » (« tiret du bas » ou *underscore* en anglais) pour séparer les différents « mots » dans le nom.

Chunk id: 4798
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
12 (exemple du calcul de factorielle), car Python ne conserve pas l'état de la fonction lors de l'appel de `.after()`. C'est comme si on avait un `return`, tout l'espace mémoire alloué à la méthode

Chunk id: 2080
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
>>> Citron
<class '__main__.Citron'>
>>> citron = Citron(10, "jaune", "acide", "ellipsoide")
>>> citron
Citron(masse=10, couleur='jaune', saveur='acide', forme='ellipsoide')
>>> citron.masse
10

Chunk id: 3273
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
liens sur Python. La page d'[index des modules](https://docs.python.org/fr/3/py-modindex.html) est particulièrement utile (et traduite en français).

Chunk id: 4810
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
et `mclick.y`. Ces coordonnées sont réaffectées à la baballe pour la faire repartir de l'endroit du clic. Nous créons ensuite un petit texte dans le canevas et affectons des valeurs aléatoires aux

Chunk id: 4217
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#lecture-des-coordonnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.2 Lecture des coordonnées
Content:
#### 17.6.2.2 Lecture des coordonnées

Chunk id: 683
Number of Tokens: 78
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
```python
>>> s = {3, 4, "Plouf", (1, 3)}
>>> s
{(1, 3), 3, 4, 'Plouf'}
>>> s2 = {3.14, [1, 2]}
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 254
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
>>> random.choices(bases, k=5)
['A', 'T', 'A', 'A', 'C']
>>> random.choices(bases, k=10)
['C', 'T', 'T', 'T', 'G', 'A', 'C', 'A', 'G', 'G']
```

Chunk id: 121
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
de s'affranchir définitivement des variables globales (nous verrons cela dans le chapitre 19 *Avoir la classe avec les objets*). En attendant, et si vous ne souhaitez pas aller plus loin sur les

Chunk id: 685
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
À quoi différencie-t-on un *set* d'un dictionnaire alors que les deux utilisent des accolades ? Le *set* sera défini seulement par des valeurs `{valeur_1, valeur_2, ...}` alors que le dictionnaire

Chunk id: 4201
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1761-nombres-pairs-et-impairs
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.1 Nombres pairs et impairs
Content:
En une seule instruction, construisez l'*array* `pairs` dans lequel tous les éléments de `impairs` sont incrémentés de 1.

Chunk id: 2576
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
par 3 et lui ajouter 1. En répétant cette procédure, la suite de nombres atteint la valeur 1 puis se prolonge

Chunk id: 2928
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
close-box-adv

Chunk id: 2636
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
3. le nombre se trouve entre 75 et 100, on propose 87 ( 75 + (100-75)/2 ).
4. le nombre se trouve entre 75 et 87, on propose 81 ( 75 + (87-75)/2 ).

Chunk id: 4518
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
exemple : [*Tkinter*](https://wiki.python.org/moin/TkInter), [wxpython](http://www.wxpython.org/), [PyQt](https://pyqt.readthedocs.io), [PyGObject](https://pygobject.readthedocs.io/en/latest/), etc.

Chunk id: 4489
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#364-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.4 Écriture formatée
Content:
les valeurs sont respectivement la chaîne de caractères `"salut"`, le nombre entier `102` et le *float* `10.318`. La variable `c` sera affichée avec 2 décimales.

Chunk id: 377
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
- **ordonné** (*ordered* en anglais) : il y a un ordre précis des éléments ; cet ordre correspond à celui utilisé lors de la création ou de la modification du container (si cela est permis) ; ce même

Chunk id: 3246
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#17-commentaires
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.7 Commentaires
Content:
#D'autres commandes plus utiles pourraient suivre.
```  
open-box-rem

Chunk id: 2894
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
lui même d'autres objets. Dans notre exemple Python renvoie un objet de type `tuple`, type que nous verrons dans le chapitre 13 *Dictionnaires et tuples* (*grosso modo*, il s'agit d'une sorte de

Chunk id: 68
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
```  
Lorsqu'une variable est déclarée dans le programme principal, elle est visible dans celui-ci ainsi que dans toutes les fonctions. On a vu qu'on parlait de variable **globale** :  
```python

Chunk id: 4080
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
La méthode `.info()` permet d'aller un peu plus loin dans l'exploration du jeu de données
en combinant les informations produites par les propriétés `.shape` et `.dtypes` :  
```python
>>> df.info()

Chunk id: 1282
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
nous avons rencontré de nombreuses notations et mots de vocabulaire associés à la POO depuis le début de ce cours.

Chunk id: 2327
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
`"""Ceci est une docstring recommandée."""`  
mais pas  
`'''Ceci n'est pas une docstring recommandée.'''`.  
close-box-rem

Chunk id: 4880
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
*Tkinter* d'hériter de la classe mère `tk.Tk` et d'utiliser le constructeur de la classe mère `tk.Tk.__init__()`. Toutefois, il se peut qu'en consultant d'autres ressources certains auteurs utilisent

Chunk id: 1258
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1165-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.5 Séquence d'ADN aléatoire 2
Content:
La fonction générera aléatoirement une séquence d'ADN qui prend en compte les contraintes fournies en arguments et renverra la séquence sous forme d'une liste.

Chunk id: 4428
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
Même si elle fonctionne encore, la première manière avec l'opérateur `%` est maintenant clairement déconseillée pour un certain nombre de

Chunk id: 4758
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
class AppliBaballe(tk.Tk):
def __init__(self):
"""Constructeur de l'application."""
tk.Tk.__init__(self)
#Coord baballe.
self.x, self.y = 200, 200
#Rayon baballe.
self.size = 50
#Pas de deplacement.

Chunk id: 4637
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
exemple dans l'interpréteur, on avait utilisé la méthode `.destroy()` sur la fenêtre principale. Comme son nom l'indique, celle-ci détruit la fenêtre principale et mène aussi à l'arrêt de

Chunk id: 4685
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
code devient très vite illisible s'il n'est pas organisé en classe. De plus, la non-utilisation de classe rend quasi-obligatoire l'utilisation de variables globales, ce qui on l'a vu, est à proscrire

Chunk id: 1623
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
dans cette rubrique et l'héritage dans la suivante. Ces deux concepts donnent un surplus de puissance à la POO par rapport à la programmation classique.

Chunk id: 3219
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
de chevron en début de ligne correspond à la sortie (*output*) générée par Python. Une exception se présente toutefois : lorsqu'on a une longue ligne de code, on peut la couper en deux avec le

Chunk id: 3990
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1743-quelques-proprietes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.3 Quelques propriétés
Content:
### 17.4.3 Quelques propriétés  
Les dimensions d'un *dataframe* sont données par l'attribut `.shape` :  
```python
>>> df.shape
(3, 4)
```  
Ici, le *dataframe* `df` a 3 lignes et 4 colonnes.

Chunk id: 2137
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Vous pouvez entrer des instructions Python dans la première cellule. Par exemple :  
```python
a = 2
b = 3
print(a+b)
```

Chunk id: 2522
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
>>> y = 2
>>> if x == 2 and y == 2:
...     print("le test est vrai")
...
le test est vrai
```  
Notez que le même résultat serait obtenu en utilisant deux instructions `if` imbriquées :  
```python

Chunk id: 1518
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
```python
Traceback (most recent call last):
File "./test.py", line 10, in <module>
del(citron1.saveur)
AttributeError: saveur
```

Chunk id: 2237
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
- rendre difficile la recherche de documentation si on ne sait pas d'où vient la fonction, notamment si plusieurs modules sont chargés avec l'instruction
`from module import *`

Chunk id: 4465
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
ou la méthode `.format()` vous sont présentées à titre d'information. La première avec l'opérateur `%` est clairement déconseillée. La deuxième avec la méthode `.format()` est encore tout à fait

Chunk id: 1555
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
[*Built-in Constants*](https://docs.python.org/fr/3/library/constants.html)). Si aucun objet n'est trouvé, Python renvoie une erreur.

Chunk id: 2375
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ligne 4. Il y un espace de trop après le second argument `nombre2` dans la définition de la fonction `Multiplie_nombres()` à la ligne 6 (colonne 38) du script.

Chunk id: 2243
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
import module_externe_1
import module_externe_2
import module_externe_3_qui_a_un_nom_long as mod3
```

Chunk id: 4199
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1761-nombres-pairs-et-impairs
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.1 Nombres pairs et impairs
Content:
## 17.6 Exercices  
### 17.6.1 Nombres pairs et impairs

Chunk id: 1883
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
et des *setters* en Python ? La réponse est très simple : cette  stratégie n'est pas une manière « pythonique » d'opérer (voir le chapitre 15 *Bonnes pratiques en programmation Python* pour la

Chunk id: 352
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
![Cercle de rayon 1 inscrit dans un carré de côté 2.](img/monte-carlo_pi.png){ #fig:monte-carlo width=45% }

Chunk id: 308
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
$ python compte_lignes.py zoo1.txt
zoo1.txt contient 4 lignes.
$ python compte_lignes.py zoo2.txt
zoo2.txt contient 3 lignes.
```  
Notre script est donc capable de :

Chunk id: 4488
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#364-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.4 Écriture formatée
Content:
En utilisant l'écriture formatée, affichez en une seule ligne les variables `a`, `b` et `c` dont les valeurs sont respectivement la chaîne de caractères `"salut"`, le nombre entier `102` et le

Chunk id: 3624
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
toutes ces méthodes est `axis`. Pour un *array* 2D, `axis=0` signifie qu'on fera l'opération le long de l'axe 0, à savoir les lignes. C'est-à-dire que l'opération se fait en faisant varier les

Chunk id: 3214
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
À ce stade, vous pouvez entrer une autre commande ou bien quitter l'interpréteur Python, soit en tapant la commande `exit()` puis en validant en appuyant sur la touche *Entrée*, soit en pressant

Chunk id: 1725
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
n'a toujours pas trouvé, il cherchera dans la deuxième classe mère (`Mere2` dans notre exemple) puis dans tous ses ancêtres. Et ainsi de suite, s'il y a plus de deux classes mères. Bien sûr, si aucun

Chunk id: 919
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1631-la-fonction-search
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.1 La fonction `search()`
Content:
en tant que *regex*. Ainsi, `^DEF` correspondra au mot `DEF` en début de chaîne et pas au caractère littéral `^`suivi du mot `DEF`.

Chunk id: 1485
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
*Python Tutor* montre bien la différence entre les variables de classe `forme` et `saveur` qui apparaissent directement dans les attributs de la classe `Citron` lors de sa définition et les trois

Chunk id: 2153
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
exemple la première cellule, qui porte désormais à sa gauche la numérotation `In [5]` (voir figure @fig:jupyter-cellule-4-mauvais-ordre).

Chunk id: 1974
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
ou « stratégiques », on peut utiliser la classe *property*. Toutefois, nous vous conseillons de ne l'utiliser que lorsque cela se révèle vraiment nécessaire, donc avec parcimonie. Le but étant de ne

Chunk id: 2603
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
n'hésitez pas à consulter la page Wikipedia sur la [structure secondaire des protéines](https://fr.wikipedia.org/wiki/Structure_des_prot%C3%A9ines#Angles_di%C3%A8dres_et_structure_secondaire).

Chunk id: 3368
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
Une tâche courante en Python est de lire une chaîne de caractères (provenant par exemple d'un fichier), d'extraire des valeurs de cette chaîne de caractères pour ensuite les manipuler.

Chunk id: 3849
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
>>> res_esearch["IdList"]
['30411489', '30409795', '30405884', '30405827', '30402883', '30401570',
'30399508', '30397276', '30395963', '30394734', '30394728', '30394123',

Chunk id: 1706
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
class Fille2(Mere):
def bonjour(self):
return "Vous avez le bonjour de la classe fille !"

Chunk id: 1017
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1646-nettoyeur-de-doublons-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.6 Nettoyeur de doublons (exercice +++)
Content:
### 16.4.6 Nettoyeur de doublons (exercice +++)

Chunk id: 4129
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Enfin, `aggfunc` liste les statistiques calculées, ici la valeur minimale et maximale.  
Notez que les valeurs renvoyées sont d'abord les valeurs minimales pour `Length`

Chunk id: 4215
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
alors on extrait les coordonnées atomiques (lignes 4 à 6) et on les écrit dans le fichier `1bta_CA.txt` (ligne 7). Les coordonnées sont toutes enregistrées sur une seule ligne, les unes après les

Chunk id: 1425
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
open-box-warn

Chunk id: 4554
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
sur notre exemple car cela mènerait à une erreur !). Que se passe-t-il en filigrane lors de l'appel `une_fct(fct_callback)` ? Python passe une référence vers la fonction `fct_callback` (en réalité il

Chunk id: 2869
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
renvoyé (ou retourné) une valeur que nous avons immédiatement affichée à l'écran avec l'instruction `print()`. Que veut dire valeur renvoyée ? Et bien cela signifie que cette dernière est récupérable

Chunk id: 2685
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
close-box-rem  
Si on oublie l'indentation, Python renvoie un message d'erreur :  
```python
>>> for animal in animaux:
... print(animal)
File "<stdin>", line 2
print(animal)
^

Chunk id: 4587
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
`label` contient donc notre *widget*, nous la réutiliserons plus tard (par exemple pour placer ce *widget* dans la fenêtre). Notez le premier argument positionnel`racine` passé à la classe

Chunk id: 4908
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
le fenêtrage *Tkinter* se situera dans votre classe Application, et le programme principal n'aura qu'à instancier l'application et à lancer le gestionnaire d'événements (les choses seront ainsi mieux

Chunk id: 2221
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#151-de-la-bonne-syntaxe-avec-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Content:
recommandations sur la syntaxe de Python. Il est vivement recommandé de lire la PEP 8 en entier au moins une fois pour avoir une bonne vue d'ensemble. On ne présentera ici qu'un rapide résumé de

Chunk id: 2905
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
Lorsqu'on définit une fonction `def fct(x, y):` les arguments `x` et `y` sont appelés **arguments positionnels** (en anglais *positional arguments*). Il est strictement obligatoire de les préciser

Chunk id: 113
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
Python réagissait. Toutefois, notez bien que **l'utilisation de variables globales est à bannir définitivement de votre pratique de la programmation**.

Chunk id: 3090
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
(de l'élément `m` inclus à l'élément `n+1` exclu). On dit alors qu'on récupère une **tranche** de la liste, par exemple :

Chunk id: 2410
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
__authors__ = ("Johny B Good", "Hubert de la Pâte Feuilletée")
__contact__ = ("johny@bgood.us", "hub@pate.feuilletee.fr")
__copyright__ = "MIT"
__date__ = "2030-01-01"
__version__= "1.2.3"

Chunk id: 4006
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
Paris  Lyon  Nantes  Pau
singe     20    21      22   23
chat      10    11      12   13
```  
Enfin, on peut aussi sélectionner des lignes avec l'instruction `.iloc`

Chunk id: 2085
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
passe en argument le nom de la classe souhaitée (i.e. `Citron`), puis une chaîne de caractères avec des mots séparés par des espaces qui correspondront aux attributs (on pourrait aussi passer une

Chunk id: 2055
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
```python
>>> citron1 = Citron()
>>> print(citron1.__doc__)
Voici la classe Citron.

Chunk id: 3652
Number of Tokens: 89
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
```python
>>> a = np.full((2, 2), 0)
>>> a
array([[0, 0],
[0, 0]])
>>> b = np.array(a)
>>> b[1, 1] = -300
>>> c = copy.deepcopy(a)
>>> c[1, 1] = -500
>>> a
array([[0, 0],
[0, 0]])
>>> b

Chunk id: 4513
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
de voir un « film » des particules en mouvement, c'est-à-dire comment ces particules bougent au fur et à mesure que les pas de simulation avancent. Une GUI vous permettra une telle prouesse ! Enfin,

Chunk id: 3038
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
En reprenant votre fonction de calcul de distance euclidienne en 3D `calc_distance_3D()`, faites-en une version pour deux dimensions que vous appellerez `calc_distance_2D()`.

Chunk id: 3843
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Ligne 3. On lance la requête (`transferrin`) sur le moteur de recherche `pubmed`. La requête est stockée dans la variable `req_esearch`.

Chunk id: 3379
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
caractères) en un autre avec les fonctions `int()`, `float()` et `str()`. La conversion d'une liste de chaînes de caractères en une chaîne de caractères est particulière puisqu'elle fait appelle à la

Chunk id: 1924
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
citron = Citron(masse=100)
print("(3) Je reviens dans le programme principal")
print(f"La masse de notre citron est {citron.masse} g")
#on mange le citron
citron.masse = 25

Chunk id: 1912
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
ligne de code, `attribut` est un objet de type *property* qui fonctionne de la manière suivante à l'extérieur de la classe :

Chunk id: 1136
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#211-exercices
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Content:
## 2.11 Exercices  
*Conseil* : utilisez l'interpréteur Python pour les exercices suivants.

Chunk id: 654
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
Cela est valable pour tout objet non modifiable, comme un élément d'un tuple, un caractère dans une chaîne de caractères, etc.

Chunk id: 3416
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
- le nombre de codons (on rappelle qu'un codon est un bloc de 3 bases),
- les 10 premières bases,
- les 10 dernières bases.  
La sortie produite par le script devrait ressembler à ça :  
```text

Chunk id: 1363
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
### 19.1.5 Le constructeur

Chunk id: 3453
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
Un mot est composable à partir d'une séquence de lettres si la séquence contient toutes les lettres du mot. Chaque lettre de la séquence ne peut être utilisée qu'une seule fois. Par exemple, « coucou

Chunk id: 4662
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
la fenêtre Tk dans la variable `self` directement. C'est-à-dire que la prochaine fois que l'on aura besoin de cette instance (lors de la création des *widgets* par exemple, cf. lignes 9 et 10), on

Chunk id: 1098
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#253-operations-illicites
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.3 Opérations illicites
Content:
TypeError: can't multiply sequence by non-int of type 'float'
>>> "toto" + 2
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 2647
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Est-ce votre nombre est plus grand, plus petit ou égal à 78 ? [+/-/=] +
Est-ce votre nombre est plus grand, plus petit ou égal à 79 ? [+/-/=] =
J'ai trouvé en 6 questions !
```

Chunk id: 3030
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
et affichez le minimum (`min()`), le maximum (`max()`) et la moyenne pour chacune d'entre elles. La moyenne pourra être calculée avec les fonctions `sum()` et `len()`.

Chunk id: 1746
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
Au début, on y trouve les exceptions commençant par une lettre majuscule (cf. chapitre 21 *Remarques complémentaires* pour la définition d'une exception), puis les fonctions Python de base tout en

Chunk id: 1326
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
une syntaxe `instance.nouvel_attribut = valeur`, créera ce nouvel attribut uniquement pour cette instance :

Chunk id: 3255
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
la base puis compter une base de plus. Pour indiquer cela, on décalera vers la droite ces deux instructions par rapport à la ligne précédente (`pour chaque base [...]`). Ce décalage est appelé

Chunk id: 4504
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
forcément l'habitude d'utiliser un *shell* et la ligne de commande. Une GUI permettra un usage plus large de votre programme, il est donc intéressant de regarder comment s'y prendre. Dans notre

Chunk id: 4641
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Comme  nous écrirons systématiquement nos applications *Tkinter* dans des scripts, et que la boucle `.mainloop()` y est obligatoire, vous pourrez utiliser au choix `.quit()` ou `.destroy()` pour

Chunk id: 2074
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
ces éléments avec une syntaxe `container.element` et que ces éléments soit non modifiables. On a vu ci-dessus, les classes ne sont pas faites pour cela, il n'est pas conseillé de les utiliser comme

Chunk id: 957
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
`.sub(chaine1, chaine2)` remplace toutes les occurrences trouvées par l'expression régulière dans `chaine2` par `chaine1`. Si vous souhaitez ne remplacer que les *n* premières occurrences, utilisez

Chunk id: 3497
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
### 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)

Chunk id: 2920
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> fct(z=10)
(0, 0, 10)
```  
Python permet même de rentrer les arguments par mot-clé dans un ordre arbitraire :  
```python
>>> fct(z=10, x=3, y=80)
(3, 80, 10)
>>> fct(z=10, y=80)

Chunk id: 900
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
utilise les métacaractères `+` et `*`. C'est-à-dire que la *regex* cherchera à « s'étendre » au maximum. Par exemple, si on utilise la *regex* `A+` pour faire une recherche dans la chaîne

Chunk id: 2990
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
```python
#définition d'une fonction carre()
def carre(x):
y = x**2
return y

Chunk id: 519
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
Attention, ce sont les clés du dictionnaires qui sont renvoyées, pas les valeurs. Ces clés sont cependant renvoyées dans un ordre qui permet d'obtenir les clés triées par ordre croissant :

Chunk id: 4926
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
#### 20.7.2.5 Toujours préciser l'instance de la fenêtre principale  
*Tkinter* est parfois surprenant. Dans le code suivant, on pourrait penser que celui-ci n'est pas fonctionnel :  
```python

Chunk id: 2931
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> print("Message ", end="")
Message >>>
```

Chunk id: 3676
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
- chaque donnée est convertie en *float*, donc si une chaîne est rencontrée la fonction renvoie une erreur ;

Chunk id: 4196
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
>>> date4 = date3.sort_values(ascending=False)
>>> date4.head()
2001-12-31    5
2003-12-31    4
1998-12-31    3
1999-12-31    3
2002-12-31    3
Name: Deposit Date, dtype: int64
```  
open-box-more

Chunk id: 3957
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1741-series
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.1 *Series*
Content:
### 17.4.1 *Series*  
Le premier type de données apporté par *pandas* est la *series*, qui correspond à un vecteur à une dimension.  
```python

Chunk id: 3699
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
close-box-more

Chunk id: 2838
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
Vous connaissez déjà certaines fonctions Python. Par exemple `math.cos(angle)` du module `math` renvoie le cosinus de la variable `angle` exprimé en radian. Vous connaissez aussi des fonctions

Chunk id: 4204
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1762-distance-entre-deux-atomes-carbones-alpha-consecutifs-de-la-barstar
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Content:
La barstar est un inhibiteur de ribonucléase. C'est une protéine relativement simple qui contient 89 acides aminés. Sa structure tridimensionnelle, obtenue par cristallographie aux rayons X, se

Chunk id: 1916
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
dans une variable d'instance qui s'appellera par exemple `_attribut` (même nom mais commençant par un *underscore* unique, envoyant un message à l'utilisateur qu'il s'agit d'une variable associée au

Chunk id: 945
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
Les parenthèses dans la *regex* créent des groupes (`[0-9]+` deux fois) qui seront récupérés ultérieurement par la méthode `.group()`.  
```python
>>> resultat = regex.search("pi vaut 3.14")

Chunk id: 1915
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
L'objet `attribut` est de type *property*, et la vraie valeur de l'attribut est stockée par Python dans une variable d'instance qui s'appellera par exemple `_attribut` (même nom mais commençant par

Chunk id: 1865
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
mot-clé `raise` (cf. chapitre 21 *Remarques complémentaires*). Ceci représente un des avantages des *setters* : contrôler la validité des attributs (on pourrait aussi vérifier qu'il s'agit d'un

Chunk id: 598
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1332-iterations-sur-plusieurs-valeurs-a-la-fois
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.2 Itérations sur plusieurs valeurs à la fois
Content:
correspondance systématique entre le nombre de variables d'itération (par exemple 3 variables dans l'exemple ci-dessus avec `x, y, z`) et la longueur de chaque sous-*tuple* de la liste sur laquelle

Chunk id: 891
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`\d`  
: remplace n'importe quel chiffre (*d* signifie *digit*), équivalent à `[0-9]`.  
`\w`

Chunk id: 3020
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#986-distance-3d
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.6 Distance 3D
Content:
$$
d = \sqrt{(x_B - x_A)^2 + (y_B - y_A)^2 + (z_B - z_A)^2}
$$

Chunk id: 4257
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
ax.scatter(x, y, z, c="red", marker="x")
[...]
#Axis + title.
ax.set_xlabel("x (Å)")
ax.set_ylabel("y (Å)")
ax.set_zlabel("z (Å)")
ax.set_title("Graphe 3D des phosphores")
plt.show()
```

Chunk id: 4264
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#requete-avec-un-mot-cle
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.1 Requête avec un mot-clé
Content:
la barstar. Pour cela, indiquez le PMID choisi dans la barre de recherche de PubMed et cliquez sur *Search*. Attention, l'association n'est pas toujours évidente. Cherchez éventuellement dans le

Chunk id: 4999
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
Celui-ci contient une `Listbox` et permet d'afficher dans le terminal l'élément sélectionné. Nous vous conseillons de bien étudier le code ci-dessous et d'avoir résolu l'exercice précédent avant de

Chunk id: 3985
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
>>> df = pd.DataFrame(data)
>>> df.index = ["chat", "singe", "souris"]
>>> df
a   b   c   d
chat    10  11  12  13
singe   20  21  22  23
souris  30  31  32  33
```

Chunk id: 3420
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1082-lecture-dune-sequence-a-partir-dun-fichier-fasta
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.2 Lecture d'une séquence à partir d'un fichier FASTA
Content:
*Conseil* : vous trouverez des explications sur le format FASTA et des exemples de code dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 4761
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
self.canv = tk.Canvas(self, bg='light gray', height=400, width=400)
self.canv.pack()
#Création de la baballe.
self.baballe = self.canv.create_oval(self.x, self.y,
self.x+self.size,
self.y+self.size,

Chunk id: 290
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
qui contient tous les arguments de la ligne de commande, y compris le nom du script lui-même qu'on retrouve comme premier élément de cette liste dans `sys.argv[0]`. On peut donc accéder à chacun des

Chunk id: 566
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
exemple montre que les tuples sont peu adaptés lorsqu'on a besoin d'ajouter, retirer, modifier des éléments. La création d'un nouveau tuple à chaque étape s'avère lourde et il n'y a aucune méthode

Chunk id: 3834
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
### 17.2.2 Interrogation de la base de données PubMed  
Le sous-module *Entrez* de *Biopython* permet d’utiliser les ressources du NCBI

Chunk id: 1352
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
close-box-def  
Voici un exemple d'ajout d'une fonction, ou plus exactement d'une méthode, au sein d'une classe (attention à l'indentation !) :  
```python
class Citron:
def coucou(self):

Chunk id: 2167
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
Le format Markdown permet de rapidement et très simplement rédiger du texte structuré. Ce cours est par exemple complètement rédigé en Markdown ;-)

Chunk id: 2199
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
# 15 Bonnes pratiques en programmation Python

Chunk id: 181
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
précise bien que dans ce cas `.cos()` est une fonction. Dans cet ouvrage, nous utiliserons ainsi le mot **fonction** lorsqu'on évoquera des fonctions issues de modules.

Chunk id: 4601
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
Ligne 4. De même, on crée un bouton « Quitter » qui provoquera la fermeture de la fenêtre et donc l'arrêt de l'application si on clique dessus. À nouveau, on passe la fenêtre parente en premier

Chunk id: 3571
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
La fonction `array()` peut créer des tableaux à n'importe quel nombre de dimensions. Toutefois ça devient vite compliqué lorsqu'on dépasse trois dimensions. Retenez qu'un objet *array* à une

Chunk id: 4592
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
voir dans ce *label*. La classe `tk.Label` peut recevoir de nombreux autres arguments, en voici la [liste exhaustive](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/label.html). Dans les fonctions

Chunk id: 285
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Dans cet exemple, créons le court script suivant que l'on enregistrera sous le nom `test.py ` :  
```python
import sys
print(sys.argv)
```

Chunk id: 1173
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1118-count
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.8 `.count()`
Content:
```python
>>> a = [1, 2, 4, 3, 1, 1]
>>> a.count(1)
3
>>> a.count(4)
1
>>> a.count(23)
0
```

Chunk id: 2558
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#672-sequence-complementaire-dun-brin-dadn
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.2 Séquence complémentaire d'un brin d'ADN
Content:
Créez un script qui transforme cette séquence en sa séquence complémentaire.  
Rappel : la séquence complémentaire s'obtient en remplaçant A par T, T par A, C par G et G par C.

Chunk id: 831
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
Téléchargez le fichier [`1bta.pdb`](https://files.rcsb.org/download/1BTA.pdb) qui correspond à la [structure tridimensionnelle de la protéine

Chunk id: 4960
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
qui montre des exemples concrets d'applications *Tkinter* de plus en plus complexes (pdf en libre téléchargement).

Chunk id: 3719
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
### 17.1.8 Un peu d'algèbre linéaire  
Après avoir manipulé les objets *array* comme des vecteurs et des matrices, voici quelques fonctions pour faire de l'algèbre linéaire.

Chunk id: 2052
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
`help(citron1.affiche_coucou)`, on obtient l'aide pour cette méthode seulement.

Chunk id: 3813
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
vectorielles de manière très compacte, il est essentiel de se mettre à la place du lecteur et de bien indiquer ce que contient chaque *array* et sa dimensionnalité (1D, 2D, etc.).

Chunk id: 4417
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
vous y retrouver dans les différentes options de formatage, nous vous conseillons de consulter ce [mémo](https://fstring.help/cheat/) (en anglais).

Chunk id: 548
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
## 13.3 Tuples  
### 13.3.1 Définition

Chunk id: 2290
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
Enfin, il est possible de créer des listes ou des dictionnaires sur plusieurs lignes, en sautant une ligne après une virgule :  
```python
>>> ma_liste = [1, 2, 3,
...             4, 5, 6,

Chunk id: 479
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
5` et `b = 5`, on ne peut mettre qu'une seule fois la clé `5`. Ceci assure que deux clés d'un même dictionnaire ont forcément une valeur de hachage différente.

Chunk id: 2977
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
```python
>>> temp_in_fahrenheit = 60
>>> (temp_in_fahrenheit - 32) * (5/8)
17.5
>>> temp_in_fahrenheit = 80
>>> (temp_in_fahrenheit - 32) * (5/8)
30.0
>>> temp_in_fahrenheit = 100

Chunk id: 1086
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
>>> i
1
>>> i += 1
>>> i
2
>>> i += 2
>>> i
4
```  
L'opérateur `+=` effectue une addition puis affecte le résultat à la même variable. Cette opération s'appelle une « incrémentation ».

Chunk id: 535
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13210-liste-de-dictionnaires
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.10 Liste de dictionnaires
Content:
'poids': 70, 'taille': 1.75}]
>>>
>>> for ani in animaux:
...     print(ani["nom"])
...
girafe
singe
```

Chunk id: 262
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
». Pour cela, une [graine aléatoire](https://fr.wikipedia.org/wiki/Graine_al%C3%A9atoire) doit être définie. Cette graine est la plupart du temps un nombre entier qu'on passe au générateur, celui-ci

Chunk id: 4207
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
#### 17.6.2.1 Extraction des coordonnées atomiques

Chunk id: 735
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
Les *frozensets* ne possèdent bien sûr pas les méthodes de modification des *sets* (`.add()`, `.discard()`, etc.) puisqu'ils sont non modifiables. Par contre, ils possèdent toutes les méthodes de

Chunk id: 1298
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#191-construction-dune-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Content:
Nous allons voir dans cette rubrique comment définir une classe en reprenant notre exemple sur le citron que nous allons faire évoluer et complexifier. Attention, certains exemples sont destinés à

Chunk id: 3873
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
>>> res_efetch = Entrez.read(req_efetch)
```  
La variable `res_efetch` est un pseudo-dictionnaire qui contient une pseudo-liste,

Chunk id: 1544
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
est créé, bien distinct de la fonction appelante (ce nouvel espace peut donc contenir un objet de même nom). En définitive, ce qui va compter, c'est de savoir quelles règles Python va utiliser pour

Chunk id: 1262
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1166-le-nombre-mystere
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.6 Le nombre mystère
Content:
- *Il est composé de 3 chiffres*.
- *Il est strictement inférieur à 300*.
- *Il est pair*.
- *Deux de ses chiffres sont identiques*.
- *La somme de ses chiffres est égale à 7*.

Chunk id: 4668
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 8. La méthode `.creer_widgets()` va créer des *widgets* dans l'application.

Chunk id: 1432
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
File "classe_exemple1.py", line 14, in <module>
citron1.affiche_attributs()
File "classe_exemple1.py", line 9, in affiche_attributs
print(var)
NameError: name 'var' is not defined
```

Chunk id: 1137
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2111-nombres-de-friedman
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.1 Nombres de Friedman
Content:
### 2.11.1 Nombres de Friedman

Chunk id: 1872
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
On comprend bien l'utilité d'une stratégie avec des *getters* et *setters* dans cet exemple. Toutefois, en Python, on peut très bien accéder et modifier les attributs même si on a des *getters* et

Chunk id: 157
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
souvent (on les appelle aussi bibliothèques ou *libraries*). Ce sont des « boîtes à outils » qui vont vous être très utiles.

Chunk id: 1160
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1113-del
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.3 `del`
Content:
close-box-rem

Chunk id: 3749
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1719-parcours-de-matrice-et-affectation-de-lignes-colonnes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.9 Parcours de matrice et affectation de lignes / colonnes
Content:
Pour itérer sur les colonnes, on pourra utiliser l'astuce d'itérer sur la transposée de l'*array* `a`, c'est-à-dire `a.T` :  
```python
>>> for col in a.T:
...     print(col, type(col))
...

Chunk id: 1266
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1167-triangle-de-pascal-exercice
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.7 Triangle de Pascal (exercice +++)
Content:
Implémentez cette construction en Python. Généralisez à l'aide d'une boucle.  
Écrivez dans un fichier `pascal.out` les 10 premières lignes du triangle de Pascal.

Chunk id: 4069
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
>>> df.head()
Source Deposit Date  Length       MW
PDB ID
1A8E          Homo sapiens   1998-03-24     329  36408.4
1A8F          Homo sapiens   1998-03-25     329  36408.4

Chunk id: 4200
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1761-nombres-pairs-et-impairs
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.1 Nombres pairs et impairs
Content:
Soit `impairs` un *array* *NumPy* qui contient les nombres `1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21`. En une seule instruction, construisez l'*array* `pairs` dans lequel tous les éléments de `impairs`

Chunk id: 2555
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#671-jours-de-la-semaine
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.1 Jours de la semaine
Content:
- `Repos ce week-end` s'il s'agit du samedi ou du dimanche.  
Ces messages ne sont que des suggestions, vous pouvez laisser libre cours à votre imagination.

Chunk id: 3227
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
L'interpréteur Python est donc un système interactif dans lequel vous pouvez entrer des commandes, que Python exécutera sous vos yeux (au moment où vous validerez la commande en appuyant sur la

Chunk id: 4139
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
```  
On obtient un graphique similaire à celui de la figure @fig:transferrine (A)
avec deux groupes de points distincts (car certaines structures sont incomplètes).

Chunk id: 4313
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
arguments par mot-clé dans le chapitre 9 *Fonctions*. Pour l'instant, dites-vous que cela modifie le comportement par défaut des fonctions.

Chunk id: 3740
Number of Tokens: 83
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
array([[1., 0., 0.],
[0., 1., 0.],
[0., 0., 1.]])
>>> eigvecs[0]
array([1., 0., 0.])
>>> eigvecs[1]
array([0., 1., 0.])
>>> eigvecs[2]
array([0., 0., 1.])
```

Chunk id: 5014
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2086-projet-simulation-dun-pendule
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.6 Projet simulation d'un pendule
Content:
d'aller directement au chapitre 22 *Mini projets*. Nous vous proposons de réaliser une application *Tkinter* qui simule le mouvement d'un pendule. En réalisant une application complète de ce genre,

Chunk id: 4872
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
uns par rapport aux autres. Toutefois, la méthode `.pack()` peut parfois présenter des limites, il existe alors deux autres alternatives.

Chunk id: 3932
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
au format png. Des arguments par mot-clé définissent la manière de générer les marges autour du graphique (`bbox_inches`) et la résolution de l'image (`dpi`).

Chunk id: 4095
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1752-conversion-en-date
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.2 Conversion en date
Content:
*pandas* va se débrouiller pour trouver automatiquement le format de date utilisé.
On peut alors explicitement demander à *pandas* de considérer la colonne
`Deposit Date` comme une date :  
```python

Chunk id: 3177
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
sous Windows, *BBEdit* ou *CotEditor* sous Mac OS X et *gedit* sous Linux. La configuration de ces éditeurs de texte est détaillée dans la rubrique *Installation de Python* disponible en

Chunk id: 2799
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
```text
ligne colonne
1    1
1    2
2    1
2    2
```  
![Parcours d'une matrice.](img/parcours_matrice.png "Parcours d'une matrice"){ #fig:parcoursmatrice width=30% }

Chunk id: 3052
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
# 4 Listes  
## 4.1 Définition

Chunk id: 2113
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1974-classe-atome-amelioree
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.4 Classe `Atome` améliorée
Content:
### 19.7.4 Classe `Atome` améliorée  
Améliorez la classe `Atome` en lui ajoutant un nouvel attribut  `masse` qui correspond à la masse atomique ainsi qu'une nouvelle méthode

Chunk id: 1919
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
```python
class Citron:
def __init__(self, masse=0):
print("(2) J'arrive dans le .__init__()")
self.masse = masse

Chunk id: 1226
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
Voici quelques exemples illustrant la puissance des listes de compréhension.

Chunk id: 2981
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
$$  
Il faut alors reprendre les lignes 2, 5 et 8 précédentes et les corriger. Cela n'est pas efficace, surtout si le même code est utilisé à différents endroits dans le programme.

Chunk id: 1065
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
## 2.4 Écriture scientifique  
On peut écrire des nombres très grands ou très petits avec des puissances de 10 en utilisant le symbole `e` :  
```python
>>> 1e6
1000000.0
>>> 3.12e-3
0.00312
```

Chunk id: 2152
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Dans un notebook Jupyter, il est parfaitement possible de réexécuter une cellule précédente. Par exemple la première cellule, qui porte désormais à sa gauche la numérotation `In [5]` (voir figure

Chunk id: 58
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
Il est très important lorsque l'on manipule des fonctions de connaître la portée des variables (*scope* en anglais), c'est-à-dire savoir là où elles sont visibles. On a vu que les variables créées au

Chunk id: 2276
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
...     print(f"ma variable vaut {ma_variable}")
...
ma variable vaut 3
```

Chunk id: 49
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
(voir la figure @fig:fct-recursive-factorielle). La valeur 1 sera ainsi renvoyée au niveau de l'appel précédent, puis le résultat $2 \times 1 = 2$ (où 2 correspond à `nb` et 1 provient de

Chunk id: 2650
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
l'ordinateur, soit le caractère `-` si le nombre choisi est plus petit que le nombre proposé par l'ordinateur, soit le caractère `=` si le nombre choisi est celui proposé par l'ordinateur (en

Chunk id: 1245
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1162-sequence-dadn-aleatoire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.2 Séquence d'ADN aléatoire
Content:
Créez une fonction `seq_alea()` qui prend comme argument un entier positif `taille` représentant le nombre de bases de la séquence et qui renvoie une séquence d'ADN aléatoire sous forme d'une liste

Chunk id: 3002
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#982-puissance
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.2 Puissance
Content:
8
>>> 2**4
16
```  
Dans le programme principal, calculez et affichez à l'écran $2^i$ avec $i$ variant de 0 à 20 inclus. On souhaite que le résultat soit présenté avec le formatage suivant :

Chunk id: 2554
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#671-jours-de-la-semaine
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.1 Jours de la semaine
Content:
- `Chouette c'est vendredi` s'il s'agit du vendredi ;
- `Repos ce week-end` s'il s'agit du samedi ou du dimanche.

Chunk id: 3300
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
```python
>>> "bla\nbla"
'bla\nbla'
>>> print("bla\nbla")
bla
bla
```

Chunk id: 1285
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
objet permettant d'y *encapsuler* des attributs et des méthodes. De plus, la POO amène de nouveaux concepts tels que le *polymorphisme* (capacité à redéfinir le comportement des opérateurs, nous

Chunk id: 850
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
régulières. Pour une documentation plus complète, référez-vous à la [page d'aide des expressions régulières](https://docs.python.org/fr/3/library/re.html) sur le site officiel de Python.

Chunk id: 1341
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1913-les-attributs-de-classe
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.3 Les attributs de classe
Content:
close-box-def  
À l'extérieur ou à l’intérieur d'une classe, un attribut de classe peut se retrouver avec une syntaxe `NomClasse.attribut` :  
```python
print(Citron.couleur)
```

Chunk id: 3782
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
array([6, 7, 8, 9])
>>> a[a > 5] = -1
>>> a
array([[ 1,  2,  3],
[ 4,  5, -1],
[-1, -1, -1]])
```  
On peut bien sûr combiner plusieurs conditions avec les opérateurs logiques :  
```python
>>> a

Chunk id: 434
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
Revenons rapidement sur les objets de type *range*. Jusqu'à maintenant, on s'en est servi pour faire des boucles ou générer des listes de nombres. Toutefois, on a vu ci-dessus qu'ils étaient aussi

Chunk id: 1182
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
reverse() method of builtins.list instance
Reverse *IN PLACE*.
```

Chunk id: 1780
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
print("(1) Je rentre dans le constructeur de Citron, et je vais "
"appeler\n"
"le constructeur de la classe mère Fruit !")
Fruit.__init__(self, taille, masse, saveur, forme)

Chunk id: 3131
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#410-exercices
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.10 Exercices
Content:
## 4.10 Exercices  
*Conseil* : utilisez l'interpréteur Python.

Chunk id: 1983
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
### 19.6.2 Note sur les attributs publics et non publics

Chunk id: 3422
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1083-frequence-des-bases-dans-une-sequence-dadn
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.3 Fréquence des bases dans une séquence d'ADN
Content:
Soit la séquence d'ADN `ATATACGGATCGGCTGTTGCCTGCGTAGTAGCGT`. On souhaite calculer la fréquence de chaque base A, T, C et G dans cette séquence et afficher le résultat à l'écran.

Chunk id: 4104
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1753-statistiques-descriptives-et-table-de-comptage
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.3 Statistiques descriptives et table de comptage
Content:
```python
>>> df.describe()
Length            MW
count   41.000000     41.000000
mean   477.341463  52816.090244
std    175.710217  19486.594012
min    304.000000  33548.100000

Chunk id: 723
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
indique si un *set* est disjoint d'un autre *set*, c'est-à-dire, s'ils n'ont aucun élément en commun indiquant que leur intersection est nulle.

Chunk id: 816
Number of Tokens: 6
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
Testez ce script avec :

Chunk id: 1151
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#111-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Content:
Comme pour les chaînes de caractères, les listes possèdent de nombreuses **méthodes** qui leur sont propres et qui peuvent se révéler très pratiques. On rappelle qu'une méthode est une fonction qui

Chunk id: 1268
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
La programmation orientée objet (POO) est un concept de programmation très puissant qui permet de structurer ses programmes d'une manière nouvelle. En POO, on définit un « objet » qui peut contenir

Chunk id: 1798
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
L'exécution de ce code affichera la sortie suivante :  
```
(1) Je rentre dans le constructeur de Citron, et je vais appeler
le constructeur de la classe mère Fruit !

Chunk id: 3860
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Nous allons pour cela utiliser la fonction `Entrez.esummary()`  
```python
>>> req_esummary = Entrez.esummary(db="pubmed", id="22294463")
>>> res_esummary = Entrez.read(req_esummary)
```

Chunk id: 4958
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
- Pour avoir un [exemple](https://www.tutorialspoint.com/python/python_gui_programming.htm) rapide de code pour chaque *widget*.

Chunk id: 2778
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#542-boucle-et-jours-de-la-semaine
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.2 Boucle et jours de la semaine
Content:
ainsi qu'une autre série d'instructions affichant les jours du week-end (en utilisant une boucle `while`).

Chunk id: 3092
Number of Tokens: 88
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
>>> animaux[0:2]
['girafe', 'tigre']
>>> animaux[0:3]
['girafe', 'tigre', 'singe']
>>> animaux[0:]
['girafe', 'tigre', 'singe', 'souris']
>>> animaux[:]
['girafe', 'tigre', 'singe', 'souris']

Chunk id: 1154
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1111-append
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.1 `.append()`
Content:
```python
>>> a = [1, 2, 3]
>>> a.append(5)
>>> a
[1, 2, 3, 5]
```  
qui est équivalent à :  
```python
>>> a = [1, 2, 3]
>>> a = a + [5]
>>> a
[1, 2, 3, 5]
```

Chunk id: 2913
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
(en anglais *keyword argument*). Le passage d'un tel argument lors de l'appel de la fonction est facultatif. Ce type d'argument ne doit pas être confondu avec les arguments positionnels présentés

Chunk id: 2762
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
souvent à des « boucles infinies » qui ne s'arrêtent jamais. Vous pouvez néanmoins toujours stopper l'exécution d'un script Python à l'aide de la combinaison de touches *Ctrl-C* (c'est-à-dire en

Chunk id: 2662
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
que l'on peut choisir le nom que l'on veut pour cette variable. Celle-ci est créée par Python la première fois que la ligne contenant le `for` est exécutée (si elle existait déjà son contenu serait

Chunk id: 3511
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
(chromosome I de la levure Saccharomyces cerevisiae) et afficher la longueur de chaque gène. Pour cela, il faudra récupérer les lignes décrivant la position des gènes. Voici par exemple les cinq

Chunk id: 457
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
si on itère sur un dictionnaire, cet ordre est respecté. Ce détail provient de l'implémentation interne des dictionnaires dans Python, mais cela nous concerne peu. Ce qui importe, c'est de se

Chunk id: 2135
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
du logo de Jupyter. Si le nom de votre notebook est *test* alors le fichier *test.ipynb* sera créé dans le répertoire depuis lequel vous avez lancé Jupyter.

Chunk id: 1695
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Lignes 12 à 14. Après instanciation de la classe `Fille`, on utilise la méthode `.salut()`, puis la méthode `.bonjour()` héritée de la classe mère.  
Ce code affiche la sortie suivante :  
```

Chunk id: 4397
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
Remarquez que le séparateur décimal `.` compte pour un caractère. De même, si on avait un nombre négatif, le signe `-` compterait aussi pour un caractère.

Chunk id: 1920
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
def get_masse(self):
print("Coucou je suis dans le get")
return self._masse

Chunk id: 3381
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
```python
>>> seq = ["A", "T", "G", "A", "T"]
>>> seq
['A', 'T', 'G', 'A', 'T']
>>> "-".join(seq)
'A-T-G-A-T'
>>> " ".join(seq)
'A T G A T'
>>> "".join(seq)
'ATGAT'
```

Chunk id: 2893
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
En réalité Python ne renvoie qu'un seul objet, mais celui-ci peut être séquentiel, c'est-à-dire contenir lui même d'autres objets. Dans notre exemple Python renvoie un objet de type `tuple`, type que

Chunk id: 1355
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
Lignes 2 et 3. On définit une méthode nommée `.coucou()` qui va afficher un petit message. Attention, cette méthode prend obligatoirement un argument que nous avons nommé ici `self`. Nous verrons

Chunk id: 4720
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
un autre des lignes et un dernier bouton qui quitte l'application (figure @fig:exemple2_canvas).

Chunk id: 692
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
de récupérer un élément par sa position. Il est également impossible de modifier un de ses éléments par l'indexation.

Chunk id: 111
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
## 12.6 Recommandations  
### 12.6.1 Évitez les variables globales

Chunk id: 4964
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
2. En français :
- Le [site](http://tkinter.fdex.eu/index.html) bien complet d'Étienne Florent.

Chunk id: 1674
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
- Nous vous avons montré l'idée qu'il y avait derrière le polymorphisme, et avec cela vous avez assez pour vous jeter à l'eau et commencer à construire vos propres classes. L'apprentissage de toutes

Chunk id: 1558
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
i = 1000000
j = 2

print("Dans prog principal i:", i)
print("Dans prog principal j:", j)

mod.fct()
mod.fct2()

Chunk id: 3077
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
## 4.4 Indiçage négatif  
La liste peut également être indexée avec des nombres négatifs selon le modèle suivant :  
```text
liste          : ["girafe", "tigre", "singe", "souris"]

Chunk id: 4312
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
Ligne 3. On a ajouté un second argument `end=""`, en précisant le mot-clé `end`. Nous aborderons les arguments par mot-clé dans le chapitre 9 *Fonctions*. Pour l'instant, dites-vous que cela modifie

Chunk id: 1804
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
taille: petite, masse: 50
saveur: acide, forme: ellipsoïde
conseil: Bon en tarte :-p !
```  
Prenez bien le temps de suivre ce code pas à pas pour bien en comprendre toutes les étapes.

Chunk id: 3900
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
plt.scatter(temps, concentration, marker="o", color="blue")
plt.xlabel("Temps (h)")
plt.ylabel("Concentration (mg/L)")
plt.title("Concentration de produit en fonction du temps")
plt.show()
```

Chunk id: 324
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#881-racine-carree
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.1 Racine carrée
Content:
Affichez sur la même ligne les nombres de 10 à 20 (inclus) ainsi que leur racine carrée avec 3 décimales. Utilisez pour cela le module *math* avec la fonction `sqrt()`. Exemple :  
```text
10 3.162

Chunk id: 4897
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
```python
[...]
class Application(tk.Frame):
def __init__(self, racine=None):
tk.Frame.__init__(self)
self.racine = racine
[...]
[...]
if __name__ == "__main__":
app = Application()
app.mainloop()

Chunk id: 2876
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
vouloir récupérer dans une variable le résultat renvoyé par une telle fonction. Si on essaie tout de même, Python affecte la valeur `None` qui signifie *rien* en anglais:

Chunk id: 272
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
devriez systématiquement obtenir les mêmes résultats si vous relancez plusieurs fois de suite ces instructions sur une même machine.

Chunk id: 2755
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
Avec ce type de boucle, une série d'instructions est exécutée tant qu'une condition est vraie. Par exemple :

Chunk id: 2102
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#197-exercices
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Content:
## 19.7 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 553
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
et ils prennent moins de place en mémoire. Par ailleurs, on ne risque pas de modifier un de ses éléments par mégarde. Vous verrez ci-dessous que nous les avons déjà croisés à plusieurs reprises !

Chunk id: 1243
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1161-tri-de-liste
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.1 Tri de liste
Content:
croissant, sans utiliser la fonction `sort()`. Les fonctions et méthodes `min()`, `.append()` et `.remove()` vous seront utiles.

Chunk id: 2428
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 22 et 23. Définition des constantes. Le nom des constantes est en majuscule.  
Ligne 26. Définition d'une classe. On a laissé deux lignes vides avant.

Chunk id: 4796
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
ms, passé en premier argument). Ainsi la méthode `.move()` se rappelle elle-même, un peu comme une fonction récursive. Toutefois, ce n'est pas une vraie fonction récursive comme celle vue dans le

Chunk id: 4950
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#application-tkinter-avec-plusieurs-pages
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.7 Application *Tkinter* avec plusieurs pages
Content:
Dans ce chapitre d'introduction, nous vous avons montré des GUI simples avec une seule page. Toutefois, si votre projet se complexifie, il se peut que vous ayez besoin de créer plusieurs fenêtre

Chunk id: 1453
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Même si on ne se sert d'aucun attribut dans une méthode, l'argument `self` (ou quel que soit son nom) est **strictement obligatoire**. En fait, la notation `citron1.affiche_message()` est équivalente

Chunk id: 3989
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
à laquelle on passe `data` en argument.  
Ligne 6. On peut définir les étiquettes des lignes de n'importe quel *dataframe*
avec l'attribut `df.index`.

Chunk id: 2594
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
Vous trouverez ci-dessous une liste de listes contenant les valeurs des angles phi et psi de 15 acides aminés de la protéine [1TFE](https://www.rcsb.org/structure/1TFE) :  
```python

Chunk id: 1070
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#24-ecriture-scientifique
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.4 Écriture scientifique
Content:
de beaucoup de chiffres, par exemple le nombre d'Avogradro $6.02214076 \times 10^{23}$ ou le nombre d'humains sur Terre (au 26 août 2020) 7807568245. Pour s'y retrouver, Python autorise l'utilisation

Chunk id: 491
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
```  
Toutefois, ce sont des objets itérables, donc utilisables dans une boucle.  
*Conseil* : pour les débutants, vous pouvez sauter cette fin de rubrique.

Chunk id: 835
Number of Tokens: 92
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1386-barycentre-dune-proteine-exercice
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.6 Barycentre d'une protéine (exercice +++)
Content:
$$ G_x =  \frac{1}{n} \sum_{i=1}^{n} {\rm CA}_{i,x} $$  
$$ G_y =  \frac{1}{n} \sum_{i=1}^{n} {\rm CA}_{i,y} $$  
$$ G_z =  \frac{1}{n} \sum_{i=1}^{n} {\rm CA}_{i,z} $$

Chunk id: 459
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
qu'on accède aux éléments par des clés, donc cet ordre n'a pas d'importance spéciale sauf dans de rares cas.

Chunk id: 3539
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
### 17.1.1 Objets de type *array*

Chunk id: 573
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1331-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.1 Définition
Content:
```python
>>> t = (1, 2, 3)
>>> t
(1, 2, 3)
>>> t = 1, 2, 3
>>> t
(1, 2, 3)
```

Chunk id: 152
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1272-passage-de-liste-a-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.2 Passage de liste à une fonction
Content:
Dans le programme principal, on effectuera les actions suivantes :  
1. Créez une variable `ma_liste = [7, 3, 8, 4, 5, 1, 9, 10, 2, 6]`.
2. Affichez `ma_liste` à l'écran.

Chunk id: 3245
Number of Tokens: 21
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#17-commentaires
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.7 Commentaires
Content:
Voici un exemple :  
```python
#Votre premier commentaire en Python.
print("Hello world!")

Chunk id: 1301
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
### 19.1.1 La classe minimale

Chunk id: 1133
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#210-minimum-et-maximum
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.10 Minimum et maximum
Content:
Par rapport à la discussion de la rubrique précédente, `min()` et `max()` sont des exemples de fonction prenant plusieurs arguments. En Python, quand une fonction prend plusieurs arguments, on doit

Chunk id: 1061
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#23-nommage
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.3 Nommage
Content:
majuscules (`A` à `Z`), de nombres (`0` à `9`) ou du caractère souligné (`_`). Vous ne pouvez pas utiliser d'espace dans un nom de variable.

Chunk id: 2696
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
telle quelle dans une boucle. Il n'est pas nécessaire de taper `for i in list(range(4)):` même si cela fonctionnerait également.

Chunk id: 526
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
```python
>>> ani2 = {'nom': 'singe', 'poids': 70, 'taille': 1.75}
>>> sorted(ani2, key=ani2.get)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 4434
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
Heureusement elle a un fonctionnement relativement proche des *f-strings*, donc vous ne serez pas totalement perdus !

Chunk id: 3626
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
```python
>>> a.max(axis=0)
array([6, 7])
```  
Dans l'*array* 1D récupéré, le premier élément vaut 6 (maximum de la 1ère colonne) et le second vaut 7 (maximum de la seconde colonne).

Chunk id: 639
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
référence (cf. Chapitre 11 *Plus sur les listes*). Donc, qu'on raisonne en tant que premier élément du tuple ou bien en tant que liste `l1`, on pointe vers **la même liste**. Or, rappelez-vous, au

Chunk id: 2211
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
la classe avec les objets*), mais souvent, aussi, le bon sens. Pour cela, les « PEP » peuvent nous aider.

Chunk id: 1251
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1163-sequence-dadn-complementaire-inverse
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.3 Séquence d'ADN complémentaire inverse
Content:
de caractères, qui renvoie la séquence complémentaire inverse sous la forme d'une autre chaîne de caractères et qui utilise des méthodes associées aux listes.

Chunk id: 3121
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
['tigre', 2]
```  
Pour accéder à un élément de la sous-liste, on utilise un double indiçage :  
```python
>>> zoo[1][0]
'tigre'
>>> zoo[1][1]
2
```

Chunk id: 93
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
Une autre solution pour éviter la modification d'une liste, lorsqu'elle est passée comme argument à une fonction, est de la passer explicitement (comme nous l'avons fait pour la copie de liste) afin

Chunk id: 4848
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
Vous pourrez alors utiliser les classes de widget de *ttk* (par exemple `ttk.Button`, etc.). Si vous souhaitez importer *ttk* et *Tkinter*, il suffit d'utiliser ces deux lignes :  
```python

Chunk id: 4356
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
valide. Nous verrons des exemples plus pertinents par la suite. Cela fonctionne avec n'importe quel type de variable (entiers, chaînes de caractères, *floats*, etc.). Attention toutefois pour les

Chunk id: 2764
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
```python
i = 0
while i < 10:
print("Le python c'est cool !")
```

Chunk id: 2095
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
```
>>> citron._asdict()
OrderedDict([('masse', 10), ('couleur', 'jaune'), ('saveur', 'acide'), ('forme', 'ellipsoide')])
```

Chunk id: 2883
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
Une particularité des fonctions en Python est que vous n'êtes pas obligé de préciser le type des arguments que vous lui passez, dès lors que les opérations que vous effectuez avec ces arguments sont

Chunk id: 295
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
de commande, vous pouvez renvoyer un message pour indiquer à l'utilisateur ce que le script attend comme argument :

Chunk id: 687
Number of Tokens: 74
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
La fonction interne à Python `set()` convertit un objet itérable passé en argument en un nouveau *set* (opération de *casting*) :  
```python
>>> set([1, 2, 4, 1])
{1, 2, 4}
>>> set((2, 2, 2, 1))

Chunk id: 3053
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#41-definition
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.1 Définition
Content:
Une **liste** est une structure de données qui contient une série de valeurs. Python autorise la construction de liste contenant des valeurs de types différents (par exemple entier et chaîne de

Chunk id: 4606
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
qui va détruire le *widget* sur lequel elle s'applique. Comme on tue la fenêtre principale (que l'on peut considérer comme un *widget* contenant d'autres *widgets*), tous les *widgets* fils seront

Chunk id: 2800
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5411-parcours-de-matrice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.11 Parcours de matrice
Content:
Attention à bien respecter l'alignement des chiffres qui doit être justifié à droite sur 4 caractères. Testez avec une matrice de dimensions 3 $\times$ 3, puis 5 $\times$ 5, et enfin 10 $\times$ 10.

Chunk id: 445
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
de correspondance (*mapping objects* en anglais) ou tableaux associatifs. En effet, on accède aux **valeurs** d'un dictionnaire par des **clés**. Ceci semble un peu confus ? Regardez l'exemple

Chunk id: 344
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#887-sequences-aleatoires-dadn-avec-argument
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.7 Séquences aléatoires d'ADN avec argument
Content:
*Conseil* : pour générer la séquence d'ADN, vous utiliserez, au choix, la fonction
`random.randint()` ou `random.choice()` abordées dans l'exercice précédent.

Chunk id: 3921
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
![Concentration du produit en fonction du temps.](img/concentration_vs_temps.png "Concentration du produit en fonction du temps"){  #fig:conc-vs-tps width=70% }

Chunk id: 749
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1352-objects-de-mapping
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.2 Objects de *mapping*
Content:
|:----------------------|:---------------------------------------:|:--------:|:-------:|:---------:|:----------:|:--------:|

Chunk id: 2828
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
être utilisée pour décrire certains motifs géométriques retrouvés dans la nature (coquillages, fleurs de tournesol...).

Chunk id: 263
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
définie. Cette graine est la plupart du temps un nombre entier qu'on passe au générateur, celui-ci va alors produire une **série donnée** de nombres pseudo-aléatoires qui dépendent de cette graine.

Chunk id: 3866
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
'FullJournalName', 'ELocationID', 'SO'])
```  
Nous pouvons alors facilement obtenir le titre, le DOI et la date de publication

Chunk id: 1380
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
if __name__ == "__main__":
citron1 = Citron()
print(citron1.couleur)
```

Chunk id: 348
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#888-compteur-de-lignes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.8 Compteur de lignes
Content:
```bash
$ python compte_lignes.py zoo1.txt
zoo1.txt contient 4 lignes.
$ python compte_lignes.py zoo2.txt
zoo2.txt contient 3 lignes.
$ python compte_lignes.py zoo3.txt

Chunk id: 514
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1328-tri-par-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.8 Tri par valeurs
Content:
### 13.2.8 Tri par valeurs  
Pour trier un dictionnaire par ses valeurs, il faut utiliser la fonction `sorted` avec l'argument `key` :  
```python
>>> dico = {"a": 15, "b": 5, "c":20}

Chunk id: 2142
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
![Exécution d'une première cellule.](img/jupyter-cellule-1.png "Exécution d'une première cellule."){ #fig:jupyter-cellule-1 width=80% }

Chunk id: 3155
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
celles du monde réel (une cellule, une protéine, un atome, etc.) avec un certain nombre de règles de fonctionnement et d'interactions.

Chunk id: 1487
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
`couleur`, `taille` et `masse` qui sont liées à l'instance `citron1`. Pour autant, on voit dans la dernière instruction `print()` qu'on peut accéder de la même manière aux variables de classe ou

Chunk id: 210
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
- Pour quitter l'aide, appuyez sur la touche *Q*.

Chunk id: 3163
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#12-conseils-pour-installer-et-configurer-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Content:
un résumé des points importants concernant cette installation. Tous les détails et la marche à suivre pas à pas sont donnés à l'adresse <https://python.sdv.univ-paris-diderot.fr/livre-dunod>.

Chunk id: 1225
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#115-liste-de-comprehension
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Content:
```  
Pour plus de détails, consultez à ce sujet le site de [Python](http://www.python.org/dev/peps/pep-0202/) et celui de [Wikipédia](http://fr.wikipedia.org/wiki/Comprehension_de_liste).

Chunk id: 4377
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> nb_G = 4500
>>> nb_C = 2575
>>> print(f"Ce génome contient {nb_G:d} G et {nb_C:d} C, soit une prop de GC de {prop_GC:.2f}")

Chunk id: 2168
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
Nous vous conseillons d'explorer les possibilités du Markdown en consultant la page [Wikipédia](https://fr.wikipedia.org/wiki/Markdown) ou directement la [page de

Chunk id: 2420
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
def une_fonction_simple(arg1, arg2):
"""Docstring d'une ligne décrivant la fonction."""
[...]
return autre_chose

Chunk id: 1682
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
open-box-def

Chunk id: 4866
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
À nouveau, vous trouverez une documentation précise sur le [site du MNT](https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/control-variables.html).

Chunk id: 3174
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
### 1.2.3 Éditeur de texte

Chunk id: 1438
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Lignes 4 à 9. La création de la variable `var` dans la méthode `.__init__()` sans l'accrocher à l'objet `self` fait qu'elle n'est plus accessible en dehors de `.__init__()`. C'est exactement comme

Chunk id: 4922
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
Toutefois, même si cela « ne coûte rien », nous vous recommandons de ne pas mettre ces `*args` et `**kwargs` si vous n'en avez pas besoin, comme nous vous l'avons montré dans les exemples de ce

Chunk id: 1508
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
indique que la ligne 7 a en fait créé un nouvel attribut d'instance `citron1.saveur` (contenant la valeur `sucrée`) qui est bien distinct de l'attribut de classe auquel on accédait avant par le même

Chunk id: 3635
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
```  
Lignes 5 à 8. La syntaxe `a[i,:]` renvoie la ligne d'indice `i`, et `a[:,j]` renvoie la colonne d'indice `j`. Les tranches sont évidemment aussi utilisables sur un *array* à deux dimensions.

Chunk id: 2406
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Il est fondamental de toujours structurer et organiser son code de la même manière. Ainsi, on sait tout de suite où trouver l'information et un autre programmeur pourra s'y retrouver. Voici un

Chunk id: 1895
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
?). N'existe-t-il pas un moyen de faire ça en Python ? La réponse est : bien sûr il existe un moyen pythonique, la classe `property`. Nous allons voir cette nouvelle classe dans la prochaine rubrique

Chunk id: 2937
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
Ceci ne vous paraît pas clair ? Nous allons prendre un exemple simple qui vous aidera à mieux saisir ces concepts. Observez le code suivant :  
```python
#définition d'une fonction carre()

Chunk id: 3565
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
Notez également que, dans le dernier exemple de multiplication (ligne 10), l'*array* final correspond à la multiplication **élément par élément** des deux *arrays* initiaux.

Chunk id: 2823
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5413-sauts-de-puce
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.13 Sauts de puce
Content:
`import random`
Nous reverrons la signification de cette syntaxe particulière dans le chapitre 8 *Modules*.

Chunk id: 509
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1326-methode-get
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.6 Méthode `.get()`
Content:
```python
>>> ani2.get("nom")
'singe'
>>> ani2.get("age")
>>>
```  
Ici la valeur associée à la clé `nom` est `singe` mais la clé `age` n'existe pas.

Chunk id: 3441
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1085-distance-de-hamming
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.5 Distance de Hamming
Content:
La [distance de Hamming](https://fr.wikipedia.org/wiki/Distance_de_Hamming) mesure la différence entre deux séquences de même taille en comptant le nombre de positions qui, pour chaque séquence, ne

Chunk id: 4599
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
chapitre 9 *Fonctions*, souvenez vous que leur utilisation dans le désordre implique qu'il faudra toujours préciser leur nom : par exemple vous écrirez `text="blabla"` et non pas `"blabla"` tout

Chunk id: 5012
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2086-projet-simulation-dun-pendule
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.6 Projet simulation d'un pendule
Content:
### 20.8.6 Projet simulation d'un pendule

Chunk id: 2634
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
1. le nombre se trouve entre 1 et 100, on propose 50 (100 / 2).
2. le nombre se trouve entre 50 et 100, on propose 75 ( 50 + (100-50)/2 ).

Chunk id: 4632
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
ligne sera systématiquement présente. Elle sera souvent à la fin du script, puisque, à l'image de ce script, on écrit d'abord le code construisant l'interface, et on lance le gestionnaire

Chunk id: 877
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `A(CG)*T` est retrouvée dans `AT`, `ACGT`, `ACGCGT`...  
`+`  
:   1 à *n* fois le caractère précédent ou l'expression entre parenthèses précédente.

Chunk id: 101
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
il vérifiera si elle est **globale** et enfin si elle n'est pas globale, il testera si elle est **interne** (par exemple la fonction `len()` est considérée comme une fonction interne à Python, elle

Chunk id: 4344
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
close-box-def  
Nous expliquons plus en détail dans le chapitre 10 *Plus sur les chaînes de caractères* pourquoi on doit mettre ce `f` et le mécanisme sous-jacent.

Chunk id: 4678
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 17. On donne un titre dans la fenêtre de notre application. Comme on utilise de petits *widgets* avec la méthode `pack()`, il se peut que le titre ne soit pas visible lors du lancement de

Chunk id: 2225
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
Cela vient d'un constat simple, l'indentation améliore la lisibilité d'un code. Dans la PEP 8, la recommandation pour la syntaxe de chaque niveau d'indentation est très simple : 4 espaces. N'utilisez

Chunk id: 3703
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
Pour les *arrays* 1D, `np.concatenate()` prend en argument un tuple contenant les arrays à concaténer :  
```python
>>> a1 = np.array((0, 1))
>>> a2 = np.array((3, 4))
>>> a1
array([0, 1])
>>> a2

Chunk id: 1730
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
```python
>>> import tkinter as tk
>>> racine = tk.Tk()
```  
En invoquant la commande `help(racine)`, l'interpréteur nous montre :  
```python
Help on class Tk in module tkinter:

Chunk id: 980
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
### 16.4.1 *Regex* de base

Chunk id: 2197
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
![JupyterLab comme environnement d'analyse.](img/jupyterlab-2.png "JupyterLab comme environnement d'analyse."){ #fig:jupyterlab-2 width=95% }  
open-box-more

Chunk id: 3049
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
plt.xlabel("x")
plt.ylabel("Distance de sin(x)à l'origine")
plt.savefig("sin2ori.png")
```  
Ouvrez l'image `sin2ori.png`.  
open-box-rem

Chunk id: 3767
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
>>> a > 5
array([[False, False, False],
[False, False,  True],
[ True,  True,  True]])
>>> a == 2
array([[False,  True, False],
[False, False, False],
[False, False, False]])
```

Chunk id: 4619
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
la taille de la fenêtre. On verra plus bas que l'on peut passer des arguments à cette méthode pour placer les *widgets* différemment (en haut, à droite, à gauche).

Chunk id: 3021
Number of Tokens: 11
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
### 9.8.7 Distribution et statistiques

Chunk id: 3723
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
```python
>>> a.T
array([[1, 4, 7],
[2, 5, 8],
[3, 6, 9]])
```

Chunk id: 1477
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
citron1.masse)
```  
Lignes 2 et 3. Nous créons deux variables de classe qui seront communes à toutes les instances (disons qu'un citron sera toujours ellipsoïde et acide !).

Chunk id: 2917
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
On observe que pour l'instant, les arguments par mot-clé sont pris dans l'ordre dans lesquels on les passe lors de l'appel. Comment pourrions-nous faire si on souhaitait préciser l'argument par

Chunk id: 4149
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
noms des axes des abscisses et des ordonnées.  
Le graphique @fig:transferrine (B) obtenu met en évidence une relation linéaire
entre le nombre de résidus d'une protéine et sa masse moléculaire.

Chunk id: 4538
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
close-box-def

Chunk id: 697
Number of Tokens: 90
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
...
1
2
4
```  
Les *sets* ne peuvent être modifiés que par des méthodes spécifiques.  
```python
>>> s = set(range(5))
>>> s
{0, 1, 2, 3, 4}
>>> s.add(4)
>>> s
{0, 1, 2, 3, 4}
>>> s.add(472)
>>> s

Chunk id: 4930
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
argument d'un *widget*. À ce moment, on peut se demander où est passé cette instance. Heureusement, *Tkinter* garde toujours une filiation des *widgets* avec les attributs `.master` et `.children` :

Chunk id: 4768
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
if self.y < 10:
self.dy = abs(self.dy)
if self.y > 400-self.size-10:
self.dy = -abs(self.dy)
#Mise à jour des coord.
self.canv.coords(self.baballe, self.x, self.y, self.x+self.size,
self.y+self.size)

Chunk id: 4015
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
#### 17.4.4.4 Sélection par condition  
Remémorons-nous d'abord le contenu du *dataframe* `df` :  
```python
>>> df
Paris  Lyon  Nantes  Pau
chat       10    11      12   13

Chunk id: 3459
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
|-----------|----------------|
| python    | aophrtkny      |
| python    | aeiouyhpq      |
| coucou    | uocuoceokzezh  |
| fonction  | nhwfnitvkloco  |

Chunk id: 4855
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
Lorsque vous souhaitez mettre un jour un *widget* avec une certaine valeur (par exemple le texte d'un *label*), vous ne pouvez pas utiliser une variable Python ordinaire, il faudra utiliser une

Chunk id: 1179
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
si `var = liste.reverse()` est une instruction Python valide, elle n'a aucun intérêt, préférez-lui `liste.reverse()`.

Chunk id: 799
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
`{'AC': 1, 'CC': 3, 'CT': 2, 'TA': 2, 'AG': 1, 'GC': 1}`

Chunk id: 3890
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#173-module-matplotlib
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Content:
Le module [*matplotlib*](https://matplotlib.org/) permet de générer des graphiques depuis Python. Il est l'outil complémentaire de *NumPy*, *scipy* ou *pandas* (que l'on verra juste après) lorsqu'on

Chunk id: 2704
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
la construction `for i in list(range(4)):`. C'est même contre-productif. En effet, `range()` se contente de stocker l'entier actuel, le pas pour passer à l'entier suivant, et le dernier entier à

Chunk id: 1727
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
Il est en général possible d'avoir des informations sur l'ordre de résolution des méthodes d'une classe en évoquant la commande `help()` sur celle-ci ou une de ses instances. Par exemple, nous

Chunk id: 2723
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> for i in range(len(animaux)):
...     print(f"L'animal {i} est un(e) {animaux[i]}")
...
L'animal 0 est un(e) girafe

Chunk id: 2350
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
ou méthodes. Passer une journée (voire plusieurs) à écrire les *docstrings* d'un gros projet est particulièrement pénible. Croyez-nous !

Chunk id: 2401
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ligne 17. `pylint` produit également une note sur 10. Ne soyez pas surpris si cette note est très basse (voire négative) la première fois que vous analysez votre script avec `pylint`. Cet outil

Chunk id: 382
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
Un **objet séquentiel** ou **séquence** est un container itérable, ordonné et indexable. Les objets séquentiels sont les listes, les chaînes de caractères, les objets de type *range*, ainsi que les

Chunk id: 3468
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
argument une chaîne de caractères (`xxx`) et qui renvoie `xxx est un pangramme` si cette chaîne de caractères est un pangramme ou `xxx n'est pas un pangramme` sinon. Pensez à vous débarrasser des

Chunk id: 2809
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
Créez un script qui affiche le numéro de ligne et de colonne, puis la taille de la matrice $N \times N$ et le nombre total de cases parcourues. Par exemple pour une matrice 4 $\times$ 4 (N=4) :

Chunk id: 4925
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
les assertions « *Simple is better than complex* » ou « *Sparse is better than dense* » nous suggèrent qu'il est inutile d'ajouter des choses dont on ne se sert pas.

Chunk id: 104
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#125-regle-lgi
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.5 Règle LGI
Content:
```python
>>> def ma_fonction():
...     x = 4
...     print(f"Dans la fonction x vaut {x}")
...
>>> x = -15
>>> ma_fonction()
Dans la fonction x vaut  4

Chunk id: 4961
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
- Le [site](https://pythonprogramming.net/tkinter-depth-tutorial-making-actual-program/) très bien fait de Harisson (avec vidéos !) vous guidera dans la construction d'une GUI complète et complexe

Chunk id: 1995
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
0
>>> citron.masse = -16
Coucou je suis dans le set
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
File "<stdin>", line 10, in set_masse

Chunk id: 4232
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1763-jour-le-plus-chaud
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.3 Jour le plus chaud
Content:
1. Récupérez le nom des jours de la semaine depuis le fichier et mettez-les dans une liste `days`.

Chunk id: 4358
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
de caractères, utilisez des guillemets simples au sein des accolades si vous définissez votre *f-string* avec des guillemets doubles.

Chunk id: 782
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#137-module-collections
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.7 Module *collections*
Content:
permettant de générer des valeurs par défaut quand on demande une clé qui n'existe pas (cela évite que Python génère une erreur) ;

Chunk id: 4067
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Nous pouvons demander à *pandas* d'utiliser une colonne particulière comme index.
La colonne `PDB ID` s'y prête très bien car cette colonne ne contient que
des identifiants uniques :  
```python

Chunk id: 3212
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
```python
>>> print("Hello world!")
Hello world!
>>>
```  
Vous pouvez refaire un nouvel essai en vous servant cette fois de l'interpréteur comme d'une calculatrice :  
```python
>>> 1+1
2
>>> 6*3
18

Chunk id: 737
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
open-box-adv

Chunk id: 1908
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
```python
attribut = property(fget=accesseur, fset=mutateur, fdel=destructeur)
```

Chunk id: 1554
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
Functions*](https://docs.python.org/fr/3/library/functions.html comme par exemple `print()`) et des [*Built-in Constants*](https://docs.python.org/fr/3/library/constants.html)). Si aucun objet n'est

Chunk id: 1560
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
```  
Le module `mod.py` contient les instructions suivantes :  
```python
def fct():
i = -27478524
print("Dans module, i local:", i)

Chunk id: 5009
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
#Par exemple renvoie `(5,)` si on a cliqué sur `5`.
selection = widget.curselection()
#Récupération du nombre sélectionné (déjà un entier).
choix_select = widget.get(selection[0])
#Affichage.

Chunk id: 2178
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
- `%whos` liste tous les objets (variables, fonctions, modules...) utilisés dans le notebook (voir figure @fig:jupyter-whos).

Chunk id: 2443
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Utilisez des noms de variables explicites, qui signifient quelque chose. En lisant votre code, on doit comprendre ce que vous faites. Choisir des noms de variables pertinents permet aussi de

Chunk id: 1406
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Dans la mesure du possible, nous vous conseillons de créer tous les attributs d'instance dont vous aurez besoin dans le constructeur `.__init__()` plutôt que dans toute autre méthode. Ainsi ils

Chunk id: 1610
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
open-box-more

Chunk id: 429
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
listes, les *sets* et les dictionnaires sont non hachables. Les dictionnaires, tuples, *sets* et *frozensets* seront vus plus bas dans ce chapitre.

Chunk id: 2201
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
permissive. Afin d'uniformiser l'écriture de code en Python, la communauté des développeurs Python recommande un certain nombre de règles afin qu'un code soit lisible. Lisible par quelqu'un d'autre,

Chunk id: 4691
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
La classe `tk.Canvas` crée un *widget canvas* (ou encore canevas en français). Cela va créer une zone (*i.e.* le canevas en tant que tel) dans laquelle nous allons dessiner divers objets tels que des

Chunk id: 4890
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
on passe ce même argument `racine` lors de l'appel du constructeur de la classe `tk.Frame` (ce qui était inutile lorsqu'on héritait de la classe `Tk`).

Chunk id: 322
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#88-exercices
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Content:
## 8.8 Exercices  
*Conseils* : pour les trois premiers exercices, utilisez l'interpréteur Python. Pour les exercices suivants, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 281
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
## 8.6 Module *sys* : passage d'arguments

Chunk id: 2003
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
close-box-def  
Regardons un exemple :  
```python
class Citron:
def __init__(self):
self.__mass = 100

Chunk id: 1083
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#251-operations-sur-les-types-numeriques
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.1 Opérations sur les types numériques
Content:
pour un petit rappel sur la division entière), on utilise respectivement les symboles `//` et  modulo `%` :

Chunk id: 242
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
(recherche dans les banques de données biologiques, manipulation de séquences ou de structures de biomolécules), *matplotlib* (représentations graphiques : courbes, nuages de points, diagrammes en

Chunk id: 4542
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
## 20.3 Notion de fonction *callback*  
*Conseil* : pour les débutants, vous pouvez passer cette rubrique.

Chunk id: 1507
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
@fig:classe_var_instance3 nous montre l'état des variables grâce au site *Python Tutor*. Celui-ci indique que la ligne 7 a en fait créé un nouvel attribut d'instance `citron1.saveur` (contenant la

Chunk id: 1862
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
citron1.set_masse(100)
print(citron1.get_couleur(), citron1.get_masse())
```  
Lignes 6 à 10. On définit deux méthodes *getters* pour accéder à chaque attribut.

Chunk id: 2511
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
Les tests multiples permettent de tester plusieurs conditions en même temps en utilisant des opérateurs booléens. Les deux opérateurs les plus couramment utilisés sont le **OU** et le **ET**. Voici

Chunk id: 4363
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
G et 2575 bases C, pour un total de 14800 bases, vous pourriez procéder comme suit (notez bien l'utilisation des parenthèses pour gérer les priorités des opérateurs) :

Chunk id: 2452
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Si vous distribuez votre code :
+ Rédigez une documentation claire.
+ Testez votre programme (jetez un œil aux [tests unitaires](https://fr.wikipedia.org/wiki/Test_unitaire)).

Chunk id: 1796
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Comme on a l'a héritée, elle est directement accessible avec un `self.méthode()` (et de l'extérieur ce serait `instance.méthode()`).

Chunk id: 2627
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
- [Patrick] « C'est bon, j'ai pensé à un nombre entre 1 et 100. »
- [Pierre]  « OK, je vais essayer de le deviner. Est-ce que ton nombre est plus petit ou plus grand que 50 ? »

Chunk id: 2182
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
depuis un notebook Jupyter. Il faut pour cela précéder la commande du symbole « `!` ». La figure @fig:jupyter-ls illustre cette possibilité avec la commande `ls` qui affiche le contenu d'un

Chunk id: 2502
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#63-importance-de-lindentation
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.3 Importance de l'indentation
Content:
print(f"car la variable nb vaut {nb}")
```  
Résultat :  
```text
Le test est vrai
car la variable nb vaut 5
```  
**Code 2**  
```python
nombres = [4, 5, 6]
for nb in nombres:
if nb == 5:

Chunk id: 4894
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Vous pourrez vous posez la question : « Pourquoi en ligne 4 l'argument par mot-clé `racine=None` prend la valeur `None` par défaut ? ». Et bien, c'est parce que notre classe Application peut

Chunk id: 2574
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#677-conjecture-de-syracuse-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.7 Conjecture de Syracuse (exercice +++)
Content:
La [conjecture de Syracuse](http://fr.wikipedia.org/wiki/Conjecture_de_Syracuse) est une conjecture mathématique qui reste improuvée à ce jour et qui est définie de la manière suivante.

Chunk id: 614
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
```python
>>> resultat = ma_fonction()
>>> resultat
(3, 14)
>>> x = resultat[0]
>>> y = resultat[1]
>>> print(x, y)
3 14
```  
open-box-adv

Chunk id: 1774
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
économiser des lignes de code identiques à ajouter pour chaque fruit. Regardons l'exemple suivant que nous avons garni de `print()` pour bien comprendre ce qui se passe :

Chunk id: 1557
Number of Tokens: 5
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1922-gestion-des-noms-dans-les-modules
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.2 Gestion des noms dans les modules
Content:
```python
import mod

Chunk id: 4921
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-avec-args-et-kwargs
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.4 Passage d'arguments avec `*args` et `**kwargs`
Content:
que les futurs utilisateurs puissent passer des arguments *Tkinter* au constructeur de notre classe.

Chunk id: 3629
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
On comprend la puissance de cet argument `axis`. À nouveau, il est possible, en une ligne, de faire des calculs qui pourraient être très fastidieux avec les listes traditionnelles.

Chunk id: 1121
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
nous équivalent à « un objet de type entier ». Nous verrons dans le chapitre 19 *Avoir la classe avec les objets* ce que le mot « objet » signifie réellement (tout comme le mot « classe »).

Chunk id: 2667
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
Nous verrons plus loin que la variable d'itération peut être de n'importe quel type selon la liste parcourue. En Python, une boucle itère toujours sur un objet dit **séquentiel** (c'est-à-dire un

Chunk id: 998
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1643-nettoyeur-despaces
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.3 Nettoyeur d'espaces
Content:
espaces par un seul espace dans le texte ci-dessus. Le nouveau texte « propre » sera enregistré dans un fichier `cigale_fourmi_propre.txt`.

Chunk id: 1169
Number of Tokens: 81
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1116-sorted
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.6 `sorted()`
Content:
```python
>>> a = [3, 1, 2]
>>> sorted(a)
[1, 2, 3]
>>> a
[3, 1, 2]
```  
La fonction `sorted()` supporte aussi l'argument `reverse=True` :  
```python
>>> a = [3, 1, 2]
>>> sorted(a, reverse=True)

Chunk id: 2569
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#676-nombres-pairs
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.6 Nombres pairs
Content:
### 6.7.6 Nombres pairs

Chunk id: 473
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
rubrique suivante), cela peut s'avérer parfois très utile. Une règle est toutefois requise, les objets utilisés comme clé doivent être **hachables** (cf. rubrique précédente pour la définition).

Chunk id: 4867
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
#### 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk

Chunk id: 4145
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
>>> plt.xlabel("Taille (nombre d'acides aminés)")
Text(0.5, 0, "Taille (nombre d'acides aminés)")
>>> plt.ylabel("Masse moléculaire (Dalton)")
Text(0, 0.5, 'Masse moléculaire (Dalton)')

Chunk id: 3879
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
errinemia and animal models of this disease highlight the essential
role of transferrin in erythropoiesis and iron metabolism. Patient

Chunk id: 3542
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
ou un tuple) en un objet de type *array*. Voici un exemple simple de conversion d'une liste à une dimension en objet *array* :

Chunk id: 1471
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
```python
class Citron:
forme = "ellipsoïde" #attribut de classe
saveur = "acide" #attribut de classe

Chunk id: 1045
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
aurons besoin dans un premier temps sont les entiers (*integer* ou *int*), les nombres décimaux que nous appellerons *floats* et les chaînes de caractères (*string* ou *str*). Bien sûr, il existe de

Chunk id: 3473
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
On cherche à récupérer la séquence d'ADN du chromosome I de la levure *Saccharomyces cerevisiae* contenu dans le fichier au format GenBank

Chunk id: 1596
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
À nouveau, il n'y a pas de conflit possible pour l'utilisation d'une méthode ou d'une fonction avec le même nom. À l'intérieur de la classe on utilise `self.affiche_coucou()` pour la méthode et

Chunk id: 807
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1383-mots-de-2-lettres-dans-la-sequence-du-chromosome-i-de-saccharomyces-cerevisiae
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.3 Mots de 2 lettres dans la séquence du chromosome I de *Saccharomyces cerevisiae*
Content:
Utilisez cette fonction et la fonction `compte_mots_2_lettres()` de l'exercice précédent pour extraire les mots de 2 lettres et leurs occurrences dans la séquence du chromosome I de la levure du

Chunk id: 1644
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
close-box-def

Chunk id: 3954
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#174-module-pandas
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Content:
Le module [*pandas*](https://pandas.pydata.org/) a été conçu pour l'analyse de données. Il est particulièrement puissant pour manipuler des données structurées sous forme de tableau.

Chunk id: 4065
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
- et la masse molaire de la protéine (`MW`).  
La colonne d'entiers tout à gauche est un index automatiquement créé par *pandas*.

Chunk id: 4073
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
Par exemple, connaître ses dimensions :  
```python
>>> df.shape
(41, 4)
```  
Notre jeu de données contient donc 41 lignes et 4 colonnes. En effet,

Chunk id: 265
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
close-box-def  
En Python, la graine aléatoire se définit avec la fonction `seed()` :  
```python
>>> random.seed(42)
>>> random.randint(0, 10)
1
>>> random.randint(0, 10)
0
>>> random.randint(0, 10)

Chunk id: 3611
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
```python
>>> print(a)
[0 1 2 3 4 5 6 7 8 9]
>>> print(a2)
[[1. 1. 1.]
[1. 1. 1.]
[1. 1. 1.]]
```

Chunk id: 767
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
```python
>>> seq = "atctcgatcgatcgcgctagctagctcgccatacgtacgactacgt"
>>> {base:seq.count(base) for base in set(seq)}
{'a': 10, 'g': 10, 't': 11, 'c': 15}
```

Chunk id: 635
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
qu'un tuple était non modifiable... Comment cela-est il possible ? Commençons d'abord par regarder comment les objets sont agencés avec *Python Tutor*.

Chunk id: 2112
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1973-classe-atome
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.3 Classe `Atome`
Content:
atomiques) et la méthode `calcul_distance()` qui calcule la distance entre deux atomes. Testez cette classe sur plusieurs exemples.

Chunk id: 191
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#82-importation-de-modules
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.2 Importation de modules
Content:
```python
from random import *
```  
nous vous conseillons de charger le module seul de la manière suivante :  
```python
import random
```

Chunk id: 2474
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
du site *Real Python* rappellent les règles d'écriture et les bonnes pratiques vues dans ce chapitre.  
close-box-more

Chunk id: 1758
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
'__str__', '__subclasshook__', '__weakref__']
>>> o = object()
>>> dir(o)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__',

Chunk id: 1204
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
![Copie de liste.](img/copy_list.png){ #fig:copy_list width=80% }

Chunk id: 3668
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Nous construisons ainsi une matrice constituée de 2 lignes et 3 colonnes. Celle-ci ne contient que le chiffre 7 sous formes d'entiers (`int`) dans le premier cas et de *floats* dans le second.

Chunk id: 2006
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
```  
Ce code va donner la sortie suivante :  
```python
100
Traceback (most recent call last):
File "./pyscripts/mangling.py", line 11, in <module>
print(citron1.__mass)

Chunk id: 1141
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2111-nombres-de-friedman
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.1 Nombres de Friedman
Content:
- $7 + 3^6$
- $(3 + 4)^3$
- $3^6 - 5$
- $(1 + 2^8) \times 5$
- $(2 + 1^8)^7$

Chunk id: 4202
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1761-nombres-pairs-et-impairs
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.1 Nombres pairs et impairs
Content:
Comparez ce que venez de faire avec l'exercice 5.4.4 du chapitre 4 *Boucles et comparaisons*.

Chunk id: 3328
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
Il existe de nombreux autres détails concernant les préfixes qui vont au delà de ce cours. Pour en savoir plus, vous pouvez consulter la [documentations

Chunk id: 2988
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#98-exercices
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Content:
## 9.8 Exercices  
*Conseil* : pour le premier exercice, utilisez *Python Tutor*. Pour les exercices suivants, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 2929
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
L'utilisation d'arguments par mot-clé est habituelle en Python. Elle permet de modifier le comportement par défaut de nombreuses fonctions. Par exemple, si on souhaite que la fonction `print()`

Chunk id: 4271
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#recuperation-du-resume-dune-publication
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.3 Récupération du résumé d'une publication
Content:
Affichez ce résumé. Combien de caractères contient-il ?

Chunk id: 3732
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
et `eig()` ses [vecteurs et valeurs propres](https://fr.wikipedia.org/wiki/D%C3%A9composition_d%27une_matrice_en_%C3%A9l%C3%A9ments_propres).

Chunk id: 746
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1351-objets-sequentiels
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.1 Objets séquentiels
Content:
| *range*               | oui                                     | oui      | oui     | oui       | non        | oui      |

Chunk id: 4178
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
bien l'année complète. Dans cet exemple, une seule structure de transferrine
a été déposée dans la PDB entre le 1er janvier 1990 et le 31 décembre 1990.

Chunk id: 3481
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
une variable qui sera à `True` lorsqu'on lira les lignes contenant la séquence et à `False` pour les autres lignes.

Chunk id: 1484
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
![Illustration de la signification des attributs de classe et d'instance avec *Python Tutor*.](img/classe_var_instance.png){ #fig:classe_var_instance width=90% }

Chunk id: 1403
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
`Citron instance`. Cette instance contient un attribut nommé `couleur` auquel on accéde avec la syntaxe `citron1.couleur` dans le `print()`. Notez que si l'instance s'était appelée `enorme_citron`,

Chunk id: 2587
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
### 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)

Chunk id: 7
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
se passe, mais nombre d'entre elles sont des aberrations en terme de programmation. Nous ferons un récapitulatif des bonnes pratiques à la fin du chapitre. Enfin, nous vous conseillons de tester tous

Chunk id: 4563
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
À quoi cela sert-il ? À première vue cette construction peut sembler ardue et inutile. Toutefois, vous verrez que dans le module *Tkinter* les fonctions *callback* sont incontournables. En effet, on

Chunk id: 3433
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|   Glutamate   |       Glu      |       E       |
|   Glutamine   |       Gln      |       Q       |
|    Glycine    |       Gly      |       G       |

Chunk id: 955
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
### 16.3.6 La méthode `.sub()`

Chunk id: 4541
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#202-quelques-concepts-lies-a-la-programmation-graphique
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.2 Quelques concepts liés à la programmation graphique
Content:
open-box-def  
Une fonction *callback* est une fonction passée en argument d'une autre fonction.  
close-box-def  
Un exemple de fonction *callback* est présenté dans la rubrique suivante.

Chunk id: 3494
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
chaîne de caractères), qui sélectionne uniquement les lignes contenant des carbones alpha, qui stocke ces lignes dans une liste et les renvoie sous la forme d'une liste de chaînes de caractères.

Chunk id: 3671
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
données que l'on analyse proviennent de fichiers. La fonction la plus simple à prendre en main est `np.loadtxt()`. Celle-ci lit un fichier organisé en lignes / colonnes. Par exemple, imaginons que

Chunk id: 4835
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Frame* : *widget* container pouvant contenir d'autres *widgets* classiques, particulièrement utile lorsqu'on réalise une GUI complexe avec de nombreuses zones.

Chunk id: 2148
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Vous pouvez ainsi créer plusieurs cellules les unes à la suite des autres. Un objet créé dans une cellule antérieure sera disponible dans les cellules suivantes. Par exemple, dans la figure

Chunk id: 4706
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
positionnels sont les coordonnées de l'ellipse (les deux points englobant l'ellipse, cf. [ce lien](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/create_oval.html) pour la définition exacte) ou de

Chunk id: 1713
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
héritée d'une classe mère. Il ne faut pas confondre cela avec la *surcharge de fonction* (*function overloading*) qui désigne le fait d'avoir plusieurs définitions d'une fonction selon le nombres

Chunk id: 11
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
Dans le chapitre 9 nous avons vu des fonctions qui étaient appelées depuis le programme principal. Il est en fait possible d'appeler une fonction depuis une autre fonction. Et plus généralement, on

Chunk id: 87
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
On voit très clairement que la variable `liste` passée en argument lors de l'appel de la fonction d'une part, et la variable locale `liste_tmp` au sein de la fonction d'autre part, **pointent vers le

Chunk id: 2427
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 17 à 20. Importation des modules. D'abord les modules internes à Python (fournis en standard), puis les modules externes (ceux qu'il faut installer en plus), un module par ligne.

Chunk id: 1889
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
#non pythonique
obj.get_x() + obj.get_y() + obj.get_z()
```

Chunk id: 1192
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
```  
Remarquez que dans cet exemple, vous pouvez directement utiliser la fonction `list()` qui prend n'importe quel objet séquentiel (liste, chaîne de caractères, etc.) et qui renvoie une liste :

Chunk id: 1349
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
attributs et méthodes (comme nous le ferons systématiquement dans ce chapitre). Toutefois il faut garder à l'esprit qu'une méthode est finalement un objet de type fonction. Ainsi, elle peut être vue

Chunk id: 2107
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1971-classe-rectangle
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.1 Classe `Rectangle`
Content:
- crée une autre instance `rectangle2` aux dimensions et à la couleur que vous souhaitez (soyez créatif !) et qui affiche les attributs et la surface de ce nouveau rectangle.

Chunk id: 3623
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
La méthode `.max()` nous a bien renvoyé la valeur maximale 7. Un argument *très* utile existant dans toutes ces méthodes est `axis`. Pour un *array* 2D, `axis=0` signifie qu'on fera l'opération le

Chunk id: 4243
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
![Cliché d'une membrane de POPC.](img/exo_get_leaflet.png){ #fig:exo_get_leaflet width=80% }

Chunk id: 4330
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
par exemple justifiées à gauche ou à droite, ou encore avec un certain nombre de décimales pour les *floats*. L'écriture formatée est incontournable lorsqu'on veut créer des fichiers organisés en «

Chunk id: 3969
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
Si vous êtes familier avec le langage de programmation et d'analyse statistique R, les
*dataframes* de *pandas* se rapprochent de ceux trouvés dans R.  
close-box-rem

Chunk id: 3240
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#16-premier-programme
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.6 Premier programme
Content:
Pour exécuter votre script, ouvrez un *shell*  et entrez la commande :
`python test.py`  
Vous devriez obtenir un résultat similaire à ceci :  
```bash
$ python test.py
Hello world!
```

Chunk id: 962
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
```python
>>> regex = re.compile("([0-9]+)\.([0-9]+)")
>>> phrase = "pi vaut 3.14 et e vaut 2.72"
>>> regex.sub("approximativement \\1", phrase)

Chunk id: 1010
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
Attention, il faudra « échapper » ce symbole car il a une signification particulière dans une *regex*.

Chunk id: 3631
Number of Tokens: 96
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
```python
>>> a = np.arange(10)
>>> a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> a[5:]
array([5, 6, 7, 8, 9])
>>> a[::2]
array([0, 2, 4, 6, 8])
>>> a[1]
1
```

Chunk id: 4468
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
les *f-strings*. C'est ce que vous rencontrerez dans la suite de ce cours. Si vous connaissez déjà Python et que vous utilisez la méthode `.format()`, nous vous conseillons de passer aux *f-strings*.

Chunk id: 3434
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|    Glycine    |       Gly      |       G       |
|   Histidine   |       His      |       H       |
|   Isoleucine  |       Ile      |       I       |

Chunk id: 2923
Number of Tokens: 122
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> def fct(a, b, x=0, y=0, z=0):
...     return a, b, x, y, z
...
>>> fct(1, 1)
(1, 1, 0, 0, 0)
>>> fct(1, 1, z=5)
(1, 1, 0, 0, 5)
>>> fct(1, 1, z=5, y=32)
(1, 1, 0, 32, 5)
```

Chunk id: 1992
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
y toucher. Toutefois, cela n'est qu'une convention, et comme dit ci-dessus le client peut tout de même modifier ces attributs.

Chunk id: 2897
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#94-renvoi-de-resultats
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.4 Renvoi de résultats
Content:
...
>>> carre_cube2(3)
[9, 27]
```  
Renvoyer un *tuple* ou une liste de deux éléments (ou plus) est très pratique en conjonction avec l'**affectation multiple**, par exemple :  
```python

Chunk id: 1011
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
- Le numéro qui s'incrémente débutera à 1 et sera affiché sur 5 caractères avec des 0 à sa gauche si nécessaires (formatage `{:05d}`).

Chunk id: 4048
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#175-un-exemple-plus-complet
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Content:
contient une liste de structures de la [transferrine](https://fr.wikipedia.org/wiki/Transferrine).
Cette protéine est responsable du transport du fer dans l'organisme.

Chunk id: 3604
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
>>> c
array([[0, 1, 2, 3, 4],
[5, 0, 1, 2, 3],
[4, 5, 0, 1, 2]])
>>> a
array([0, 1, 2, 3, 4, 5])
```

Chunk id: 2063
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
self.liste = liste
```
Si vous créez des instances sans passer d'argument lors de l'instanciation, toutes ces instances pointeront vers la même liste. Cela peut avoir des effets désastreux.

Chunk id: 4351
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#322-prise-en-main-des-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.2 Prise en main des *f-strings*
Content:
```python
>>> print("{nom} a {x} ans")
{nom} a {x} ans
```  
open-box-rem  
Une variable est utilisable plus d'une fois pour une *f-string* donnée :  
```python
>>> var = "to"

Chunk id: 351
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
Soit un cercle de rayon 1 (en trait plein sur la figure @fig:monte-carlo) inscrit dans un carré de côté 2 (en trait pointillé).

Chunk id: 2214
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
Enhancement Proposal*](https://www.python.org/dev/peps/) (PEP), suivi d'un numéro. Il s'agit de propositions concrètes pour améliorer le code, ajouter de nouvelles fonctionnalités, mais aussi des

Chunk id: 704
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
aux listes. Dernier point sur ces méthodes, elles modifient le *set* sur place (*in place* en anglais) et ne renvoient rien à l'instar des méthodes des listes (`.append()`, `.remove()`, etc.).

Chunk id: 4857
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#les-variables-de-controle
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.1 Les variables de contrôle
Content:
*Tkinter* dite de contrôle. Par exemple, si on souhaitait afficher les coordonnées de notre baballe (cf. rubrique précédente) dans un *label*, et que cet affichage se mette à jour au fur et à mesure

Chunk id: 4486
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#363-poly-a-et-poly-gc
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.3 Poly-A et poly-GC
Content:
### 3.6.3 Poly-A et poly-GC  
Sur le modèle de l'exercice précédent, générez en une ligne de code un brin d'ADN poly-A (AAAA...) de 20 bases suivi d'un poly-GC régulier (GCGCGC...) de 40 bases.

Chunk id: 3095
Number of Tokens: 22
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
par défaut tous les éléments depuis le début ou tous les éléments jusqu'à la fin respectivement.

Chunk id: 2518
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
|     Faux    |     ET    |     Vrai    |   Faux   |
|     Faux    |     ET    |     Faux    |   Faux   |

Chunk id: 605
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
est alourdie par la présence des crochets. On préfèrera donc la première syntaxe avec les *tuples* sans parenthèse.

Chunk id: 4226
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#calcul-de-la-distance
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.4 Calcul de la distance
Content:
En utilisant les opérateurs mathématiques habituels (`-`, `+`, `**2`) et les fonctions `sqrt()` et `sum()` du module *NumPy*, calculez la distance entre les atomes $n$ et $n+1$.

Chunk id: 1894
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
un utilisateur de la classe interagit avec certains attributs (par exemple, rentre-t-il une bonne valeur ?). N'existe-t-il pas un moyen de faire ça en Python ? La réponse est : bien sûr il existe un

Chunk id: 3525
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
*NumPy* permet notamment de manipuler des vecteurs et des matrices. Le module *Biopython* permet de travailler sur des données biologiques, comme des séquences (nucléiques et protéiques) ou des

Chunk id: 2303
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Soyez également cohérent entre la langue utilisée pour les commentaires et la langue utilisée pour nommer les variables. Pour un programme scientifique, les commentaires et les noms de variables sont

Chunk id: 4256
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
ax.scatter(X, Y, Z, c="salmon", marker="o")
#x, y, z sont des floats avec les coordonnées du COM de la upper.
ax.scatter(x, y, z, c="red", marker="x")
[...]
#Axis + title.
ax.set_xlabel("x (Å)")

Chunk id: 3470
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
Testez ensuite si les expressions suivantes sont des pangrammes :  
- Portez ce vieux whisky au juge blond qui fume
- Monsieur Jack vous dactylographiez bien mieux que votre ami Wolf

Chunk id: 716
Number of Tokens: 89
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
Notez qu'il existe des méthodes permettant de réaliser ces opérations d'union et d'intersection :  
```python
>>> s1 = {1, 3, 4, 5}
>>> s2 = {0, 1, 2, 3, 5}
>>> s1.union(s2)
{0, 1, 2, 3, 4, 5}

Chunk id: 2361
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```python
"""Un script de multiplication.
"""

Chunk id: 3942
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
la méthode `count()` qui renvoie le nombre de fois qu'une chaîne de caractères (les différentes bases) se trouve dans une autre (la séquence).

Chunk id: 2721
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> for animal in animaux:
...     print(animal)
...
girafe
tigre
singe
souris
```

Chunk id: 316
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#87-module-os-interaction-avec-le-systeme-dexploitation
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.7 Module *os* : interaction avec le système d'exploitation
Content:
```python
>>> import sys
>>> import os
>>> if os.path.exists("toto.pdb"):
...     print("le fichier est présent")
... else:
...     sys.exit("le fichier est absent")
...
le fichier est absent
```

Chunk id: 3491
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
Téléchargez le fichier [`1bta.pdb`](https://files.rcsb.org/download/1BTA.pdb) qui correspond à la [structure tridimensionnelle de la protéine

Chunk id: 4470
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
Depuis que nous les avons découvertes, aucun retour n'est envisageable pour nous tant elles sont puissantes et plus claires à utiliser !

Chunk id: 827
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
Utilisez la fonction `trouve_calpha()` pour afficher à l'écran le nombre total de carbones alpha de la barstar ainsi que les coordonnées atomiques des carbones alpha des deux premiers résidus (acides

Chunk id: 652
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
Ceci est dû au fait que le nouvel objet `"Plif"` n'a pas le même identifiant que la sous-liste initiale. En fait, l'immutabilité selon Python signifie qu'un objet créé doit toujours garder le même

Chunk id: 4788
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
On notera que tous ces événements sont liés à des clics sur le *canvas*, mais il est possible de capturer des événements de souris sur d'autres types de *widgets*.

Chunk id: 1503
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
if __name__ == "__main__":
citron1 = Citron()
print(citron1.saveur)
citron1.saveur = "sucrée"
print(citron1.saveur) #on regarde ici avec Python Tutor
del citron1.saveur

Chunk id: 2094
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Lignes 9 à 15. Les *namedtuples* sont itérables.  
Enfin, il est possible de convertir un *namedtuple* en dictionnaire (ordonné) avec la méthode `._asdict()` :  
```
>>> citron._asdict()

Chunk id: 2483
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#61-definition
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.1 Définition
Content:
- Les blocs d'instructions dans les tests doivent forcément être indentés comme pour les boucles `for` et `while`.  L'indentation indique la portée des instructions à exécuter si le test est vrai.

Chunk id: 975
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
groupe 1 puisque c'est le premier jeu de parenthèses), immédiatement suivi du même groupe grâce au `\\1`. Dans cet exemple, on capture donc le mot `panpan` (lignes 1 et 2). Si, par contre, on a une

Chunk id: 2759
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#53-boucles-while
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.3 Boucles `while`
Content:
1. Initialisation de la variable d'itération avant la boucle (ligne 1).
2. Test de la variable d'itération associée à l'instruction `while` (ligne 2).

Chunk id: 2638
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
5. le nombre se trouve entre 75 et 81, on propose 78 ( 75 + (81-75)/2 ).
6. le nombre se trouve entre 78 et 81, on propose 79 ( 78 + (81-78)/2 ).

Chunk id: 2088
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
Mais dans *namedtuple*, il y a *tuple* ! Ainsi, l'instance `citron` hérite de tous les attributs des tuples :  
```python
>>> citron[0]
10
>>> citron[3]
'ellipsoide'
>>> citron.masse = 100

Chunk id: 2644
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
Est-ce votre nombre est plus grand, plus petit ou égal à 75 ? [+/-/=] +
Est-ce votre nombre est plus grand, plus petit ou égal à 87 ? [+/-/=] -

Chunk id: 3615
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
### 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`

Chunk id: 2604
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
close-box-rem

Chunk id: 398
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
est unique. En Python, on utilise la fonction interne `id()` qui prend en argument un objet et renvoie son identifiant.

Chunk id: 1833
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
chapitre. Avec le module *Tkinter*, chaque objet graphique (bouton, zone de texte, etc.) est en fait une classe. On peut ainsi créer de nouvelles classes héritant des classes *Tkinter* afin de

Chunk id: 1608
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
d'instance*. La chose importante à retenir sur cette question est la suivante : si un attribut de classe et un attribut d'instance ont le même nom, c'est l'attribut d'instance qui est

Chunk id: 2692
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
Python possède la fonction `range()` que nous avons rencontrée précédemment dans le chapitre 4 sur les *Listes* et qui est aussi bien commode pour faire une boucle sur une liste d'entiers de manière

Chunk id: 5013
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2086-projet-simulation-dun-pendule
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.6 Projet simulation d'un pendule
Content:
Vous souhaitez aller plus loin après ces exercices de  « mise en jambe » ? Nous vous conseillons d'aller directement au chapitre 22 *Mini projets*. Nous vous proposons de réaliser une application

Chunk id: 2878
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
## 9.3 Passage d'arguments

Chunk id: 117
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
utilisent des variables globales ! Ensuite, arriverez-vous à vous relire dans six mois ? Quelqu'un d'autre pourrait-il comprendre votre programme ? Il existe de nombreuses autres

Chunk id: 3880
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
role of transferrin in erythropoiesis and iron metabolism. Patient
s and mice deficient in transferrin exhibit anemia and a paradoxica

Chunk id: 542
Number of Tokens: 70
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
>>> dict(liste_animaux)
{'girafe': 2, 'singe': 3}
```  
Ou un *tuple* de *tuples* de 2 éléments (cf. rubrique suivante pour la définition d'un *tuple*), ou encore une combinaison liste / *tuple* :

Chunk id: 4367
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> print(f"La proportion de GC est {prop_GC:.2f}")
La proportion de GC est 0.48
>>> print(f"La proportion de GC est {prop_GC:.3f}")
La proportion de GC est 0.478
```

Chunk id: 1847
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
comme une bonne pratique. Il est plutôt recommandé de définir une *interface*, c'est-à-dire tout un jeu de méthodes accédant ou modifiant les attributs. Ainsi, le concepteur de la classe a la

Chunk id: 1056
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
En Python, comme dans la plupart des langages de programmation, c'est le point qui est utilisé comme séparateur décimal. Ainsi, `3.14` est un nombre reconnu comme un *float* en Python alors que ce

Chunk id: 482
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1323-iteration-sur-les-cles-pour-obtenir-les-valeurs
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.3 Itération sur les clés pour obtenir les valeurs
Content:
```python
>>> ani2 = {'nom': 'singe', 'poids': 70, 'taille': 1.75}
>>> for key in ani2:
...     print(key, ani2[key])
...
poids 70
nom singe
taille 1.75
```

Chunk id: 1763
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
*object*. Par exemple, lorsqu'on instancie un objet Citron `c = Citron()`, Python utilisera la méthode `.__init__()` héritée de la classe *object* (puisque nous ne l'avons pas définie dans la classe

Chunk id: 2853
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
a juste besoin de savoir qu'il faut lui passer en argument un angle en radian et qu'elle renvoie le cosinus de cet angle. Ce qui se passe à l'intérieur de la fonction ne regarde que le programmeur.

Chunk id: 3997
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1744-selection
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Content:
### 17.4.4 Sélection  
Les mécanismes de sélection  fournis avec *pandas* sont très puissants.
En voici un rapide aperçu :

Chunk id: 1219
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
```python
>>> import copy
>>> x = [[1, 2], [3, 4]]
>>> x
[[1, 2], [3, 4]]
>>> y = copy.deepcopy(x)
>>> x[1][1] = 99
>>> x
[[1, 2], [3, 99]]
>>> y
[[1, 2], [3, 4]]
```

Chunk id: 1429
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Lignes 8 et 9. On souhaite que notre méthode `.affiche_attributs()` affiche ensuite l'attribut de classe `.couleur` ainsi que la variable `var` créée dans le constructeur `.__init__()`.

Chunk id: 487
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
Les mentions `dict_keys` et `dict_values` indiquent que nous avons à faire à des objets un peu particuliers. Ils ne sont pas indexables (on ne peut pas retrouver un élément par indice, par exemple

Chunk id: 2176
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#184-des-graphiques-dans-les-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.4 Des graphiques dans les notebooks
Content:
Une méthode plus radicale est de revenir sur le *shell* depuis lequel les notebooks Jupyter ont été lancés puis de presser deux fois la combinaison de touches *Ctrl* + *C*.  
close-box-rem

Chunk id: 2131
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
au passage qu'il est également possible de créer un fichier texte, un répertoire ou bien encore de lancer un *shell* via un *Terminal* (voir figure @fig:jupyter-nouveau-notebook).

Chunk id: 994
Number of Tokens: 15
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1643-nettoyeur-despaces
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.3 Nettoyeur d'espaces
Content:
### 16.4.3 Nettoyeur d'espaces

Chunk id: 0
Number of Tokens: 8
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#12-plus-sur-les-fonctions
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Content:
# 12 Plus sur les fonctions

Chunk id: 3546
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
et les symboles `([` et `])` sont utilisés pour le distinguer d'une liste (délimitée par les caractères `[` et `]`) ou d'un tuple (délimité par les caractères `(` et `)`).

Chunk id: 1906
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
modifier, voire détruire l'attribut (à l'image des *getters* et *setters* évoqués ci-dessus, ainsi que des *deleters* ou encore destructeurs en français). Pour faire cela, on utilise la fonction

Chunk id: 1095
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#252-operations-sur-les-chaines-de-caracteres
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.2 Opérations sur les chaînes de caractères
Content:
close-box-warn

Chunk id: 3710
Number of Tokens: 106
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
[4, 5]])
>>> a2
array([[ 0,  5],
[10, 15],
[20, 25]])
>>>
>>> np.concatenate((a1, a2), axis=0)
array([[ 0,  1],
[ 2,  3],
[ 4,  5],
[ 0,  5],
[10, 15],
[20, 25]])
>>> np.concatenate((a1, a2), axis=1)

Chunk id: 500
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1325-existence-dune-cle-ou-dune-valeur
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.5 Existence d'une clé ou d'une valeur
Content:
### 13.2.5 Existence d'une clé ou d'une valeur  
Pour vérifier si une clé existe dans un dictionnaire, on peut utiliser le test d’appartenance avec l'opérateur `in` qui renvoie un booléen :

Chunk id: 3520
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
gène   2 direct         ->   227 bases
gène   3 complémentaire ->  1781 bases
[...]
gène  99 direct         ->   611 bases
gène 100 direct         ->   485 bases

Chunk id: 2329
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
aux utilisateurs des modules, fonctions, méthodes et classes que vous avez développés. Les éléments essentiels pour les fonctions et les méthodes sont :

Chunk id: 3460
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1088-alphabet-et-pangramme
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.8 Alphabet et pangramme
Content:
### 10.8.8 Alphabet et pangramme

Chunk id: 2520
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
**OU**. Respectez bien la casse des opérateurs `and` et `or` qui, en Python, s'écrivent en minuscule. En voici un exemple d'utilisation :

Chunk id: 1712
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
*redéfinition de méthode* (*method overriding*), c'est-à-dire qu'on redéfinit une méthode héritée d'une classe mère. Il ne faut pas confondre cela avec la *surcharge de fonction* (*function

Chunk id: 3307
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
- Le préfixe `r` mis pour *raw string* qui force la non-interprétation des caractères spéciaux :  
```python
>>> s = "Voici un retour à la ligne\nEt là une autre ligne"
>>> s

Chunk id: 4038
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
```  
Ici, `NaN` indique des valeurs manquantes. Mais le résultat obtenu n'est pas celui que nous attendions puisque les lignes de deux *dataframes* ont été recopiées.

Chunk id: 689
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
>>> set({"clé_1": 1, "clé_2": 2})
{'clé_1', 'clé_2'}
>>> set(["ti", "to", "to"])
{'ti', 'to'}
>>> set("Maître corbeau sur un arbre perché")

Chunk id: 1581
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
if __name__ == "__main__":
saveur = "sucrée"
couleur = "orange"
print(f"Dans le programme principal: {saveur}, {couleur}")
citron1 = Citron("très acide", "jaune foncé")

Chunk id: 4222
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#construction-de-la-matrice-de-coordonnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.3 Construction de la matrice de coordonnées
Content:
la fonction `reshape()` de *NumPy*, construisez ensuite une matrice à deux dimensions contenant les coordonnées des carbones alpha de la barstar. Affichez les dimensions de cette matrice.

Chunk id: 733
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
>>> f1.add(5)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
AttributeError: 'frozenset' object has no attribute 'add'
>>> f1.union(f2)
frozenset({0, 1, 2, 3, 4, 5})

Chunk id: 3197
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
afin d'être exécutée par l'ordinateur. Pour vous en rendre compte, ouvrez un *shell* puis lancez la commande :

Chunk id: 2372
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
le numéro de la ligne (6) et le numéro de la colonne (1) où se trouve la non-conformité avec la PEP 8. Ensuite, `pycodestyle` fournit un code et un message explicatif. Ici, il faut deux lignes vides

Chunk id: 268
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.5 Module *random* : génération de nombres aléatoires
Content:
date. Plus précisément, il s'agit du nombre de secondes écoulées depuis une date donnée du passé. Ainsi, à chaque fois qu'on relance Python, la graine sera différente car ce nombre de secondes sera

Chunk id: 3172
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
Vous trouverez en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod) une documentation pas-à-pas pour installer Miniconda, Python 3 et les modules supplémentaires qui seront utilisés dans

Chunk id: 361
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
de $\pi$ obtenez-vous pour 100 itérations ? 1000 itérations ? 10 000 itérations ? Comparez les valeurs obtenues à la valeur de $\pi$ fournie par le module *math*.

Chunk id: 717
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> s1 = {1, 3, 4, 5}
>>> s2 = {0, 1, 2, 3, 5}
>>> s1.union(s2)
{0, 1, 2, 3, 4, 5}
>>> s1.intersection(s2)
{1, 3, 5}
```

Chunk id: 3349
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
>>> animaux.split(maxsplit=2)
['girafe', 'tigre', 'singe souris']
```  
La méthode `.find()`, quant à elle, recherche une chaîne de caractères passée en argument :  
```python
>>> animal = "girafe"

Chunk id: 1928
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
objet de type *property* (si on regarde son contenu avec une syntaxe `NomClasse.attribut_property`, donc ici `Citron.masse`, Python nous renverra quelque chose de ce style : `<property object at

Chunk id: 3275
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#101-preambule
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.1 Préambule
Content:
Nous avons déjà abordé les chaînes de caractères dans les chapitres 2 *Variables* et 3 *Affichage*. Ici nous allons un peu plus loin, notamment avec les [méthodes associées aux chaînes de

Chunk id: 1535
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
espace de noms, c'est finalement une correspondance entre des noms et des objets. Un espace de noms peut être vu aussi comme une capsule dans laquelle on trouve des noms d'objets. Par exemple, le

Chunk id: 1048
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
les nombres complexes, etc.). Si vous n'êtes pas effrayés, vous pouvez vous en rendre compte [ici](https://docs.python.org/fr/3.7/library/stdtypes.html).

Chunk id: 1161
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1114-remove
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.4 `.remove()`
Content:
### 11.1.4 `.remove()`  
La méthode `.remove()` supprime un élément d'une liste à partir de sa valeur :  
```python
>>> a = [1, 2, 3]
>>> a.remove(3)
>>> a
[1, 2]
```

Chunk id: 758
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1354-types-de-base
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.4 Types de base
Content:
| entier          |  non                                   | non      | non     | non       | non        | oui      |

Chunk id: 394
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
L'**identifiant** d'un objet est un nombre entier qui est garanti constant pendant toute la durée de vie de l'objet. Cet identifiant est en général unique pour chaque objet. Toutefois, pour des

Chunk id: 3496
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10810-affichage-des-carbones-alpha-dune-structure-de-proteine
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.10 Affichage des carbones alpha d'une structure de protéine
Content:
*Conseil :* vous trouverez des explications sur le format PDB et des exemples de code pour lire ce type de fichier en Python dans l'annexe A *Quelques formats de données rencontrés en biologie*.

Chunk id: 673
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Ils ont la particularité d'être modifiables, non hachables, non ordonnés, non indexables et de ne contenir qu'une seule copie maximum de chaque élément. Pour créer un nouveau *set* on peut utiliser

Chunk id: 1808
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
de la classe mère qui a le même nom qu'une méthode de la classe fille. Dans ce cas, si on utilisait `self.__init__()`, cela correspondrait à la fonction de notre classe fille Citron. En mettant

Chunk id: 965
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
>>> regex.sub("approximativement \\1 (puis .\\2)",phrase)
'pi vaut approximativement 3 (puis .14) et e vaut approximativement 2 (puis .72)'
```

Chunk id: 2109
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1972-classe-rectangle-amelioree
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.2 Classe `Rectangle` améliorée
Content:
Entraînez-vous avec la classe `Rectangle`. Créez la méthode `calcule_perimetre()` qui calcule le périmètre d'un objet rectangle. Testez sur un exemple simple (largeur = 10 m, longueur = 20 m).

Chunk id: 1215
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
Attention, les deux astuces précédentes ne fonctionnent que pour les listes à une dimension, autrement dit les listes qui ne contiennent pas elles-mêmes d'autres listes. Voyez par exemple :

Chunk id: 1395
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Si d'autres attributs étaient créés, ils seraient tous répertoriés dans cet espace `Citron instance`. Vous l'aurez compris, l'attribut `couleur` est donc une variable d'instance (voir rubrique *Ajout

Chunk id: 942
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1634-groupes
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.4 Groupes
Content:
```  
Dans cet exemple, on recherche un nombre décimal, c'est-à-dire une chaîne de caractères :  
- qui débute par un ou plusieurs chiffres `[0-9]+`,

Chunk id: 1652
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
print(citron1)
citron2 = CitronCool("jaune foncée", "minuscule")
print(citron2)
```  
Lignes 1 à 4. Création d'une classe `CitronBasique` dans laquelle il n'y a qu'un constructeur.

Chunk id: 4970
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2082-horloge
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.2 Horloge
Content:
### 20.8.2 Horloge

Chunk id: 3586
Number of Tokens: 106
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
>>> a = np.arange(0, 6)
>>> a
array([0, 1, 2, 3, 4, 5])
>>> a.shape
(6,)
>>> b = a.reshape((2, 3))
>>> b
array([[0, 1, 2],
[3, 4, 5]])
>>> b.shape
(2, 3)
>>> a
array([0, 1, 2, 3, 4, 5])
```

Chunk id: 2808
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
![Demi-matrice sans la diagonale (en gris).](img/demi-matrice-sans-diag.png "Demi-matrice sans la diagonale (en gris)"){ #fig:demimatrice width=30% }

Chunk id: 4026
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
Par exemple, si on considère les deux *dataframes* suivants :  
```python
>>> data1 = {"Lyon": [10, 23, 17], "Paris": [3, 15, 20]}
>>> df1 = pd.DataFrame.from_dict(data1)

Chunk id: 981
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1641-regex-de-base
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.1 *Regex* de base
Content:
Dans cet exercice, nous allons manipuler le fichier GenBank [`NC_001133.gbk`](https://python.sdv.univ-paris-diderot.fr/data-files/NC_001133.gbk) correspondant au chromosome I de la levure

Chunk id: 1003
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
- lit le fichier `human-proteome.fasta` ;
- extrait, avec une *regex*, de toutes les lignes de commentaires des séquences, le numéro d'accession de la protéine ;

Chunk id: 1107
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
En programmation, on est souvent amené à convertir les types, c'est-à-dire passer d'un type numérique à une chaîne de caractères ou vice-versa. En Python, rien de plus simple avec les fonctions

Chunk id: 2930
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
par défaut de nombreuses fonctions. Par exemple, si on souhaite que la fonction `print()` n'affiche pas un retour à la ligne, on peut utiliser l'argument `end` :

Chunk id: 2279
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
```python
>>> def ma_fonction(argument_1, argument_2,
...                 argument_3, argument_4):
...     return argument_1 + argument_2
...
>>> ma_fonction("texte très long", "tigre",

Chunk id: 207
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
sequences
---------
pick random element
pick random sample
```  
open-box-rem

Chunk id: 546
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#13211-fonction-dict
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.11 Fonction `dict()`
Content:
```python
>>> dict([("girafe", 2), ("singe", 3, 4)])
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 140
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1263-conclusion
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.3 Conclusion
Content:
- Lorsque vous débutez un nouveau projet de programmation, posez-vous la question : « Comment pourrais-je décomposer en blocs chaque tâche à effectuer, chaque bloc pouvant être une fonction ? ». Et

Chunk id: 2027
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
En résumé, n'essayez pas de mettre des barrières inutiles vers vos attributs. Cela va à l'encontre de la philosophie Python. Soignez plutôt la documentation et faites confiance aux utilisateurs de

Chunk id: 4759
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
#Coord baballe.
self.x, self.y = 200, 200
#Rayon baballe.
self.size = 50
#Pas de deplacement.
self.dx, self.dy = 20, 20
#Création et packing du canvas.

Chunk id: 1335
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
```python
>>> citron1.__dict__
{'couleur': 'jaune'}
>>> del citron1.couleur
>>> citron1.__dict__
{}
```

Chunk id: 372
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
### 13.1.2 Propriétés  
Examinons d'abord les propriétés qui caractérisent tous les types de container.

Chunk id: 2381
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
script_quality_not_ok.py:7 in public function `Multiplie_nombres`:
D205: 1 blank line required between summary line and description (found 0)

Chunk id: 215
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
```python
>>> t = [1, 2, 3]
>>> help(t)
Help on list object:

Chunk id: 1416
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
### 19.1.7 Mieux comprendre le rôle du `self`

Chunk id: 3176
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
l'aide d'un éditeur de texte. Si vous êtes débutants, on vous conseille d'utiliser *notepad++* sous Windows, *BBEdit* ou *CotEditor* sous Mac OS X et *gedit* sous Linux. La configuration de ces

Chunk id: 2706
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
ce qui revient à stocker seulement 3 nombres entiers et ce quelle que soit la longueur de la séquence, même avec un `range(1000000)`. Si on utilisait `list(range(1000000))`, Python construirait

Chunk id: 4371
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
- À droite des deux-points on trouve `.2f` qui indique ce format : la lettre `f` indique qu'on souhaite afficher la variable sous forme d'un *float*, les caractères `.2` indiquent la précision

Chunk id: 969
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
à mettre un deuxième *backslash* car il y a ici deux niveaux : un premier niveau Python où on veut mettre un *backslash* littéral (donc `\\`), puis un second niveau *regex* dans lequel on veut

Chunk id: 2947
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 2.](img/fct_step2.png){ #fig:fct_step2 width=80% }
\

Chunk id: 2957
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 5.](img/fct_step5.png){ #fig:fct_step5 width=80% }
\  
- Étape 6 : La variable `y` est créée dans la fonction. Celle-ci est donc stockée en tant que variable *locale* à la fonction.

Chunk id: 2726
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#514-iteration-sur-les-indices-ou-les-elements
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.4 Itération sur les indices ou les éléments
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> for i, animal in enumerate(animaux):
...     print(f"L'animal {i} est un(e) {animal}")
...
L'animal 0 est un(e) girafe

Chunk id: 651
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
```python
>>> t[0] = "Plif"
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
```

Chunk id: 4669
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 9. On crée un label en instanciant la classe `tk.Label()`. Notez que le premier argument passé est maintenant `self` (au lieu de `racine` précédemment) indiquant la fenêtre dans laquelle sera

Chunk id: 4818
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Lignes 80 à 82. Cette méthode quitte l'application lorsque l'utilisateur fait un clic sur la touche *Esc*.

Chunk id: 4812
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Lignes 68 à 78. On a ici deux méthodes `.incr()` et `.decr()` appelées lors d'un clic gauche ou droit. Deux choses sont à noter : i) l'attribut `self.size` est modifié dans les deux fonctions, mais

Chunk id: 201
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
```python
>>> import random
>>> help(random)
[...]
```  
Ce qui renvoie quelque chose du type :  
```text
Help on module random:

Chunk id: 1378
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
site [*Python Tutor*](http://www.pythontutor.com) (déjà utilisé dans les chapitres 9 et 12 sur les fonctions). N'hésitez pas à copier/coller ce code dans *Python Tutor* pour le tester vous-même :

Chunk id: 4296
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#chargement-du-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.6 Analyse d'un jeu de données avec *pandas*
Subsubsection Name: 17.6.6.1 Chargement du jeu de données
Content:
#### 17.6.6.1 Chargement du jeu de données  
Téléchargez le fichier [people.tsv](https://python.sdv.univ-paris-diderot.fr/data-files/people.tsv).

Chunk id: 2445
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Quand vous construisez une structure de données complexe (par exemple une liste de dictionnaires contenant d'autres objets), documentez et illustrez l'organisation de cette structure de données sur

Chunk id: 3541
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
d'effectuer du calcul vectoriel. La fonction `array()` convertit un container (comme une liste ou un tuple) en un objet de type *array*. Voici un exemple simple de conversion d'une liste à une

Chunk id: 1145
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2113-predire-le-resultat-operations-et-conversions-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.3 Prédire le résultat : opérations et conversions de types
Content:
- `str(4) * int("3")`
- `int("3") + float("3.2")`
- `str(3) * float("3.2")`
- `str(3/4) * 2`

Chunk id: 4751
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
intéressante, à savoir, comment « intercepter » des clics de souris générés ou des touches pressées par l'utilisateur. L'application consiste en une « baballe » qui se déplace dans la fenêtre et dont

Chunk id: 4333
Number of Tokens: 3
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
close-box-def

Chunk id: 1587
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
avec les variables d'instance portant le même nom. Au sein de la classe, on utilisera pour récupérer ces dernières `self.saveur` et `self.couleur`. À l'extérieur, on utilisera `instance.saveur` et

Chunk id: 2229
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
régler correctement votre éditeur de texte. Consultez pour cela l'annexe *Installation de Python* disponible en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod). Avant d'écrire la

Chunk id: 1707
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
if __name__ == "__main__":
fille = Fille2()
print(fille.bonjour())
```

Chunk id: 4769
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
self.canv.coords(self.baballe, self.x, self.y, self.x+self.size,
self.y+self.size)
#Rappel de move toutes les 50ms.
self.after(50, self.move)

Chunk id: 4881
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
Toutefois, il se peut qu'en consultant d'autres ressources certains auteurs utilisent la technique d'héritage de la classe mère `tk.Frame` :

Chunk id: 3223
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
que la ligne de code n'est pas finie. L'interpréteur nous l'indique avec les `...`. En ligne 2, on rentre la fin de la ligne de code puis on appuie sur Entrée. A ce moment, Python nous génère le

Chunk id: 1134
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#210-minimum-et-maximum
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.10 Minimum et maximum
Content:
prenant plusieurs arguments. En Python, quand une fonction prend plusieurs arguments, on doit les séparer par une virgule. `min()` et `max()` prennent en argument autant d'entiers et de *floats* que

Chunk id: 454
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
des éléments n'était pas forcément le même que celui dans lequel il avait été rempli. De même lorsqu'on itérait dessus, l'ordre n'était pas garanti. Depuis Python 3.7 (inclus), ce comportement a

Chunk id: 461
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1321-definition
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.1 Définition
Content:
```
Mais rien ne nous empêche d'ajouter une clé et une valeur supplémentaire :  
```python
>>> ani2["age"] = 15
```

Chunk id: 2794
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5410-pyramide
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.10 Pyramide
Content:
de lignes `N`. Vous pourrez demander à l'utilisateur le nombre de lignes de la pyramide avec les instructions suivantes qui utilisent la fonction `input()` :

Chunk id: 1917
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
un *underscore* unique, envoyant un message à l'utilisateur qu'il s'agit d'une variable associée au comportement interne de la classe).

Chunk id: 1371
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
open-box-rem

Chunk id: 2880
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#93-passage-darguments
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.3 Passage d'arguments
Content:
fonctions auxquelles on passait 0 ou 1 argument. Dans les chapitres précédents, vous avez rencontré des fonctions internes à Python qui prenaient au moins 2 arguments. Souvenez-vous par exemple de

Chunk id: 4501
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
```bash
$ python mon_script.py file.gbk blabla blublu
```

Chunk id: 3250
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#18-notion-de-bloc-dinstructions-et-dindentation
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.8 Notion de bloc d'instructions et d'indentation
Content:
le chapitre 5 *Boucles et comparaisons*) ou d'exécuter plusieurs instructions si une condition est vraie (avec les tests, voir le chapitre 6 *Tests*).

Chunk id: 1658
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
`citron2` de la classe `CitronCool`, le texte correspond à celui retourné par la méthode magique `.__str__()`. Nous avons donc redéfini comment la fonction `print()` se comportait avec une instance

Chunk id: 1777
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
def affiche_conseil(self, type_fruit, conseil):
print("(2) Je suis dans la méthode .affiche_conseil() de la "
"classe Fruit\n")
return (f"Instance {type_fruit}\n"

Chunk id: 2439
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Quand l'algorithme est complexe, commentez votre code pour expliquer votre raisonnement. Utiliser des fonctions (ou méthodes) encore plus petites peut aussi être une solution.

Chunk id: 1739
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
class Citron(builtins.object)
|  Data descriptors defined here:
|
|  __dict__
|      dictionary for instance variables (if defined)
[...]
```

Chunk id: 4090
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
2   Length        41 non-null     int64
3   MW            41 non-null     float64
dtypes: float64(1), int64(1), object(2)
memory usage: 8.6 KB
```  
Ici, le *dataframe* occupe 8,6 ko en mémoire.

Chunk id: 1606
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
Si vous lisez cette rubrique sur l'espace de noms sans avoir lu ce chapitre depuis le début, nous vous conseillons vivement de lire attentivement la rubrique *Différence entre les attributs de classe

Chunk id: 3295
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
```python
>>> print("Un brin d'ADN")
Un brin d'ADN
>>> print('Python est un "super" langage de programmation')
Python est un "super" langage de programmation
```

Chunk id: 4767
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
if self.x < 10:
self.dx = abs(self.dx)
if self.x > 400-self.size-10:
self.dx = -abs(self.dx)
if self.y < 10:
self.dy = abs(self.dy)
if self.y > 400-self.size-10:
self.dy = -abs(self.dy)

Chunk id: 2542
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
On observe que lorsqu'on tape `0.3`, Python affiche une valeur arrondie. En réalité, le nombre réel `0.3` ne peut être qu'approché lorsqu'on le code en nombre flottant. Il est donc essentiel d'avoir

Chunk id: 1991
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
La présence des *underscores* dans les noms d'attributs est un signe clair que le client ne doit pas y toucher. Toutefois, cela n'est qu'une convention, et comme dit ci-dessus le client peut tout de

Chunk id: 4020
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
```  
De cette sélection, on ne souhaite garder que les valeurs pour Lyon :  
```python
>>> df[ df["Pau"]>15 ]["Lyon"]
singe     21
souris    31
Name: Lyon, dtype: int64
```

Chunk id: 693
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
```python
>>> s = set([1, 2, 4, 1])
>>> s[1]
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
>>> s[1] = 5

Chunk id: 628
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
`_var`, `var_`, `__var`, `__var__`). On verra au chapitre 19 *Avoir la classe avec les objets* que ces *underscores* ont aussi une signification particulière.

Chunk id: 1116
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#28-note-sur-la-division-de-deux-nombres-entiers
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.8 Note sur la division de deux nombres entiers
Content:
close-box-rem

Chunk id: 2210
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
le découpage en fonctions (et possiblement en classes que nous verrons dans le chapitre 19 *Avoir la classe avec les objets*), mais souvent, aussi, le bon sens. Pour cela, les « PEP » peuvent nous

Chunk id: 4797
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
fonction récursive. Toutefois, ce n'est pas une vraie fonction récursive comme celle vue dans le chapitre 12 (exemple du calcul de factorielle), car Python ne conserve pas l'état de la fonction lors

Chunk id: 3655
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1715-copie-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.5 Copie d'*arrays*
Content:
On pourra noter que la stratégie `b = np.array(a)` fait bien une copie distincte de l'*array* `a` quelle que soit sa dimensionnalité. Ceci n'était pas le cas avec la fonction `list()` pour les copies

Chunk id: 391
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
On comprend bien l'immutabilité des *strings* comme vu au chapitre 10, mais c'est moins évident pour les entiers, *floats* ou booléens. Nous allons démontrer cela, mais avant nous avons besoin de

Chunk id: 2378
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ensuite, l'outil `pydocstyle` va vérifier la conformité avec la PEP 257 et s'intéresser particulièrement aux *docstrings* :  
```bash
$ pydocstyle script_quality_not_ok.py

Chunk id: 3455
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1087-mot-composable
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.7 Mot composable
Content:
Écrivez la fonction `test_composable()` qui prend en argument un mot (sous la forme d'une chaîne de caractères) et une séquence de lettres (aussi comme une chaîne de caractères) et qui affiche `Le

Chunk id: 928
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1632-les-fonctions-match-et-fullmatch
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.2 Les fonctions `match()` et `fullmatch()`
Content:
De manière générale, nous vous recommandons l'usage de la fonction `search()`. Si vous souhaitez avoir une correspondance avec le début de la chaîne de caractères comme dans la fonction `match()`,

Chunk id: 3912
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
### 17.3.2 Représentation sous forme de courbe

Chunk id: 1626
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
en fonction de l'objet qui lui est passé. Une fonction donnée peut donc avoir plusieurs définitions.

Chunk id: 2855
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
est plus judicieux d'écrire plusieurs fonctions (qui peuvent éventuellement s'appeler les unes les autres). Cette **modularité** améliore la qualité générale et la lisibilité du code. Vous verrez

Chunk id: 4898
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
self.racine = racine
[...]
[...]
if __name__ == "__main__":
app = Application()
app.mainloop()
```

Chunk id: 1586
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
Les deux variables globales `saveur` et `couleur` du programme principal ne peuvent pas être confondues avec les variables d'instance portant le même nom. Au sein de la classe, on utilisera pour

Chunk id: 602
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1333-affectation-multiple-et-le-nom-de-variable
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.3 Affectation multiple et le nom de variable `_`
Content:
d'effectuer sur une même ligne plusieurs affectations en même temps, par exemple : `x, y, z = 1, 2, 3`. Cette syntaxe correspond à un *tuple* de chaque côté de l'opérateur `=`. Notez qu'il serait

Chunk id: 4608
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
et donc l'application s'arrêtera. Vous voyez par ailleurs que cette méthode `racine.destroy` est passée à l'argument `command=` **sans parenthèses ni arguments** : il s'agit donc d'une fonction

Chunk id: 753
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1353-objets-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.3 Objets *sets*
Content:
| *sets*                | oui                                     | oui      | non     | non       | oui        | non      |

Chunk id: 3263
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#19-autres-ressources
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.9 Autres ressources
Content:
## 1.9 Autres ressources

Chunk id: 4676
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
tk_application.py`), ou bien de réutiliser notre classe en important `tk_application.py` en tant que module (`import tk_application`) (voir le chapitre 14 *Création de modules*).

Chunk id: 1196
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#112-construction-dune-liste-par-iteration
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.2 Construction d'une liste par itération
Content:
un objet de type chaîne de caractères en un objet de type liste (il s'agit donc d'une opération de *casting*). De même que `list(range(10))` convertit un objet de type `range` en un objet de type

Chunk id: 4940
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
open-box-adv  
Même si cela est possible, nous vous conseillons de systématiquement préciser l'instance de la fenêtre principale lors de la création de vos *widgets*.  
close-box-adv

Chunk id: 1545
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#192-espace-de-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Content:
même nom). En définitive, ce qui va compter, c'est de savoir quelles règles Python va utiliser pour chercher dans les différents espaces de noms pour finalement accéder à un objet.

Chunk id: 3968
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
avec des étiquettes pour nommer les lignes et les colonnes.  
open-box-rem  
Si vous êtes familier avec le langage de programmation et d'analyse statistique R, les

Chunk id: 4989
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
```text
définir les 3 sommets d'un triangle isocèle ou équilatéral
point <- coordonnées (x, y) du centre du trianle
dessiner(point) # un pixel de large
pour i de 0 à 25000:

Chunk id: 3232
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
éventuelles erreurs d'un programme). Gardez bien en mémoire cette propriété de Python qui pourra parfois vous faire gagner un temps précieux !

Chunk id: 3614
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
close-box-rem

Chunk id: 1657
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
`CitronBasique` affiche le message abscons que nous avons déjà croisé. Par contre, pour l'instance `citron2` de la classe `CitronCool`, le texte correspond à celui retourné par la méthode magique

Chunk id: 3810
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
la convertir à la fin en *array*. De manière générale, utilisez `np.concatenate()` seulement pour concaténer des gros *arrays*, pas pour ajouter juste une ligne.

Chunk id: 2607
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#679-determination-des-nombres-premiers-inferieurs-a-100-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Content:
*Un nombre premier est un entier naturel qui admet exactement deux diviseurs distincts entiers et positifs (qui sont alors 1 et lui-même). Cette définition exclut 1, qui n'a qu'un seul diviseur

Chunk id: 1462
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Afin de bien comprendre les différentes étapes des codes de cette rubrique, nous vous conseillons de les retester de votre côté dans *Python Tutor*.

Chunk id: 2143
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Pour créer une nouvelle cellule, vous avez, ici encore, plusieurs possibilités :  
- Cliquer sur l’icône *+* sous la barre de menu.
- Cliquer sur le menu *Insert*, puis *Insert Cell Below*.

Chunk id: 4269
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#recuperation-des-informations-dune-publication
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.2 Récupération des informations d'une publication
Content:
Affichez le titre, le DOI, le nom du journal (`Source`) et la date de publication (`PubDate`) de cet article. Vérifiez que cela correspond bien à ce que vous avez lu sur PubMed.

Chunk id: 2345
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
Lignes 16 et 17. La section `Returns` indique ce qui est renvoyé par la fonction (le cas échéant).

Chunk id: 4634
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
Ligne 10. Cette ligne ne s'exécute qu'après l'arrêt de l'application (soit en cliquant sur le bouton « Quitter », soit en cliquant sur la croix).

Chunk id: 3876
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Pour faire court, le résumé peut s'obtenir avec l'instruction :  
```python
>>> res_efetch['PubmedArticle'][0]['MedlineCitation']['Article'] \
... ['Abstract']['AbstractText'][0]

Chunk id: 4665
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
19 *Avoir la classe avec les objets*, appeler le constructeur de la classe mère est une pratique classique lorsqu'une classe hérite d'une autre classe.

Chunk id: 1241
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1161-tri-de-liste
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.1 Tri de liste
Content:
### 11.6.1 Tri de liste

Chunk id: 3972
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
...                   index=["chat", "singe", "souris"],
...                   data=[np.arange(10, 14),
...                         np.arange(20, 24),
...                         np.arange(30, 34)])

Chunk id: 1857
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
```python
class Citron:
def __init__(self, couleur="jaune", masse=0):
self.couleur = couleur
self.masse = masse #masse en g

Chunk id: 63
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#123-portee-des-variables
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.3 Portée des variables
Content:
Lorsque Python exécute le code de la fonction, il connaît le contenu de la variable `x`. Par contre, de retour dans le module principal (dans ce cas, il s'agit de l'interpréteur Python), il ne la

Chunk id: 1480
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Lignes 10 et 11. On crée une nouvelle méthode `.augmente_masse()` qui augmente l'attribut d'instance `.masse`.

Chunk id: 3153
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#11-cest-quoi-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.1 C'est quoi Python ?
Content:
- C'est un langage interprété. Un script Python n'a pas besoin d'être compilé pour être exécuté, contrairement à des langages comme le C ou le C++.

Chunk id: 679
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
Les *sets* ne peuvent contenir que des objets **hachables**. On a déjà eu le cas avec les clés de dictionnaire. Ceci optimise l'accès à chaque élément du *set*. Pour rappel, les objets hachables que

Chunk id: 1162
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1114-remove
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.4 `.remove()`
Content:
S'il y a plusieurs fois la même valeur dans la liste, seule la première est retirée. Il faut appeler la méthode `.remove()` autant de fois que nécessaire pour retirer toutes les occurences d'un même

Chunk id: 4491
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#365-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.5 Écriture formatée 2
Content:
Ensuite, affichez le contenu de la variable `perc_GC` à l'écran avec 0, 1, 2 puis 3 décimales sous forme arrondie en utilisant l'écriture formatée et les *f-strings*. On souhaite que le programme

Chunk id: 2915
Number of Tokens: 76
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
close-box-def  
Il est bien sûr possible de passer plusieurs arguments par mot-clé :  
```python
>>> def fct(x=0, y=0, z=0):
...     return x, y, z
...
>>> fct()
(0, 0, 0)
>>> fct(10)
(10, 0, 0)

Chunk id: 2382
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
D205: 1 blank line required between summary line and description (found 0)
script_quality_not_ok.py:7 in public function `Multiplie_nombres`:
D400: First line should end with a period (not 's')
```

Chunk id: 752
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1353-objets-sets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.5 Récapitulation des propriétés des containers
Subsection Name: 13.5.3 Objets *sets*
Content:
|:----------------------|:---------------------------------------:|:--------:|:-------:|:---------:|:----------:|:--------:|

Chunk id: 3075
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
concaténation `+` ou la méthode `.append()`. Nous vous conseillons dans ce cas précis d'utiliser la méthode `.append()` dont la syntaxe est plus élégante.

Chunk id: 2486
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
Parfois, il est pratique de tester si la condition est vraie ou si elle est fausse dans une même instruction `if`. Plutôt que d'utiliser deux instructions `if`, on peut se servir des instructions

Chunk id: 138
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1263-conclusion
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.3 Conclusion
Content:
Vous connaissez maintenant les fonctions sous tous leurs angles. Comme indiqué en introduction du chapitre 9, elles sont incontournables et tout programmeur se doit de les maîtriser. Voici les

Chunk id: 4019
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-par-condition
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.4 Sélection par condition
Content:
Paris  Lyon  Nantes  Pau
singe      20    21      22   23
souris     30    31      32   33
```  
De cette sélection, on ne souhaite garder que les valeurs pour Lyon :  
```python

Chunk id: 296
Number of Tokens: 5
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```python
import sys

Chunk id: 4997
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
de choisir le nombre de sommets (de 3 à 10). Le programme calculera automatiquement la position des sommets. Pour prendre en main le *widget* *Listbox*, voici un code minimal qui pourra vous aider.

Chunk id: 2064
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
- Ne mettez pas non plus une liste vide (ou tout autre objet séquentiel modifiable) comme attribut de classe.  
```python
class Citron:
liste = []
```

Chunk id: 3167
Number of Tokens: 10
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#122-miniconda
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.2 Miniconda
Content:
### 1.2.2 Miniconda

Chunk id: 4654
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
porte un nom qui commence par une majuscule (comme recommandé dans les bonnes pratiques de la [PEP8](https://www.python.org/dev/peps/pep-0008/), cf. chapitre 15). L'argument passé dans les

Chunk id: 1021
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1646-nettoyeur-de-doublons-exercice
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.6 Nettoyeur de doublons (exercice +++)
Content:
*Conseil* : utilisez la méthode `.sub()`.

Chunk id: 648
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
`id()` nous renvoie toujours le même depuis le début. Ainsi, nous avons l'explication. Même si la liste a été modifiée « de l'intérieur », Python considère que c'est toujours la même liste

Chunk id: 2140
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
Dans tous les cas, vous devriez obtenir quelque chose qui ressemble à l'image @fig:jupyter-cellule-1. La notation `In [1]` à gauche de la cellule indique qu'il s'agit de la première cellule exécutée.

Chunk id: 360
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#889-determination-du-nombre-pi-par-la-methode-monte-carlo-exercice
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.9 Détermination du nombre pi par la méthode Monte Carlo (exercice +++)
Content:
Finalement calculez le rapport entre *n* et *N* et proposez une estimation de $\pi$. Quelle valeur de $\pi$ obtenez-vous pour 100 itérations ? 1000 itérations ? 10 000 itérations ? Comparez les

Chunk id: 4457
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
met pas directement le nom de la variable au sein des accolades. Comme pour l'opérateur `%`, c'est l'emplacement dans les arguments passés à la méthode `.format()` qui dicte quelle variable doit être

Chunk id: 3578
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
Voici quelques attributs intéressants pour décrire un objet *array* :  
- `.ndim` renvoie le nombre de dimensions (par exemple,
1 pour un vecteur et 2 pour une matrice).

Chunk id: 97
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
D'autres suggestions sur l'envoi de liste dans une fonction vous sont données dans la rubrique *Recommandations* ci-dessous.

Chunk id: 2537
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
En fait, ce problème ne vient pas de Python, mais plutôt de la manière dont un ordinateur traite les nombres flottants (comme un rapport de nombres binaires). Ainsi certaines valeurs de *float* ne

Chunk id: 1229
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1152-jeu-sur-la-casse-des-mots-dune-phrase
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.2 Jeu sur la casse des mots d'une phrase
Content:
>>> msg_lst = message.split()
>>> print([[m.upper(), len(m)] for m in msg_lst])
[["C'EST", 5], ['SYMPA', 5], ['LA', 2], ['BIOINFO', 7]]
```

Chunk id: 4147
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
Text(0, 0.5, 'Masse moléculaire (Dalton)')
>>> plt.savefig("transferrine2.png")
```  
Ligne 1. L'instruction `plt.clf()` efface le graphe précédent mais conserve les

Chunk id: 3046
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
Enfin, pour visualiser votre résultat, ajoutez le code suivant tout à la fin de votre script :  
```python
#création d'une image pour la visualisation du résultat
import matplotlib.pyplot as plt

Chunk id: 3620
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
Par défaut, chacune de ces méthodes effectuera l'opération sur l'*array* entier, quelle que soit sa dimensionnalité. Par exemple :

Chunk id: 4948
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#passage-darguments-a-vos-fonctions-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.6 Passage d'arguments à vos fonctions callback
Content:
et le [livre de Gérard Swinnen](https://inforef.be/swi/python.htm).

Chunk id: 340
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#887-sequences-aleatoires-dadn-avec-argument
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.7 Séquences aléatoires d'ADN avec argument
Content:
### 8.8.7 Séquences aléatoires d'ADN avec argument

Chunk id: 1209
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
Pour éviter ce problème, il va falloir créer une copie explicite de la liste initiale. Observez cet exemple :  
```python
>>> x = [1, 2, 3]
>>> y = x[:]
>>> x[1] = -15
>>> y
[1, 2, 3]
```

Chunk id: 3484
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
Utilisez ensuite cette fonction pour récupérer la séquence d'ADN dans la variable `sequence` dans le programme principal. Le script affichera :  
```text
NC_001133.gbk
La séquence contient XXX bases

Chunk id: 1613
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
```python
def fonction1():
[...]

Chunk id: 4571
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#204-prise-en-main-du-module-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Content:
Le module *Tkinter* est très vaste. Notre but n'est pas de vous faire un cours exhaustif mais plutôt de vous montrer quelques pistes. Pour apprendre à piloter ce module, nous pensons qu'il est

Chunk id: 4893
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#heriter-de-la-classe-frame-pour-vos-applications
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.3 Hériter de la classe Frame pour vos applications ?
Content:
qu'elle soit visible dans toute la classe. La variable `self.racine` est ainsi créée afin d'être réutilisée dans d'autres méthodes.

Chunk id: 2463
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.

Chunk id: 3901
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Vous devriez obtenir une fenêtre graphique **interactive** qui vous permet de manipuler le graphe (se déplacer, zoomer, enregistrer comme image, etc.) et qui ressemble à celle de la figure

Chunk id: 4408
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
### 3.2.5 Expressions dans les *f-strings*

Chunk id: 3122
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
On verra un peu plus loin qu'il existe en Python des dictionnaires qui sont également très pratiques pour stocker de l'information structurée. On verra aussi qu'il existe un module nommé *NumPy* qui

Chunk id: 2321
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
```  
Lorsque vous avez besoin de décrire plus en détail un module, une fonction, une classe ou une méthode, utilisez une *docstring* sur plusieurs lignes.  
```python

Chunk id: 3045
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#988-distance-a-lorigine-exercice
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.8 Distance à l'origine (exercice +++)
Content:
Votre programme générera un fichier `sin2ori.dat` qui contiendra deux colonnes : la première représente les $x$, la seconde la distance entre chaque point de la fonction $sin(x)$ à l'origine.

Chunk id: 846
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#16-expressions-regulieres-et-parsing
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Content:
signifie littéralement « analyse syntaxique »). Le *parsing* fait partie du travail quotidien du bioinformaticien, il est sans arrêt en train de « fouiller » dans des fichiers pour en extraire des

Chunk id: 2288
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1515-longueur-de-ligne
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.5 Longueur de ligne
Content:
Les parenthèses sont aussi très utiles lorsqu'on a besoin d’enchaîner des méthodes les unes à la suite des autres. Un exemple se trouve dans le chapitre 17 *Quelques modules d'intérêt en

Chunk id: 4036
Number of Tokens: 85
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
singe   23.0     NaN   15.0         NaN
souris  17.0     NaN   20.0         NaN
chat     NaN     3.0    NaN         5.0
souris   NaN     9.0    NaN        10.0
lapin    NaN    14.0    NaN         8.0

Chunk id: 2187
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#185-les-magic-commands
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.5 Les *magic commands*
Content:
produit par les chercheurs Zichen Wang et Avi Ma'ayan qui reproduit l'analyse complète de données obtenues par séquençage haut débit. Ces analyses ont donné lieu à la publication de l'article

Chunk id: 297
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
if len(sys.argv) != 2:
sys.exit("ERREUR : il faut exactement un argument.")

Chunk id: 1415
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1916-passage-darguments-a-linstanciation
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.6 Passage d'argument(s) à l'instanciation
Content:
```python
citron1: {'masse': 100, 'couleur': 'jaune'}
citron2: {'masse': 150, 'couleur': 'blanc'}
```

Chunk id: 148
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#code
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.7 Exercices
Subsection Name: 12.7.1 Prédire la sortie
Subsubsection Name: 12.7.1.4 Code 4
Content:
#### 12.7.1.4 Code 4  
```python
def hello(prenom):
x = 42
print(f"Bonjour {prenom}")
print(x)


#Programme principal.
x = 10
hello("Patrick")
print(x)
```

Chunk id: 3485
Number of Tokens: 69
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
```text
NC_001133.gbk
La séquence contient XXX bases
10 premières bases : YYYYYYYYYY
10 dernières bases : ZZZZZZZZZZ
```  
où `XXX` est un entier et `YYYYYYYYYY` et `ZZZZZZZZZZ` sont des bases.

Chunk id: 486
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
```python
>>> ani2.keys()
dict_keys(['poids', 'nom', 'taille'])
>>> ani2.values()
dict_values([70, 'singe', 1.75])
```

Chunk id: 3806
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
méthode `.append()` des listes est bien plus efficace que faire grandir un *array* ligne par ligne (i.e. en ajoutant une ligne avec `np.concatenate()` à chaque tour de boucle) ; lorsqu'on ne peut pas

Chunk id: 2985
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
>>> temp_in_fahrenheit = 80
>>> convert_fahrenheit_to_celsius(temp_in_fahrenheit)
26.666666666666668
>>> temp_in_fahrenheit = 100
>>> convert_fahrenheit_to_celsius(temp_in_fahrenheit)

Chunk id: 2965
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
![Étape 8.](img/fct_step8.png){ #fig:fct_step8 width=80% }
\  
- Étape 9 : Python affiche le contenu de la variable `resultat` et l'exécution est terminée.

Chunk id: 1624
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
Commençons par le polymorphisme. Dans la vie, celui-ci évoque la capacité à prendre plusieurs apparences, qu'en est-il en programmation ?  
open-box-def

Chunk id: 4070
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
1A8F          Homo sapiens   1998-03-25     329  36408.4
1AIV         Gallus gallus   1997-04-28     686  75929.0
1AOV    Anas platyrhynchos   1996-12-11     686  75731.8

Chunk id: 2119
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#18-jupyter-et-ses-notebooks
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Content:
du texte, des images, des formules mathématiques et du code informatique exécutable. Ils sont manipulables interactivement dans un navigateur web.

Chunk id: 2835
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
# 9 Fonctions  
## 9.1 Principe et généralités

Chunk id: 2098
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1965-pour-finir-les-namedtuples
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.5 Pour finir les *namedtuples*
Content:
*namedtuples* permettent de créer un code plus lisible en remplaçant des numéros d'indice par des noms. Le fait qu'ils soient non modifiables peut aussi avoir un avantage par rapport à l'intégrité

Chunk id: 3809
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
à fait classique de faire grandir une liste au fur et à mesure de la lecture du fichier puis de la convertir à la fin en *array*. De manière générale, utilisez `np.concatenate()` seulement pour

Chunk id: 3907
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
Ligne 5. La fonction `scatter()` permet de représenter des points sous forme de nuage de points. Les deux premiers arguments correspondent aux valeurs en abscisse et en ordonnée des points, fournis

Chunk id: 1459
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
Ligne 11. On crée l'instance `citron1` en lui passant l'argument `"jaune pâle"`. La variable d'instance `couleur` prendra ainsi cette valeur au lieu de celle par défaut (`"jaune"`). À noter,

Chunk id: 54
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#122-fonctions-recursives
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.2 Fonctions récursives
Content:
- 1)` soit 6), soit la valeur de $4!$. Les appels successifs vont donc se « dépiler » et nous reviendrons dans le programme principal.

Chunk id: 4679
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
avec la méthode `pack()`, il se peut que le titre ne soit pas visible lors du lancement de l'application. Toutefois, si on « étire » la fenêtre à la souris, le titre le deviendra. On pourra noter que

Chunk id: 1967
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1961-lacces-aux-attributs
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.1 L'accès aux attributs
Content:
### 19.6.1 L'accès aux attributs

Chunk id: 4332
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#321-definitions
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.1 Définitions
Content:
en « belles colonnes » comme par exemple les fichiers PDB (pour en savoir plus sur ce format, reportez-vous à l'annexe A *Quelques formats de données rencontrés en biologie*).

Chunk id: 4394
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
```python
>>> print(f"{perc_GC:7.3f}")
47.804
>>> print(f"{perc_GC:10.3f}")
47.804
```

Chunk id: 4002
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#selection-de-lignes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.4 Sélection
Subsubsection Name: 17.4.4.2 Sélection de lignes
Content:
#### 17.4.4.2 Sélection de lignes  
Pour sélectionner une ligne, il faut utiliser l'instruction `.loc()`
et l'étiquette de la ligne :  
```python
>>> df.loc["singe"]
Paris     20
Lyon      21

Chunk id: 3125
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#49-minimum-maximum-et-somme-dune-liste
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.9 Minimum, maximum et somme d'une liste
Content:
```python
>>> liste = list(range(10))
>>> liste
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> sum(liste)
45
>>> min(liste)
0
>>> max(liste)
9
```

Chunk id: 2038
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
def affiche_coucou(self):
"""Méthode inutile qui affiche coucou."""
print("Coucou !")
```  
Si on fait `help(Citron)` dans l'interpréteur, on obtient :  
```python

Chunk id: 1457
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
`citron1.affiche_message()` contient donc en filigrane un argument, à savoir, la référence vers l'instance `citron1` que l'on appelle `self` au sein de la méthode.

Chunk id: 972
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1636-la-methode-sub
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.3 Le module *re*
Subsection Name: 16.3.6 La méthode `.sub()`
Content:
Enfin, sachez que la réutilisation d'un groupe précédemment capturé est aussi utilisable lors d'une utilisation classique de *regex*. Par exemple :  
```python

Chunk id: 3833
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1721-manipulation-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.1 Manipulation de données
Content:
trouverez de nombreux exemples d'utilisation de *Biopython* pour manipuler
des données aux formats FASTA, GenBank et PDB.

Chunk id: 4415
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#325-expressions-dans-les-f-strings
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.5 Expressions dans les *f-strings*
Content:
>>> print(f"Le type de {entier} est {type(entier)}")
Le type de 2 est <class 'int'>
```  
Nous aurons l'occasion de revenir sur cette fonctionnalité au fur et à mesure de ce cours.

Chunk id: 4081
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
```python
>>> df.info()
<class 'pandas.core.frame.DataFrame'>
Index: 41 entries, 1A8E to 6CTC
Data columns (total 4 columns):
#Column        Non-Null Count  Dtype

Chunk id: 3724
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
>>> a.T
array([[1, 4, 7],
[2, 5, 8],
[3, 6, 9]])
```  
La fonction `dot()` permet de [multiplier deux matrices](https://fr.wikipedia.org/wiki/Produit_matriciel#Produit_matriciel_ordinaire).

Chunk id: 4738
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Lignes 12 à 14. On crée un *widget canvas* en instanciant la classe `tk.Canvas`. On place ensuite le *canvas* dans la fenêtre avec la méthode `.pack()` en lui précisant où le placer avec la variable

Chunk id: 4120
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
`Source` puis la méthode `.mean()` calcule la moyenne pour chaque groupe.  
Si on souhaite obtenir deux statistiques (par exemple la valeur minimale et maximale)

Chunk id: 2215
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#15-bonnes-pratiques-en-programmation-python
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Content:
propositions concrètes pour améliorer le code, ajouter de nouvelles fonctionnalités, mais aussi des recommandations sur la manière d'utiliser Python, bien écrire du code, etc.

Chunk id: 1735
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
deux mères `Misc` puis `Wm`, et enfin une dernière classe nommée `builtins.object` dont nous allons voir la signification maintenant.

Chunk id: 1117
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#29-note-sur-le-vocabulaire-et-la-syntaxe
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.9 Note sur le vocabulaire et la syntaxe
Content:
## 2.9 Note sur le vocabulaire et la syntaxe

Chunk id: 2614
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-1-peu-optimale-mais-assez-intuitive
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.1 Méthode 1 (peu optimale mais assez intuitive)
Content:
Pour chaque nombre de 2 à 100, calculez le reste de la division entière (avec l'opérateur modulo `%`) depuis 1 jusqu'à lui-même. Si c'est un nombre premier, il aura exactement deux nombres pour

Chunk id: 499
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1324-methodes-keys-values-et-items
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.4 Méthodes `.keys()`, `.values()` et `.items()`
Content:
et comparaisons*. On itère à la fois sur `key` et sur `val`. On verra plus bas que cela peut-être utile pour construire des dictionnaires de compréhension.

Chunk id: 4557
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
Vous souvenez-vous ce qui se passait avec une liste passée en argument à une fonction (voir le chapitre 12) ? C'était la même chose, une référence était envoyée plutôt qu'une copie. [*Python

Chunk id: 1419
Number of Tokens: 19
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
def affiche_attributs(self):
print(self)
print(self.couleur)
print(var)

Chunk id: 1834
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
en fait une classe. On peut ainsi créer de nouvelles classes héritant des classes *Tkinter* afin de personnaliser chaque objet graphique.

Chunk id: 4740
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Lignes 15 à 24. On crée des *widgets* boutons et on les place dans la fenêtre. À noter que chacun de ces *widgets* appelle une méthode différente, dont deux que nous avons créées dans la classe

Chunk id: 4327
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```python
>>> ani1 = "chat"
>>> ani2 = "souris"
>>> print(ani1, ani2)
chat souris
>>> print(ani1 + ani2)
chatsouris
>>> print(ani1, ani2, sep="")
chatsouris
```

Chunk id: 3918
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
plt.ylabel("Concentration (mg/L)")
plt.title("Concentration de produit en fonction du temps")
x = np.linspace(min(temps), max(temps), 50)
y = 2 + 3 * x
plt.plot(x, y, color='green', ls="--")

Chunk id: 1497
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
open-box-warn

Chunk id: 2060
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1964-autres-bonnes-pratiques
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.4 Autres bonnes pratiques
Content:
- Une classe ne se conçoit pas sans méthode. Si on a besoin d'une structure de données séquentielles ou si on veut donner des noms aux variables (plutôt qu'un indice), utilisez plutôt les

Chunk id: 4453
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
- La méthode `.format()` agit sur la chaîne de caractères à laquelle elle est attachée par le point.

Chunk id: 4265
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#requete-avec-un-mot-cle
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.5 Années de publication des articles relatifs à la barstar
Subsubsection Name: 17.6.5.1 Requête avec un mot-clé
Content:
sur *Search*. Attention, l'association n'est pas toujours évidente. Cherchez éventuellement dans le résumé de l'article si besoin.

Chunk id: 5008
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2085-polygone-de-sierpinski-exercice
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.5 Polygone de Sierpinski (exercice +++)
Content:
widget = event.widget
#Récupération du choix sélectionné dans la listbox (tuple).
#Par exemple renvoie `(5,)` si on a cliqué sur `5`.
selection = widget.curselection()

Chunk id: 3637
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1714-indices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.4 Indices
Content:
d'indice `i` et à la colonne d'indice `j`. Notez que *NumPy* suit la convention mathématiques des [matrices](https://fr.wikipedia.org/wiki/Matrice_(math%C3%A9matiques)#D%C3%A9finitions), à savoir,

Chunk id: 769
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
in obj` est utilisable pour créer un dictionnaire de compréhension. Si vous souhaitez aller plus loin, vous pouvez consulter cet

Chunk id: 476
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1322-objets-utilisables-comme-cle
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.2 Objets utilisables comme clé
Content:
langages comme Perl. Convertir chaque clé en sa valeur de hachage permet un accès très rapide à chacun des éléments du dictionnaire ainsi que des comparaisons de clés entre dictionnaires extrêmement

Chunk id: 3032
Number of Tokens: 88
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#987-distribution-et-statistiques
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.7 Distribution et statistiques
Content:
```text
Liste  1 : min = 0.17 ; max = 99.72 ; moyenne = 57.38
Liste  2 : min = 1.25 ; max = 99.99 ; moyenne = 47.41
[...]
Liste 19 : min = 1.05 ; max = 99.36 ; moyenne = 49.43

Chunk id: 2450
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Lorsque votre programme « plante », **lisez** le message d'erreur. Python tente de vous expliquer ce qui ne va pas. Le numéro de la ligne qui pose problème est aussi indiqué.

Chunk id: 1732
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
|
|  Method resolution order:
|      Tk
|      Misc
|      Wm
|      builtins.object
[...]
```

Chunk id: 3547
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
open-box-rem  
Un objet *array* ne contient que des données homogènes, c'est-à-dire d'un type identique.

Chunk id: 326
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#882-cosinus
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.8 Exercices
Subsection Name: 8.8.2 Cosinus
Content:
### 8.8.2 Cosinus  
Calculez le cosinus de $\pi/2$ en utilisant le module *math* avec la fonction `cos()` et la constante `pi`.  
Documentation de la fonction `math.cos()` :

Chunk id: 1892
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Très bien. Donc en Python, on n'utilise pas comme dans les autres langages orientés objet les *getters* et les *setters*  ? Mais, tout de même, cela avait l'air une bonne idée de pouvoir contrôler

Chunk id: 1385
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
celle-ci est immédiatement exécutée au moment de l'instanciation. Cette méthode prend un argument nommé `self` : cet argument est **obligatoire**. Il s'agit en fait d'une référence vers l'instance en

Chunk id: 3439
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
|  Tryptophane  |       Trp      |       W       |
|    Tyrosine   |       Tyr      |       Y       |
|     Valine    |       Val      |       V       |

Chunk id: 3483
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
d'une chaîne de caractères, lit la séquence dans le fichier GenBank et la renvoie sous la forme d'une chaîne de caractères.

Chunk id: 3186
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#13-notations-utilisees
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.3 Notations utilisées
Content:
```  
Pour ces derniers, le numéro à gauche indique le numéro de la ligne et sera utilisé
pour faire référence à une instruction particulière. Ce numéro n'est bien sûr là qu'à titre indicatif.

Chunk id: 4499
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
Dans votre carrière « pythonesque » il se peut que vous soyez amené à vouloir développer une application graphique, on parle encore de *graphical user interface* ou GUI. Jusqu'à maintenant, vous avez

Chunk id: 4832
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2071-dautres-widgets
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.1 D'autres *widgets*
Content:
- *Text* : crée une zone de texte dans lequel l'utilisateur peut saisir un texte sur plusieurs lignes (comme dans la figure @fig:exemple_GUI).

Chunk id: 3711
Number of Tokens: 96
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1717-concatenation-darrays
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.7 Concaténation d'*arrays*
Content:
[ 2,  3],
[ 4,  5],
[ 0,  5],
[10, 15],
[20, 25]])
>>> np.concatenate((a1, a2), axis=1)
array([[ 0,  1,  0,  5],
[ 2,  3, 10, 15],
[ 4,  5, 20, 25]])
```

Chunk id: 2030
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1963-classes-et-docstrings
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.3 Classes et *docstrings*
Content:
### 19.6.3 Classes et *docstrings*

Chunk id: 1765
Number of Tokens: 16
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
### 19.4.3 Un exemple concret d'héritage

Chunk id: 3450
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1086-palindrome
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.6 Palindrome
Content:
`xxx n'est pas un palindrome` sinon. Pensez à vous débarrasser au préalable des majuscules et des espaces.

Chunk id: 3804
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17111-quelques-conseils
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.11 Quelques conseils
Content:
Utilisez les listes :  
- lorsque vous avez besoin d'un container pour accumuler des valeurs (fussent-elles des sous-listes), surtout lorsqu'elles ne sont pas homogènes (i.e. du même type) ;

Chunk id: 1033
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
étant un langage dit de *haut niveau*, la simple instruction `x = 2` a suffi à réaliser les 3 étapes en une fois !

Chunk id: 2528
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#65-instructions-break-et-continue
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.5 Instructions `break` et `continue`
Content:
L'instruction `break` stoppe la boucle.  
```python
>>> for i in range(5):
...     if i > 2:
...         break
...     print(i)
...
0
1
2
```

Chunk id: 2512
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#64-tests-multiples
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.4 Tests multiples
Content:
booléens. Les deux opérateurs les plus couramment utilisés sont le **OU** et le **ET**. Voici un petit rappel sur le fonctionnement de l'opérateur **OU** :

Chunk id: 4121
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1754-statistiques-par-groupe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.4 Statistiques par groupe
Content:
Si on souhaite obtenir deux statistiques (par exemple la valeur minimale et maximale)
en une seule fois, il convient alors d'utiliser la méthode `.pivot_table()`

Chunk id: 4955
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2073-bibliographie-pour-aller-plus-loin
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.3 Bibliographie pour aller plus loin
Content:
1. En anglais :
- La [Documentation officielle](https://wiki.python.org/moin/TkInter) de Python.

Chunk id: 1239
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1155-selection-des-carbones-alpha-dans-un-fichier-pdb
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.5 Sélection des carbones alpha dans un fichier pdb
Content:
```python
>>> with open("1bta.pdb", "r") as f_pdb:
...     CA_lines = [line for line in f_pdb if line.startswith("ATOM")
and line[12:16].strip() == "CA"]
...
>>> print(len(CA_lines))
89
```

Chunk id: 2926
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> fct(z=0)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: fct() missing 2 required positional arguments: 'a' and 'b'
```  
open-box-adv

Chunk id: 3796
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
array([[1., 1., 1., 0.],
[1., 1., 1., 1.],
[1., 0., 0., 1.],
[1., 0., 0., 0.]])
```  
En deux lignes de code cela est fait alors qu'il aurait fallu faire des boucles avec les listes classiques !

Chunk id: 2495
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
```python
>>> import random
>>> base = random.choice(["a", "t", "c", "g"])
>>> if base == "a":
...     print("choix d'une adénine")
... elif base == "t":
...     print("choix d'une thymine")

Chunk id: 1327
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
```python
citron1 = Citron()
citron1.couleur = "jaune"
>>> citron1.__dict__
{'couleur': 'jaune'}
>>> citron2 = Citron()
>>> citron2.__dict__
{}
```

Chunk id: 775
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#136-dictionnaires-et-sets-de-comprehension
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.6 Dictionnaires et *sets* de compréhension
Content:
>>> {ani for ani, _ in animaux}
{'rhinocéros', 'gazelle', 'singe', 'girafe'}
```

Chunk id: 3116
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#47-les-fonctions-range-et-list
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.7 Les fonctions `range()` et `list()`
Content:
```python
>>> list(range(10,0,-1))
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
```

Chunk id: 1551
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1921-rappel-sur-la-regle-lgi
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.1 Rappel sur la règle LGI
Content:
de noms *local* à cette fonction. S'il ne trouve pas de nom il va ensuite chercher l'espace de noms du programme principal (ou celui du module), donc des variables *globales* s'y trouvant. S'il ne

Chunk id: 4213
Number of Tokens: 75
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
x = ligne[30:38]
y = ligne[38:46]
z = ligne[46:54]
f_CA.write(f"{x} {y} {z} ")
```  
Ligne 1. On ouvre deux fichiers simultanément. Ici, le fichier `1bta.pdb` est ouvert en lecture (`r`)

Chunk id: 133
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1262-modification-dune-liste-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.2 Modification d'une liste dans une fonction
Content:
Cela reste toutefois moins intuitif car il n'est pas évident de comprendre que la liste est modifiée dans la fonction en lisant la ligne 7. Dans un tel cas, il serait essentiel d'indiquer dans la

Chunk id: 3398
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
title', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans',
'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition',
'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',

Chunk id: 2702
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
*list*. Si vous vous souvenez bien, il s'agit d'une fonction de *casting*, qui convertit un type en un autre (voir chapitre 2 *Variables*). Il n'y aucun intérêt à utiliser dans une boucle la

Chunk id: 1054
Number of Tokens: 26
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
doubles ou simples) afin d'indiquer à Python le début et la fin de la chaîne de caractères.

Chunk id: 3342
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
Un [espace blanc](https://en.wikipedia.org/wiki/Whitespace_character) (*whitespace* en anglais) correspond aux caractères qui sont invisibles à l'œil, mais qui occupent de l'espace dans un texte. Les

Chunk id: 3395
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'for
mat_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'i

Chunk id: 4562
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
*callback* si on le souhaite. Notez enfin que dans `une_fct()` la fonction *callback* reçue en argument peut avoir un nom différent (comme pour tout type de variable).

Chunk id: 709
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1342-utilite
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.2 Utilité
Content:
```python
>>> list(set([7, 9, 6, 6, 7, 3, 8, 5, 6, 7]))
[3, 5, 6, 7, 8, 9]
```

Chunk id: 3602
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1712-array-et-dimensions
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.2 *Array* et dimensions
Content:
close-box-warn  
Il existe aussi la fonction `np.resize()` qui, dans le cas d'un nouvel *array* plus grand que l'*array* initial, va répéter l'*array* initial afin de remplir les cases manquantes :

Chunk id: 852
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Une expression régulière est une suite de caractères qui a pour but de décrire un fragment de texte. Cette suite de caractères est encore appelée **motif** (en anglais *pattern*), motif qui est

Chunk id: 4029
Number of Tokens: 80
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
Lyon  Paris
chat      10      3
singe     23     15
souris    17     20
```  
et  
```python
>>> data2 = {"Nantes": [3, 9, 14], "Strasbourg": [5, 10, 8]}
>>> df2 = pd.DataFrame.from_dict(data2)

Chunk id: 1372
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
Pour les débutants, vous pouvez sauter cette remarque. Certains auteurs préfèrent nommer `.__init__()` « instantiateur » ou « initialisateur », pour signifier qu'il existe une autre méthode appelée

Chunk id: 228
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#84-quelques-modules-courants
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.4 Quelques modules courants
Content:
en Python. En voici une liste non exhaustive. Pour la liste complète, reportez-vous à [la page des modules](https://docs.python.org/fr/3/py-modindex.html) sur le site de Python :

Chunk id: 1228
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1152-jeu-sur-la-casse-des-mots-dune-phrase
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.2 Jeu sur la casse des mots d'une phrase
Content:
### 11.5.2 Jeu sur la casse des mots d'une phrase  
```python
>>> message = "C'est sympa la BioInfo"
>>> msg_lst = message.split()
>>> print([[m.upper(), len(m)] for m in msg_lst])

Chunk id: 3908
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1731-representation-sous-forme-de-points
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.1 Représentation sous forme de points
Content:
deux premiers arguments correspondent aux valeurs en abscisse et en ordonnée des points, fournis sous forme de listes. Des arguments facultatifs sont ensuite précisés comme le symbole (`marker`) et

Chunk id: 1293
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
Dans ce chapitre nous allons vous présenter une introduction à la POO avec Python. Nous vous donnerons tous les éléments pour démarrer la construction de vos premières classes.

Chunk id: 2674
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
? Cela est signalé uniquement par l'**indentation**, c'est-à-dire le décalage vers la droite de la (ou des) ligne(s) du bloc d'instructions.

Chunk id: 4208
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#extraction-des-coordonnees-atomiques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.2 Distance entre deux atomes carbones alpha consécutifs de la barstar
Subsubsection Name: 17.6.2.1 Extraction des coordonnées atomiques
Content:
Téléchargez le fichier `1bta.pdb` qui correspond à la [structure de la barstar](http://www.rcsb.org/pdb/explore.do?structureId=1BTA) sur le site de la PDB ([lien direct vers le

Chunk id: 4584
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
`help(racine)`, vous verrez ainsi les très nombreuses méthodes et attributs associés à un tel objet Tk.

Chunk id: 4494
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#20-fenetres-graphiques-et-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Content:
# 20 Fenêtres graphiques et *Tkinter*  
open-box-adv

Chunk id: 2992
Number of Tokens: 34
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#981-carre-et-factorielle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.1 Carré et factorielle
Content:
```python
def calc_factorielle(n):
fact = 1
for i in range(2, n+1):
fact = fact * i
return fact

Chunk id: 1131
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#210-minimum-et-maximum
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.10 Minimum et maximum
Content:
## 2.10 Minimum et maximum  
Python propose les fonctions `min()` et `max()` qui renvoient respectivement le minimum et le maximum de plusieurs entiers et / ou *floats* :  
```python
>>> min(1, -2, 4)

Chunk id: 1206
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#114-copie-de-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.4 Copie de listes
Content:
objets. *Python Tutor* l'illustre avec des flèches qui partent des variables `x` et `y` et qui pointent vers la même liste. Donc, si on modifie la liste `x`, la liste `y` est modifiée de la même

Chunk id: 385
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
- Un objet est dit **non modifiable** lorsqu'on ne peut pas le modifier, ou lorsqu'on ne peut pas en modifier un de ses éléments si c'est un container. On parle aussi d'[objet

Chunk id: 1957
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
accesseur ou mutateur. La dernière commande qui affiche le contenu de `citron.__dict__` montre que la vraie valeur de l'attribut est stockée dans la variable d'instance `._masse` (`instance._masse`

Chunk id: 2619
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-2-plus-optimale-et-plus-rapide-mais-un-peu-plus-compliquee
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.2 Méthode 2 (plus optimale et plus rapide, mais un peu plus compliquée)
Content:
sont le produit de deux nombres premiers. Pratiquement, cela consiste à vérifier que le reste de la division entière (opérateur modulo `%`) entre le nombre considéré et chaque nombre premier

Chunk id: 4871
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#autres-methodes-de-placement-des-widgets-dans-la-fenetre-tk
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.2 Autres méthodes de placement des *widgets* dans la fenêtre Tk
Content:
variables `tk.BOTTOM`, `tk.LEFT`, `tk.TOP` et `tk.RIGHT` on place facilement les *widgets* les uns par rapport aux autres. Toutefois, la méthode `.pack()` peut parfois présenter des limites, il

Chunk id: 866
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
`^`  
:   Début de chaîne de caractères ou de ligne.  
Exemple : la *regex* `^ATG` est retrouvée dans la chaîne de caractères `ATGCGT` mais pas dans la chaîne `CCATGTT`.  
`$`

Chunk id: 3984
Number of Tokens: 73
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
...         "b": np.arange(11, 40, 10),
...         "c": np.arange(12, 40, 10),
...         "d": np.arange(13, 40, 10)}
>>> df = pd.DataFrame(data)
>>> df.index = ["chat", "singe", "souris"]
>>> df

Chunk id: 4823
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
l'on peut capturer et lier à des méthodes / fonctions *callback*. Vous trouverez une liste complète [ici](http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm).

Chunk id: 1766
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Nous allons maintenant prendre un exemple un peu plus conséquent pour illustrer la puissance de l'héritage en programmation. D'abord quelques mots à propos de la conception. Imaginons que nous

Chunk id: 2875
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#92-definition
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.2 Définition
Content:
à l'écran. Elle ne prend aucun argument et ne renvoie rien. Par conséquent, cela n'a pas de sens de vouloir récupérer dans une variable le résultat renvoyé par une telle fonction. Si on essaie tout

Chunk id: 4802
Number of Tokens: 1
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
...

Chunk id: 1050
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#22-les-types-de-variables
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.2 Les types de variables
Content:
est tout à fait possible de stocker des *floats*, des chaînes de caractères (*string* ou *str*) ou de nombreux autres types de variable que nous verrons par la suite :

Chunk id: 2417
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Description détaillée ligne 1
Description détaillée ligne 2
Description détaillée ligne 3
"""
[...]
return un_truc

Chunk id: 2494
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#62-tests-a-plusieurs-cas
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.2 Tests à plusieurs cas
Content:
au hasard dans une liste. L'instruction `import random` sera vue plus tard dans le chapitre 8 *Modules*, admettez pour le moment qu'elle est nécessaire.

Chunk id: 1096
Number of Tokens: 62
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#253-operations-illicites
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.3 Opérations illicites
Content:
### 2.5.3 Opérations illicites  
Attention à ne pas faire d'opération illicite car vous obtiendriez un message d'erreur :  
```python
>>> "toto" * 1.3
Traceback (most recent call last):

Chunk id: 1952
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
maximum recursion depth exceeded`. Cela serait vrai aussi si vous aviez une fonction destructeur, il faudrait utiliser `self._masse`).

Chunk id: 4493
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#365-ecriture-formatee
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.6 Exercices
Subsection Name: 3.6.5 Écriture formatée 2
Content:
```text
Le pourcentage de GC est 48     %
Le pourcentage de GC est 47.8   %
Le pourcentage de GC est 47.80  %
Le pourcentage de GC est 47.804 %
```

Chunk id: 1234
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1154-formatage-fasta-dune-sequence-avec-la-ligne-de-commentaire
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.5 Liste de compréhension
Subsection Name: 11.5.4 Formatage FASTA d'une séquence (avec la ligne de commentaire)
Content:
### 11.5.4 Formatage FASTA d'une séquence (avec la ligne de commentaire)  
Exemple d'une séquence constituée de 150 alanines :  
```python
>>> com = "Séquence de 150 alanines"
>>> seq = "A" * 150

Chunk id: 905
Number of Tokens: 20
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#162-quelques-ressources-en-ligne
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.2 Quelques ressources en ligne
Content:
- [RegexOne](https://regexone.com/) : tutoriel en ligne très bien fait.

Chunk id: 2305
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1517-commentaires
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.7 Commentaires
Content:
Ainsi `ma_liste` deviendra `my_list` et `ma_fonction` deviendra `my_function` (par exemple).

Chunk id: 2736
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
>>> x > 10
False
>>> x < 10
True
```  
Python renvoie la valeur `True` si la comparaison est vraie et `False` si elle est fausse. `True` et `False` sont des booléens (un nouveau type de variable).

Chunk id: 2252
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
```python
>>> ma_liste = [1, 3, 5, 7, 9, 11]
>>> for i in range(len(ma_liste)):
...     print(ma_liste[i])
```

Chunk id: 2105
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1971-classe-rectangle
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.1 Classe `Rectangle`
Content:
- affiche les attributs d'instance `largeur`, `longueur` et `couleur` ;
- calcule et affiche la surface de `rectangle` ;
- affiche une ligne vide ;
- change le rectangle en carré de 30 m de côté ;

Chunk id: 2247
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1513-regles-de-nommage
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.3 Règles de nommage
Content:
```python
MaClasse
MyException
```  
open-box-rem  
Le style recommandé pour nommer les variables et les fonctions en Python est

Chunk id: 4508
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#201-utilite-dune-gui
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.1 Utilité d'une GUI
Content:
cliquant sur des boutons, ou des « listes de choix ». Une telle GUI pourrait ressembler à la figure @fig:exemple_GUI.

Chunk id: 433
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
### 13.1.3 Containers de type *range*

Chunk id: 4656
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
parenthèses indique que notre classe `Application` hérite de la classe `tk.Tk`. Par ce mécanisme, nous héritons ainsi de toutes les méthodes et attributs de cette classe mère, mais nous pouvons en

Chunk id: 4319
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#31-la-fonction-print
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.1 La fonction `print()`
Content:
```python
>>> var = 3
>>> print(var)
3
```  
Il est également possible d'afficher le contenu de plusieurs variables (quel que soit leur type) en les séparant par des virgules :  
```python
>>> x = 32

Chunk id: 4994
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2084-triangle-de-sierpinski
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.4 Triangle de Sierpinski
Content:
![Triangle de Sierpinski.](img/tk_Sierpinski.png){ #fig:tk_Sierpinski width=50% }

Chunk id: 1284
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#19-avoir-la-classe-avec-les-objets
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Content:
l'utilisation de variables globales en créant ce qu'on appelle un *espace de noms* propre à chaque objet permettant d'y *encapsuler* des attributs et des méthodes. De plus, la POO amène de nouveaux

Chunk id: 2686
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
```python
>>> for animal in animaux:
... print(animal)
File "<stdin>", line 2
print(animal)
^
IndentationError: expected an indented block
```

Chunk id: 2005
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
if __name__ == "__main__":
citron1 = Citron()
print(citron1.get_mass())
print(citron1.__mass)
```  
Ce code va donner la sortie suivante :  
```python
100
Traceback (most recent call last):

Chunk id: 821
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1385-atomes-carbone-alpha-dun-fichier-pdb
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.5 Atomes carbone alpha d'un fichier PDB
Content:
Téléchargez le fichier [`1bta.pdb`](https://files.rcsb.org/download/1BTA.pdb) qui correspond à la [structure tridimensionnelle de la protéine

Chunk id: 1509
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
valeur `sucrée`) qui est bien distinct de l'attribut de classe auquel on accédait avant par le même nom ! Tout ceci est dû à la manière dont Python gère les **espaces de noms** (voir rubrique

Chunk id: 438
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1313-containers-de-type-range
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.3 Containers de type *range*
Content:
La tentative de modification d'un élément en ligne 12 conduit à la même erreur que lorsqu'on essaie de modifier un caractère d'une chaîne de caractères. Comme pour la plupart des objets Python non

Chunk id: 1848
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
tout un jeu de méthodes accédant ou modifiant les attributs. Ainsi, le concepteur de la classe a la garantie que celle-ci est utilisée correctement du « côté client ».

Chunk id: 1794
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
Lignes 31 à 36. On définit la méthode `.__str__()` qui va modifier le comportement de notre classe avec `print()`. Celle-ci fait également appel à une méthode hértitée de la classe mère nommée

Chunk id: 2902
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
```python
>>> def fois(x, y):
...     return x*y
...
>>> fois(2, 3)
6
>>> fois(2)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>

Chunk id: 2240
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1512-importation-des-modules
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.2 Importation des modules
Content:
par ordre alphabétique), c'est-à-dire les modules de base de Python, puis les modules externes (ceux que vous avez installés en plus).

Chunk id: 2858
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
**programme principal** (*main* en anglais) pour désigner l'endroit depuis lequel on appelle une fonction (on verra plus tard que l'on peut en fait appeler une fonction de n'importe où). Le programme

Chunk id: 3004
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#983-pyramide
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.8 Exercices
Subsection Name: 9.8.3 Pyramide
Content:
### 9.8.3 Pyramide  
Reprenez l'exercice du chapitre 5 *Boucles et comparaisons* qui dessine une pyramide.

Chunk id: 1347
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1914-les-methodes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.4 Les méthodes
Content:
Une fonction définie au sein d'une classe est appelée **méthode**. Pour exécuter une méthode à l'extérieur de la classe, la syntaxe générale est `instance.méthode()`. En général, on distingue

Chunk id: 4677
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 16. On instancie notre application.

Chunk id: 4544
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#203-notion-de-fonction-callback
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.3 Notion de fonction *callback*
Content:
obj.methode(arg)
```  
où les arguments étaient des objets « classiques » (par exemple une chaîne de caractères, un entier, un *float*, etc.).

Chunk id: 311
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
Par contre, le script ne vérifie pas si le fichier existe bien :  
```bash
$ python compte_lignes.py zoo3.txt
Traceback (most recent call last):
File "compte_lignes.py", line 8, in <module>

Chunk id: 116
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#1261-evitez-les-variables-globales
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.6 Recommandations
Subsection Name: 12.6.1 Évitez les variables globales
Content:
ne serait-ce que parce que vos fonctions ne seront pas réutilisables dans un autre contexte si elles utilisent des variables globales ! Ensuite, arriverez-vous à vous relire dans six mois ? Quelqu'un

Chunk id: 25
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#121-appel-dune-fonction-dans-une-fonction
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.1 Appel d'une fonction dans une fonction
Content:
de celle-ci sera terminée. Dans notre exemple, les variables *locales* de `calc_vals()` ne seront détruites que lorsque la boucle sera terminée et que la liste `liste_vals` sera retournée au

Chunk id: 4727
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
command=self.dessine_lignes)
self.bouton_lignes.pack()
self.bouton_quitter = tk.Button(self, text="Quitter",
command=self.quit)
self.bouton_quitter.pack(side=tk.BOTTOM)

Chunk id: 2566
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#675-notes-et-mention-dun-etudiant
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.5 Notes et mention d'un étudiant
Content:
(utilisez la fonction `max()`), la note minimum (utilisez la fonction `min()`) et qui calcule la moyenne.

Chunk id: 1836
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
L'héritage et le polymorphisme donnent toute la puissance à la POO. Toutefois, concevoir ses classes sur un projet, surtout au début de celui-ci, n'est pas chose aisée. Nous vous conseillons de lire

Chunk id: 2697
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#512-fonction-range
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.2 Fonction `range()`
Content:
Comment cela est-ce possible ? Et bien `range()` est une fonction qui a été spécialement conçue pour [cela](https://docs.python.org/fr/3/library/stdtypes.html#typesseq-range), c'est-à-dire que l'on

Chunk id: 3426
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1084-conversion-des-acides-amines-du-code-a-trois-lettres-au-code-a-une-lettre
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.4 Conversion des acides aminés du code à trois lettres au code à une lettre
Content:
Créez une fonction `convert_3_lettres_1_lettre()` qui prend en argument une chaîne de caractères avec des acides aminés en code à trois lettres et renvoie une chaîne de caractères avec les acides

Chunk id: 3844
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Ligne 4. Le résultat est lu et stocké dans la variable `res_esearch`.  
Sans être un vrai dictionnaire, la variable `res_esearch` en a cependant plusieurs propriétés.
Voici ses clés :  
```python

Chunk id: 502
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1325-existence-dune-cle-ou-dune-valeur
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.5 Existence d'une clé ou d'une valeur
Content:
...
La clé 'poids' existe pour ani2
>>> if "age" in ani2:
...     print("La clé 'age' existe pour ani2")
...
```

Chunk id: 3681
Number of Tokens: 71
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
L'opération inverse consistant à sauver un *array* dans un fichier se fait avec la fonction `np.savetxt()` :  
```python
>>> a = np.reshape(range(1, 10), (3, 3))
>>> a
array([[1, 2, 3],
[4, 5, 6],

Chunk id: 300
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```text
$ python test.py 42
Argument vaut : 42
```  
Notez qu'ici on vérifie que le script possède deux arguments car le nom du script lui-même compte pour un argument (le tout premier).

Chunk id: 396
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
raisons d'optimisation, Python crée parfois le même identifiant pour deux objets non modifiables différents qui ont la même valeur. L'identifiant peut être assimilé à l'adresse mémoire de l'objet qui

Chunk id: 1108
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#27-conversion-de-types
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.7 Conversion de types
Content:
à une chaîne de caractères ou vice-versa. En Python, rien de plus simple avec les fonctions `int()`, `float()` et `str()`. Pour vous en convaincre, regardez ces exemples :

Chunk id: 3205
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Type "help", "copyright", "credits" or "license" for more information.
>>>
```  
Les blocs  
- `PS C:\Users\pierre>` pour Windows,
- `iMac-de-pierre:Downloads$` pour Mac OS X,

Chunk id: 4938
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#toujours-preciser-linstance-de-la-fenetre-principale
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.5 Toujours préciser l'instance de la fenêtre principale
Content:
d'autres *widgets* enfants). Une autre source d'information sur les *widgets* se trouvent dans les méthodes dont le nom commence par `winfo`. Par exemple, la méthode `.winfo_toplevel()` renvoie la

Chunk id: 3294
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#103-caracteres-speciaux
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.3 Caractères spéciaux
Content:
J'affiche un guillemet simple
```  
Vous pouvez aussi utiliser astucieusement des guillemets doubles ou simples pour déclarer votre chaîne de caractères :  
```python
>>> print("Un brin d'ADN")

Chunk id: 2546
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
valeur. La bonne pratique est de vérifier si un *float* est compris dans un intervalle avec une certaine précision. Si on appelle cette précision *delta*, on peut procéder ainsi :

Chunk id: 2597
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
```  
Pour le premier acide aminé, l'angle phi vaut *48.6* et l'angle psi *53.4*. Pour le deuxième, l'angle phi vaut *-124.9* et l'angle psi *156.7*, etc.

Chunk id: 995
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1643-nettoyeur-despaces
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.3 Nettoyeur d'espaces
Content:
Le fichier [`cigale_fourmi.txt`](https://python.sdv.univ-paris-diderot.fr/data-files/cigale_fourmi.txt) contient le célèbre poème de Jean de la Fontaine. Malheureusement, la personne qui l'a recopié

Chunk id: 3482
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#1089-lecture-dune-sequence-a-partir-dun-fichier-genbank-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.9 Lecture d'une séquence à partir d'un fichier GenBank (exercice +++)
Content:
Créez une fonction `lit_genbank()` qui prend comme argument le nom d'un fichier GenBank sous la forme d'une chaîne de caractères, lit la séquence dans le fichier GenBank et la renvoie sous la forme

Chunk id: 1390
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1915-le-constructeur
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.5 Le constructeur
Content:
![Fonctionnement d'un constructeur (étape 2).](img/classe_constructeur2.png){ #fig:classe_constructeur2 width=90% }

Chunk id: 2671
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
par `for`. Cela signifie que la boucle `for` attend un **bloc d'instructions**, en l’occurrence toutes les instructions que Python répétera à chaque itération de la boucle. On appelle ce bloc

Chunk id: 3935
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
sequence = "ACGATCATAGCGAGCTACGTAGAA"
bases = ["A", "C", "G", "T"]
distribution = []
for base in bases:
distribution.append(sequence.count(base))

Chunk id: 309
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
zoo2.txt contient 3 lignes.
```  
Notre script est donc capable de :  
- Vérifier si un argument lui est donné et si ce n'est pas le cas d'afficher un message d'erreur.

Chunk id: 3534
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17-quelques-modules-dinteret-en-bioinformatique
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Content:
```bash
$ conda install -y numpy pandas matplotlib scipy biopython
```  
Dans ce chapitre, nous vous montrerons quelques exemples d’utilisation de ces modules pour vous convaincre de leur pertinence.

Chunk id: 739
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1343-frozensets
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.3 *Frozensets*
Content:
voici deux articles sur les sites [programiz](https://www.programiz.com/python-programming/set) et [towardsdatascience](https://towardsdatascience.com/python-sets-and-set-theory-2ace093d1607).

Chunk id: 3385
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
```python
>>> maliste = ["A", 5, "G"]
>>> " ".join(maliste)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: sequence item 1: expected string, int found
```

Chunk id: 2568
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#675-notes-et-mention-dun-etudiant
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.5 Notes et mention d'un étudiant
Content:
la mention est « passable » si la moyenne est entre 10 inclus et 12 exclus, « assez bien » entre 12 inclus et 14 exclus et « bien » au-delà de 14.

Chunk id: 670
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1335-hachabilite-des-tuples
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.5 Hachabilité des tuples
Content:
close-box-adv

Chunk id: 3200
Number of Tokens: 65
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#15-premier-contact-avec-python
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.5 Premier contact avec Python
Content:
Type "help", "copyright", "credits" or "license" for more information.
>>>
```  
pour Mac OS X :  
```text
iMac-de-pierre:Downloads$ python
Python 3.7.1 (default, Dec 14 2018, 19:28:38)

Chunk id: 2938
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#96-variables-locales-et-variables-globales
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.6 Variables locales et variables globales
Content:
```python
#définition d'une fonction carre()
def carre(x):
y = x**2
return y

Chunk id: 2141
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#182-lancement-de-jupyter-et-creation-dun-notebook
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.2 Lancement de Jupyter et création d'un notebook
Content:
La notation `In [1]` à gauche de la cellule indique qu'il s'agit de la première cellule exécutée.

Chunk id: 1741
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
Le module *builtins* possède toutes les fonctions internes à Python. Il est donc pratique pour avoir une liste de toutes ces fonctions internes en un coup d'œil. Regardons cela avec les deux

Chunk id: 791
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#138-exercices
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Content:
## 13.8 Exercices  
*Conseil* : pour ces exercices, créez des scripts puis exécutez-les dans un *shell*.

Chunk id: 3666
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
>>> np.zeros((2,3), int)
array([[0, 0, 0],
[0, 0, 0]])
```  
Enfin, si vous voulez construire une matrice avec autre chose que des 0 ou des 1, vous avez à votre disposition la fonction `full()` :

Chunk id: 4186
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
2001-12-31    5
2003-12-31    4
1998-12-31    3
1999-12-31    3
2002-12-31    3
Name: Deposit Date, dtype: int64
```

Chunk id: 3091
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#45-tranches
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.5 Tranches
Content:
```python
>>> animaux = ["girafe", "tigre", "singe", "souris"]
>>> animaux[0:2]
['girafe', 'tigre']
>>> animaux[0:3]
['girafe', 'tigre', 'singe']
>>> animaux[0:]

Chunk id: 1254
Number of Tokens: 82
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1164-doublons
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.4 Doublons
Content:
### 11.6.4 Doublons  
Soit la liste de nombres `liste = [5, 1, 1, 2, 5, 6, 3, 4, 4, 4, 2]`.  
À partir de `liste`, créez une nouvelle liste sans les doublons, triez-la et affichez-la.

Chunk id: 1114
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#28-note-sur-la-division-de-deux-nombres-entiers
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.8 Note sur la division de deux nombres entiers
Content:
```python
>>> x = 3 / 4
>>> x
0.75
>>> type(x)
<class 'float'>
```  
open-box-rem

Chunk id: 3886
Number of Tokens: 29
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
regulator of hepcidin expression. In this paper, we review current
literature on transferrin deficiency and present our recent finding

Chunk id: 4432
Number of Tokens: 55
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#34-ancienne-methode-de-formatage-des-chaines-de-caracteres
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Content:
valide. Elle est clairement plus puissante et évite un certain nombre de désagréments par rapport à l'opérateur `%`. Vous la croiserez sans doute très fréquemment dans des programmes et ouvrages

Chunk id: 2198
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#186-jupyterlab
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.6 JupyterLab
Content:
open-box-more  
Les *notebooks* Jupyter sont particulièrement adaptés à l'analyse de données en combinaison avec les modules *matplotlib* et *pandas*.  
close-box-more

Chunk id: 4813
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
Deux choses sont à noter : i) l'attribut `self.size` est modifié dans les deux fonctions, mais le changement de diamètre de la boule ne sera effectif dans le *canvas* que lors de la prochaine

Chunk id: 1307
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1911-la-classe-minimale
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.1 La classe minimale
Content:
Ligne 1. La classe `Citron` est définie. Pas besoin de parenthèses comme avec les fonctions dans un cas simple comme celui-là (nous verrons d'autres exemples plus loin où elles sont nécessaires).

Chunk id: 3550
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
```python
>>> a = np.array([1, 2, "tigre"])
>>> a
array(['1', '2', 'tigre'], dtype='<U21')
>>> type(a)
<class 'numpy.ndarray'>
```

Chunk id: 2826
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5414-suite-de-fibonacci-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.14 Suite de Fibonacci (exercice +++)
Content:
qui porte le nom de Leonardo Fibonacci, un mathématicien italien du XIII$^{\rm e}$ siècle. Initialement, cette suite a été conçue pour décrire la croissance d'une population de lapins, mais elle peut

Chunk id: 1759
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
>>> dir(o)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__',
'__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__',

Chunk id: 2730
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
Python est capable d'effectuer toute une série de comparaisons entre le contenu de deux variables, telles que :  
| Syntaxe Python | Signification           |

Chunk id: 1001
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
qui contient le protéome humain, c'est-à-dire les séquences de l'ensemble des protéines chez l'Homme. Ce fichier est au format FASTA.

Chunk id: 1593
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
def affiche_coucou(self):
print("Coucou interne !")


def affiche_coucou():
print("Coucou externe")

Chunk id: 3338
Number of Tokens: 72
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#105-methodes-associees-aux-chaines-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.5 Méthodes associées aux chaînes de caractères
Content:
```python
>>> animaux = "girafe tigre singe souris"
>>> animaux.split()
['girafe', 'tigre', 'singe', 'souris']
>>> for animal in animaux.split():
...     print(animal)
...
girafe
tigre
singe
souris

Chunk id: 3845
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Voici ses clés :  
```python
>>> res_esearch.keys()
dict_keys(['Count', 'RetMax', 'RetStart', 'IdList', 'TranslationSet',
'TranslationStack', 'QueryTranslation'])
```

Chunk id: 2615
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#methode-1-peu-optimale-mais-assez-intuitive
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.9 Détermination des nombres premiers inférieurs à 100 (exercice +++)
Subsubsection Name: 6.7.9.1 Méthode 1 (peu optimale mais assez intuitive)
Content:
`%`) depuis 1 jusqu'à lui-même. Si c'est un nombre premier, il aura exactement deux nombres pour lesquels le reste de la division entière est égal à 0 (1 et lui-même). Si ce n'est pas un nombre

Chunk id: 1597
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
avec le même nom. À l'intérieur de la classe on utilise `self.affiche_coucou()` pour la méthode et `affiche_coucou()` pour la fonction. À l'extérieur de la classe, on utilise

Chunk id: 3949
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1733-representation-sous-forme-de-diagramme-en-batons
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.3 Représentation sous forme de diagramme en bâtons
Content:
qu'il peut faire bien plus, par exemple générer des histogrammes ou toutes sortes de graphiques utiles en analyse de données.

Chunk id: 299
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#86-module-sys-passage-darguments
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.6 Module *sys* : passage d'arguments
Content:
```text
$ python test.py
ERREUR : il faut exactement un argument.
```
et avec un argument :
```text
$ python test.py 42
Argument vaut : 42
```

Chunk id: 4980
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2083-compte-a-rebours
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.8 Exercices
Subsection Name: 20.8.3 Compte à rebours
Content:
34` signifiera un compte à rebours de 34' (le programme vérifiera qu'il s'agit d'un entier entre 1 et 240 inclus). Il y aura un bouton « Lancer » pour démarrer le compte à rebours et un boutton «

Chunk id: 4575
Number of Tokens: 18
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
### 20.4.1 Un premier exemple dans l'interpréteur

Chunk id: 4951
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#application-tkinter-avec-plusieurs-pages
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.7 Pour aller plus loin
Subsection Name: 20.7.2 Autres pistes à approfondir
Subsubsection Name: 20.7.2.7 Application *Tkinter* avec plusieurs pages
Content:
si votre projet se complexifie, il se peut que vous ayez besoin de créer plusieurs fenêtre différentes. Le [livre de Gérard Swinnen](https://inforef.be/swi/python.htm) et le site

Chunk id: 2850
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
- Une fonction effectue une tâche. Pour cela, elle reçoit éventuellement des arguments et renvoie éventuellement quelque chose. L'algorithme utilisé au sein de la fonction n'intéresse pas directement

Chunk id: 4735
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
Ligne 7. On crée un attribut de la classe `self.size` qui contiendra la taille (hauteur et largeur) du *canvas*. On rappelle que cet attribut sera visible dans l'ensemble de la classe puisqu'il est «

Chunk id: 1708
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1941-prise-en-main
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.1 Prise en main
Content:
Ce code va afficher `Vous avez le bonjour de la classe fille !`. La méthode `.bonjour()` de la classe fille a donc pris la priorité sur celle de la classe mère. Ce comportement provient de la gestion

Chunk id: 3369
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#106-extraction-de-valeurs-numeriques-dune-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.6 Extraction de valeurs numériques d'une chaîne de caractères
Content:
On considère par exemple la chaîne de caractères `val` :  
```python
>>> val = "3.4 17.2 atom"
```  
On souhaite extraire les valeurs `3.4` et `17.2` pour ensuite les additionner.

Chunk id: 1937
Number of Tokens: 53
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
à droite du signe `=` est une variable *locale* passée en argument. Par contre, `self.masse` sera l'objet de type *property*. Si vous avez bien lu la rubrique *Différence entre les attributs de

Chunk id: 3081
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
Les indices négatifs reviennent à compter à partir de la fin. Leur principal avantage est que vous pouvez accéder au dernier élément d'une liste à l'aide de l'indice `-1` sans pour autant connaître

Chunk id: 1618
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1924-gestion-des-noms-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.4 Gestion des noms entre les attributs de classe et d'instance
Content:
sur les fonctions imbriquées et la directive `nonlocal`, vous pouvez consulter la [documentation officielle](https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces).

Chunk id: 3330
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
close-box-adv

Chunk id: 3076
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
Nous reverrons en détail la méthode `.append()` dans le chapitre 11 *Plus sur les listes*.

Chunk id: 2232
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1511-indentation
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.1 Indentation
Content:
close-box-warn

Chunk id: 4040
Number of Tokens: 92
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1745-combinaison-de-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.5 Combinaison de *dataframes*
Content:
Lyon  Paris  Nantes  Strasbourg
chat    10.0    3.0     3.0         5.0
lapin    NaN    NaN    14.0         8.0
singe   23.0   15.0     NaN         NaN
souris  17.0   20.0     9.0        10.0
```

Chunk id: 2103
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1971-classe-rectangle
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.7 Exercices
Subsection Name: 19.7.1 Classe `Rectangle`
Content:
### 19.7.1 Classe `Rectangle`  
Téléchargez le script [`rectangle.py`](https://python.sdv.univ-paris-diderot.fr/data-files/rectangle.py) qui implémente la classe `Rectangle`.

Chunk id: 700
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1341-definition-et-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.4 *Sets* et *frozensets*
Subsection Name: 13.4.1 Définition et propriétés
Content:
déjà présent dans le *set*, il n'est pas ajouté puisqu'on a au plus une copie de chaque élément. La méthode `.discard()` retire du *set* l'élément passé en argument. Si l'élément n'est pas présent

Chunk id: 4180
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1756-analyse-de-donnees-temporelles
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.6 Analyse de données temporelles
Content:
Pour connaître en quelle année le plus de structures ont été déposées dans la PDB,
il faut trier les valeurs obtenus du plus grand au plus petit avec la méthode

Chunk id: 4076
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
chaque colonne :  
```python
>>> df.dtypes
Source           object
Deposit Date     object
Length            int64
MW              float64
dtype: object
```

Chunk id: 1022
Number of Tokens: 13
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#21-definition
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.1 Définition
Content:
# 2 Variables  
## 2.1 Définition

Chunk id: 1149
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#11-plus-sur-les-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Content:
que d'autres caractéristiques très puissantes telles que les tests d'appartenance ou les listes de compréhension.

Chunk id: 1139
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#2111-nombres-de-friedman
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.11 Exercices
Subsection Name: 2.11.1 Nombres de Friedman
Content:
Par exemple, 347 est un nombre de Friedman car il peut s'écrire sous la forme $4+7^3$. De même pour 127 qui peut s'écire sous la forme $2^7 - 1$.

Chunk id: 504
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1325-existence-dune-cle-ou-dune-valeur
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.2 Dictionnaires
Subsection Name: 13.2.5 Existence d'une clé ou d'une valeur
Content:
Si on souhaite tester si une valeur existe dans un dictionnaire, on peut utiliser l'opérateur `in` avec l'objet renvoyé par la méthode `.values()` :  
```python

Chunk id: 96
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
>>> y
[1, 2, 3]
```  
Dans ces deux derniers exemples, une copie de `y` est créée à la volée lorsqu'on appelle la fonction, ainsi la liste `y` du module principal reste intacte.

Chunk id: 2412
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
import module_externe

UNE_CONSTANTE = valeur
UNE_AUTRE_CONSTANTE = une_autre_valeur


class UneSuperClasse():
"""Résumé de la docstring décrivant la classe.

Chunk id: 78
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/12_plus_sur_les_fonctions/#124-portee-des-listes
File Name: 12_plus_sur_les_fonctions
Chapter Name: 12 Plus sur les fonctions
Section Name: 12.4 Portée des listes
Content:
Les exemples de cette partie représentent des absurdités en termes de programmation. Ils sont donnés à titre indicatif pour comprendre ce qui se passe, mais il ne faut surtout pas s'en inspirer !

Chunk id: 2391
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
def Multiplie_nombres(nombre1,nombre2 ):
^ (bad-whitespace)
script_quality_not_ok.py:31:10: C0326: No space allowed before bracket
print ((f"4 x 5 = {Multiplie_nombres(4, 5)}")
^ (bad-whitespace)

Chunk id: 1325
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1912-ajout-dun-attribut-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.2 Ajout d'un attribut d'instance
Content:
L'ajout d'un attribut depuis l'extérieur de la classe (on parle aussi du côté « client ») avec une syntaxe `instance.nouvel_attribut = valeur`, créera ce nouvel attribut uniquement pour cette

Chunk id: 2163
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/18_jupyter/#183-le-format-markdown
File Name: 18_jupyter
Chapter Name: 18 Jupyter et ses notebooks
Section Name: 18.3 Le format Markdown
Content:
Jupyter (figure @fig:jupyter-markdown-1) et le rendu lorsque la cellule est exécutée (figure @fig:jupyter-markdown-2).

Chunk id: 2631
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#6710-recherche-dun-nombre-par-dichotomie-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.10 Recherche d'un nombre par dichotomie (exercice +++)
Content:
- [Patrick] « Plus petit. »
- [Pierre]  « Est-ce que ton nombre est plus petit, plus grand ou égal à 78 ? »
- [Patrick] « Plus grand. »

Chunk id: 3825
Number of Tokens: 36
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#172-module-biopython
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Content:
Le [tutoriel](http://biopython.org/DIST/docs/tutorial/Tutorial.html) est particulièrement bien fait, n'hésitez pas à le consulter.

Chunk id: 4133
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1755-analyse-de-donnees-numeriques
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.5 Analyse de données numériques
Content:
Pour vérifier cela graphiquement, on représente la masse moléculaire de
la protéine en fonction de sa taille (c'est-à-dire du nombre d'acides aminés).  
```python
>>> import matplotlib.pyplot as plt

Chunk id: 3498
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10811-calcul-des-distances-entre-les-carbones-alpha-consecutifs-dune-structure-de-proteine-exercice
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.11 Calcul des distances entre les carbones alpha consécutifs d'une structure de protéine (exercice +++)
Content:
En utilisant la fonction `trouve_calpha()` précédente, calculez la distance interatomique entre les carbones alpha des deux premiers résidus (avec deux chiffres après la virgule).

Chunk id: 801
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1382-mots-de-2-et-3-lettres-dans-une-sequence-dadn
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.2 Mots de 2 et 3 lettres dans une séquence d'ADN
Content:
Utilisez ces fonctions pour affichez les mots de 2 et 3 lettres et leurs occurrences trouvés dans la séquence d'ADN :
`ACCTAGCCATGTAGAATCGCCTAGGCTTTAGCTAGCTCTAGCTAGCTG`

Chunk id: 4372
Number of Tokens: 42
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
souhaite afficher la variable sous forme d'un *float*, les caractères `.2` indiquent la précision voulue, soit ici deux chiffres après la virgule.

Chunk id: 2813
Number of Tokens: 23
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
Pouvez-vous trouver une formule générale reliant le nombre de cases parcourues à `N` ?

Chunk id: 4610
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2041-un-premier-exemple-dans-linterpreteur
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.1 Un premier exemple dans l'interpréteur
Content:
*callback* comme expliqué ci-dessus. Dans tous les *widgets* *Tkinter*, on doit passer à l'argument `command=...` une fonction / méthode *callback*. La liste exhaustive des arguments possibles de la

Chunk id: 2812
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#5412-parcours-de-demi-matrice-sans-la-diagonale-exercice
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.4 Exercices
Subsection Name: 5.4.12 Parcours de demi-matrice sans la diagonale (exercice ++)
Content:
couples possibles mais simplement la valeur de `N`, et le nombre de cases parcourues. Affichez cela pour des valeurs de `N` allant de 2 à 10.

Chunk id: 1726
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
dans tous ses ancêtres. Et ainsi de suite, s'il y a plus de deux classes mères. Bien sûr, si aucun attribut ou méthode n'est trouvé, Python renverra une erreur.

Chunk id: 3662
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1716-construction-automatique-de-matrices
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.6 Construction automatique de matrices
Content:
Par exemple, Les fonctions `zeros()` et `ones()` construisent des objets *array* contenant des 0 ou des 1. Il suffit de leur passer en argument un tuple indiquant les dimensions voulues.

Chunk id: 2678
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#511-principe
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.1 Boucles `for`
Subsection Name: 5.1.1 Principe
Content:
La ligne 4 ne fait pas partie du corps de la boucle car elle est au même niveau que le `for` (c'est-à-dire non indentée par rapport au `for`). Notez également que chaque instruction du corps de la

Chunk id: 4643
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2042-le-meme-exemple-dans-un-script
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Subsection Name: 20.4.2 Le même exemple dans un script.
Content:
![Exemple basique de fenêtre *Tkinter*.](img/example_tkinter.png "Exemple de fenêtre tkinter"){ #fig:exemple1_tkinter width=20% }

Chunk id: 1966
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#196-bonnes-pratiques-pour-construire-et-manipuler-ses-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Content:
## 19.6 Bonnes pratiques pour construire et manipuler ses classes  
Nous allons voir dans cette rubrique certaines pratiques que nous vous recommandons lorsque vous construisez vos propres classes.

Chunk id: 814
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1384-mots-de-n-lettres-dans-un-fichier-fasta
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.8 Exercices
Subsection Name: 13.8.4 Mots de *n* lettres dans un fichier FASTA
Content:
Utilisez pour ce script la fonction `lit_fasta()` de l'exercice précédent. Créez également la fonction `compte_mots_n_lettres()` qui prend comme argument une séquence sous la forme d'une chaîne de

Chunk id: 3722
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
array([[1, 4, 7],
[2, 5, 8],
[3, 6, 9]])
```  
Tout objet *array* possède un attribut `.T` qui contient la transposée, il est ainsi possible d'utiliser cette notation objet plus compacte :

Chunk id: 1807
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1943-un-exemple-concret-dheritage
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.3 Un exemple concret d'héritage
Content:
au constructeur de la classe mère. La raison est que nous souhaitons appeler une méthode de la classe mère qui a le même nom qu'une méthode de la classe fille. Dans ce cas, si on utilisait

Chunk id: 4724
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
def creer_widgets(self):
#création canevas
self.canv = tk.Canvas(self, bg="light gray", height=self.size,
width=self.size)
self.canv.pack(side=tk.LEFT)
#boutons

Chunk id: 3856
Number of Tokens: 14
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1722-interrogation-de-la-base-de-donnees-pubmed
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.2 Module *Biopython*
Subsection Name: 17.2.2 Interrogation de la base de données PubMed
Content:
Nous pouvons maintenant récupérer des informations sur une publication précise

Chunk id: 3768
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
Tous les éléments de l'*array* satisfaisant la condition seront à `True`, les autres à `False`. Encore plus fort, il est possible de combiner plusieurs conditions avec les opérateurs logiques `&` et

Chunk id: 4675
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 15. Ici on autorise le lancement de notre application *Tkinter* en ligne de commande (`python tk_application.py`), ou bien de réutiliser notre classe en important `tk_application.py` en tant

Chunk id: 4460
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
Le formattage avec la méthode `.format()` se rapproche de la syntaxe des *f-strings* (accolades, deux-points), mais présente l'inconvénient -- comme avec l'opérateur `%` -- de devoir mettre la liste

Chunk id: 2545
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
Pour les raisons évoquées ci-dessus, il ne faut surtout pas tester si un *float* est égal à une certaine valeur. La bonne pratique est de vérifier si un *float* est compris dans un intervalle avec

Chunk id: 1621
Number of Tokens: 9
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#193-polymorphisme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.3 Polymorphisme
Content:
## 19.3 Polymorphisme

Chunk id: 4729
Number of Tokens: 64
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2062-un-canvas-encapsule-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.2 Un *canvas* encapsulé dans une classe
Content:
def dessine_cercles(self):
for i in range(20):
x, y = [rd.randint(1, self.size) for j in range(2)]
diameter = rd.randint(1, 50)
self.canv.create_oval(x, y, x+diameter, y+diameter,

Chunk id: 4382
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
comment se fait l'alignement (à gauche, à droite ou centré). Dans la portion de code suivante, le caractère `;` sert de séparateur entre les instructions sur une même ligne :

Chunk id: 3625
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1713-methodes-de-calcul-sur-les-arrays-et-largument-axis
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.3 Méthodes de calcul sur les *arrays* et l'argument `axis`
Content:
le long de l'axe 0, à savoir les lignes. C'est-à-dire que l'opération se fait en faisant varier les lignes. On récupère ainsi une valeur par colonne :

Chunk id: 1097
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/02_variables/#253-operations-illicites
File Name: 02_variables
Chapter Name: 2 Variables
Section Name: 2.5 Opérations
Subsection Name: 2.5.3 Opérations illicites
Content:
```python
>>> "toto" * 1.3
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'float'
>>> "toto" + 2

Chunk id: 1446
Number of Tokens: 17
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1917-mieux-comprendre-le-role-du-self
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.7 Mieux comprendre le rôle du `self`
Content:
def affiche_message(self):
print("Le citron c'est trop bon !")

Chunk id: 2334
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#152-les-docstrings-et-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.2 Les *docstrings* et la PEP 257
Content:
- La solution *NumPy* avec le [*NumPy Style Python Docstrings*](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html). *NumPy* qui est un module complémentaire à Python, très

Chunk id: 3733
Number of Tokens: 86
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1718-un-peu-dalgebre-lineaire
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.8 Un peu d'algèbre linéaire
Content:
```python
>>> a = np.diag((1, 2, 3))
>>> a
array([[1, 0, 0],
[0, 2, 0],
[0, 0, 3]])
>>> np.linalg.inv(a)
array([[1.        , 0.        , 0.        ],
[0.        , 0.5       , 0.        ],

Chunk id: 3188
Number of Tokens: 30
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#13-notations-utilisees
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.3 Notations utilisées
Content:
être inclus dans leur intégralité, la notation `[...]` indique une coupure arbitraire de plusieurs caractères ou lignes.

Chunk id: 1926
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
print(f"La masse de notre citron est {citron.masse} g")
print(citron.__dict__)
```  
Pour une fois, nous allons commenter les lignes dans le désordre :

Chunk id: 2539
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#66-tests-de-valeur-sur-des-floats
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.6 Tests de valeur sur des *floats*
Content:
peuvent être qu'approchées. Une manière de s'en rendre compte est d'utiliser l'écriture formatée en demandant l'affichage d'un grand nombre de décimales :

Chunk id: 3078
Number of Tokens: 68
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#44-indicage-negatif
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.4 Indiçage négatif
Content:
```text
liste          : ["girafe", "tigre", "singe", "souris"]
indice positif :        0        1        2         3
indice négatif :       -4       -3       -2        -1
```  
ou encore :  
```text

Chunk id: 386
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1312-proprietes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.1 Containers
Subsection Name: 13.1.2 Propriétés
Content:
lorsqu'on ne peut pas en modifier un de ses éléments si c'est un container. On parle aussi d'[objet immuable](https://fr.wikipedia.org/wiki/Objet_immuable) (*immutable object* en anglais). Cela

Chunk id: 2925
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
précise leur nom. Par contre, si les deux arguments positionnels `a` et `b` ne sont pas passés à la fonction, Python renvoie une erreur.

Chunk id: 1498
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
Les attributs de classe ne peuvent pas être modifiés ni à l'extérieur d'une classe via une syntaxe `instance.attribut_de_classe = nouvelle_valeur`, ni à l'intérieur d'une classe via une syntaxe

Chunk id: 4396
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
sur 7 caractères (par défaut justifiés à droite). L'instruction `10.3f` fait la même chose sur 10 caractères. Remarquez que le séparateur décimal `.` compte pour un caractère. De même, si on avait un

Chunk id: 2590
Number of Tokens: 31
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#678-attribution-de-la-structure-secondaire-des-acides-amines-dune-proteine-exercice
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.8 Attribution de la structure secondaire des acides aminés d'une protéine (exercice +++)
Content:
utiles pour définir la conformation spatiale (appelée « structure secondaire ») adoptée par les acides aminés.

Chunk id: 3326
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#104-prefixe-de-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.4 Préfixe de chaîne de caractères
Content:
comme un retour à la ligne. Pour rappel, consultez le chapitre 3 si vous souhaitez plus de détails sur le fonctionnement des *f-strings*.

Chunk id: 3514
Number of Tokens: 25
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#10812-compteur-de-genes-dans-un-fichier-genbank
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.8 Exercices
Subsection Name: 10.8.12 Compteur de gènes dans un fichier GenBank
Content:
gene            complement(<11565..>11951)
gene            <12046..>12426
[...]
```

Chunk id: 4469
Number of Tokens: 46
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#342-la-methode-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.4 Ancienne méthode de formatage des chaînes de caractères
Subsection Name: 3.4.2 La méthode `.format()`
Content:
et que vous utilisez la méthode `.format()`, nous vous conseillons de passer aux *f-strings*. Depuis que nous les avons découvertes, aucun retour n'est envisageable pour nous tant elles sont

Chunk id: 4244
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1764-calcul-du-centre-de-masse-dune-membrane
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.6 Exercices
Subsection Name: 17.6.4 Calcul du centre de masse d'une membrane
Content:
Les coordonnées cartésiennes $(x, y, z)$ de chaque phosphore (en Å) sont stockées dans le fichier [coors_P.dat](https://python.sdv.univ-paris-diderot.fr/data-files/coors_P.dat), à raison d'un atome

Chunk id: 3773
Number of Tokens: 27
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
- Il est conseillé de mettre des parenthèses pour chaque condition afin d'éviter les ambiguïtés.

Chunk id: 1866
Number of Tokens: 33
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
des *setters* : contrôler la validité des attributs (on pourrait aussi vérifier qu'il s'agit d'un entier, etc.).

Chunk id: 1893
Number of Tokens: 50
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
et les *setters*  ? Mais, tout de même, cela avait l'air une bonne idée de pouvoir contrôler comment un utilisateur de la classe interagit avec certains attributs (par exemple, rentre-t-il une bonne

Chunk id: 2916
Number of Tokens: 94
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#95-arguments-positionnels-et-arguments-par-mot-cle
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.5 Arguments positionnels et arguments par mot-clé
Content:
>>> def fct(x=0, y=0, z=0):
...     return x, y, z
...
>>> fct()
(0, 0, 0)
>>> fct(10)
(10, 0, 0)
>>> fct(10, 8)
(10, 8, 0)
>>> fct(10, 8, 3)
(10, 8, 3)
```

Chunk id: 1940
Number of Tokens: 4
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1952-la-solution-la-classe-property
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.2 La solution : la classe `property`
Content:
open-box-adv

Chunk id: 2469
Number of Tokens: 28
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#156-pour-terminer-la-pep
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.6 Pour terminer : la PEP 20
Content:
```python
>>> import antigravity
```  
Il vous faudra un navigateur et une connexion internet.  
open-box-more

Chunk id: 1731
Number of Tokens: 49
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
class Tk(Misc, Wm)
|  Toplevel widget of Tk which represents mostly the main window
|  of an application. It has an associated Tcl interpreter.
|
|  Method resolution order:
|      Tk
|      Misc

Chunk id: 637
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/13_dictionnaires_tuples_sets/#1334-tuples-contenant-des-listes
File Name: 13_dictionnaires_tuples_sets
Chapter Name: 13 Containers, dictionnaires, tuples et *sets*
Section Name: 13.3 Tuples
Subsection Name: 13.3.4 Tuples contenant des listes
Content:
La liste `l1` pointe vers le même objet que l'élément du tuple d'indice 0. Comme pour la copie de liste (par exemple `liste1 = liste2`), ceci est attendu car par défaut Python crée une copie par

Chunk id: 159
Number of Tokens: 40
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#81-definition
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.1 Définition
Content:
de tâches. Pour cette raison, prenez toujours le réflexe de vérifier si une partie du code que vous souhaitez écrire n'existe pas déjà sous forme de module.

Chunk id: 2442
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#155-conseils-sur-la-conception-dun-script
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.5 Conseils sur la conception d'un script
Content:
- Si vous créez ou manipulez une entité cohérente avec des propriétés propres, essayez de construire une classe. Jetez, pour cela, un œil au chapitre 19 *Avoir la classe avec les objets*.

Chunk id: 2859
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#91-principe-et-generalites
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.1 Principe et généralités
Content:
(on verra plus tard que l'on peut en fait appeler une fonction de n'importe où). Le programme principal désigne le code qui est exécuté lorsqu'on lance le script Python, c'est-à-dire toute la suite

Chunk id: 2561
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#673-minimum-dune-liste
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.3 Minimum d'une liste
Content:
ou de chaînes de caractères. Sans utiliser cette fonction, créez un script qui détermine le plus petit élément de la liste `[8, 4, 6, 1, 5]`.

Chunk id: 1752
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1942-ordre-de-resolution-des-noms
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.4 Héritage
Subsection Name: 19.4.2 Ordre de résolution des noms
Content:
Ainsi, même si on crée une classe `Citron` vide (contenant seulement une commande `pass`), elle possède déjà tout une panoplie de méthodes héritées de la classe `object`. Regardez l'exemple suivant :

Chunk id: 3975
Number of Tokens: 51
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1742-dataframes
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.4 Module *pandas*
Subsection Name: 17.4.2 *Dataframes*
Content:
```  
Ligne 1. Le *dataframe* est créé avec la fonction `DataFrame()` à laquelle
on fournit plusieurs arguments.
L'argument `columns` indique le nom des colonnes, sous forme d'une liste.

Chunk id: 1164
Number of Tokens: 61
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1114-remove
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.4 `.remove()`
Content:
```python
>>> a = [1, 2, 3, 4, 3]
>>> a.remove(3)
>>> a
[1, 2, 4, 3]
>>> a.remove(3)
>>> a
[1, 2, 4]
```

Chunk id: 3387
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/10_plus_sur_les_chaines_de_caracteres/#107-conversion-dune-liste-de-chaines-de-caracteres-en-une-chaine-de-caracteres
File Name: 10_plus_sur_les_chaines_de_caracteres
Chapter Name: 10 Plus sur les chaînes de caractères
Section Name: 10.7 Conversion d'une liste de chaînes de caractères en une chaîne de caractères
Content:
aux chaînes de caractères. Pour avoir une liste exhaustive de l'ensemble des méthodes associées à une variable particulière, vous pouvez utiliser la fonction `dir()`.

Chunk id: 2400
Number of Tokens: 24
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
Ligne 14. Le module `os` est chargé mais pas utilisé (ligne 4 du script).

Chunk id: 1880
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1951-le-probleme
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.5 Accès et modifications des attributs depuis l'extérieur
Subsection Name: 19.5.1 Le problème
Content:
Malgré la présence des *getters* et des *setters*, nous avons réussi à accéder et à modifier la valeur des attributs. De plus, nous avons pu mettre une valeur aberrante (masse négative) sans que cela

Chunk id: 2980
Number of Tokens: 32
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
$$
{\rm temp\_celsius} = ({\rm temp\_fahrenheit} - 32) \times \frac{5}{9}
$$

Chunk id: 1242
Number of Tokens: 67
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1161-tri-de-liste
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.6 Exercices
Subsection Name: 11.6.1 Tri de liste
Content:
Soit la liste de nombres `[8, 3, 12.5, 45, 25.5, 52, 1]`. Triez les nombres de cette liste par ordre croissant, sans utiliser la fonction `sort()`. Les fonctions et méthodes `min()`, `.append()` et

Chunk id: 2256
Number of Tokens: 12
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1514-gestion-des-espaces
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.4 Gestion des espaces
Content:
### 15.1.4 Gestion des espaces

Chunk id: 4671
Number of Tokens: 59
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#205-construire-une-application-tkinter-avec-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.5 Construire une application *Tkinter* avec une classe
Content:
Ligne 10. De même on crée un *widget* bouton en instanciant la classe `tk.Button()`. Là aussi, l'appel à la méthode `.quit()` se fait par `self.quit` puisque la fenêtre est instanciée dans la

Chunk id: 4692
Number of Tokens: 58
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2061-un-canvas-simple-et-le-systeme-de-coordonnees
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.1 Un *canvas* simple et le système de coordonnées
Content:
(*i.e.* le canevas en tant que tel) dans laquelle nous allons dessiner divers objets tels que des ellipses, lignes, polygones, etc., ou encore insérer du texte ou des images. Regardons tout d'abord

Chunk id: 3927
Number of Tokens: 37
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1732-representation-sous-forme-de-courbe
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.3 Module *matplotlib*
Subsection Name: 17.3.2 Représentation sous forme de courbe
Content:
concentration en fonction du temps. Cette manipulation n'est possible que parce que `x` est du type *array*. Cela ne fonctionnerait pas avec une liste classique.

Chunk id: 3790
Number of Tokens: 39
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#17110-masques-booleens
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.10 Masques booléens
Content:
close-box-rem  
Une application possible des masques est de « binariser » une matrice de nombre :  
```python
>>> import random as rd
>>> import numpy as np

Chunk id: 1590
Number of Tokens: 41
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1923-gestion-des-noms-avec-les-classes
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.2 Espace de noms
Subsection Name: 19.2.3 Gestion des noms avec les classes
Content:
`saveur` et `couleur`, on accède à chaque variable de la classe avec un nom distinct (qu'on soit à l'intérieur ou à l'extérieur de la classe).

Chunk id: 2565
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/06_tests/#675-notes-et-mention-dun-etudiant
File Name: 06_tests
Chapter Name: 6 Tests
Section Name: 6.7 Exercices
Subsection Name: 6.7.5 Notes et mention d'un étudiant
Content:
Voici les notes d'un étudiant : 14, 9, 13, 15 et 12. Créez un script qui affiche la note maximum (utilisez la fonction `max()`), la note minimum (utilisez la fonction `min()`) et qui calcule la

Chunk id: 200
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/08_modules/#83-obtenir-de-laide-sur-les-modules-importes
File Name: 08_modules
Chapter Name: 8 Modules
Section Name: 8.3 Obtenir de l'aide sur les modules importés
Content:
## 8.3 Obtenir de l'aide sur les modules importés  
Pour obtenir de l'aide sur un module rien de plus simple, il suffit d'utiliser la commande `help()` :  
```python
>>> import random
>>> help(random)

Chunk id: 4809
Number of Tokens: 60
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#2063-un-canvas-anime-dans-une-classe
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.6 Le *widget canvas*
Subsection Name: 20.6.3 Un *canvas* animé dans une classe
Content:
63, cet objet `mclick` récupère les coordonnées où le clic a eu lieu grâce aux attributs `mclick.x` et `mclick.y`. Ces coordonnées sont réaffectées à la baballe pour la faire repartir de l'endroit du

Chunk id: 2294
Number of Tokens: 35
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#1516-lignes-vides
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.1 De la bonne syntaxe avec la PEP 8
Subsection Name: 15.1.6 Lignes vides
Content:
On peut aussi laisser une ligne vide dans le corps d'une fonction pour séparer les sections logiques de la fonction, mais cela est à utiliser avec parcimonie.

Chunk id: 4573
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/20_tkinter/#204-prise-en-main-du-module-tkinter
File Name: 20_tkinter
Chapter Name: 20 Fenêtres graphiques et *Tkinter*
Section Name: 20.4 Prise en main du module *Tkinter*
Content:
intéressant de vous montrer des exemples. Nous allons donc en présenter quelques-uns qui pourraient vous être utiles, à vous ensuite de consulter de la documentation supplémentaire si vous souhaitez

Chunk id: 2379
Number of Tokens: 43
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#153-outils-de-controle-qualite-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.3 Outils de contrôle qualité du code
Content:
```bash
$ pydocstyle script_quality_not_ok.py
script_quality_not_ok.py:1 at module level:
D200: One-line docstring should fit on one line with quotes (found 2)

Chunk id: 1488
Number of Tokens: 44
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1918-difference-entre-les-attributs-de-classe-et-dinstance
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.1 Construction d'une classe
Subsection Name: 19.1.8 Différence entre les attributs de classe et d'instance
Content:
la dernière instruction `print()` qu'on peut accéder de la même manière aux variables de classe ou d'instance, lorsqu'on est à l'extérieur, avec une syntaxe `instance.attribut`.

Chunk id: 3545
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1711-objets-de-type-array
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.1 Module *NumPy*
Subsection Name: 17.1.1 Objets de type *array*
Content:
Par ailleurs, lorsqu'on demande à Python d'afficher le contenu d'un objet *array*, le mot `array` et les symboles `([` et `])` sont utilisés pour le distinguer d'une liste (délimitée par les

Chunk id: 3074
Number of Tokens: 54
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#43-operation-sur-les-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.3 Opération sur les listes
Content:
Dans l'exemple ci-dessus, nous ajoutons des éléments à une liste en utilisant l'opérateur de concaténation `+` ou la méthode `.append()`. Nous vous conseillons dans ce cas précis d'utiliser la

Chunk id: 2017
Number of Tokens: 45
Url: https://python.sdv.univ-paris-diderot.fr/19_avoir_la_classe_avec_les_objets/#1962-note-sur-les-attributs-publics-et-non-publics
File Name: 19_avoir_la_classe_avec_les_objets
Chapter Name: 19 Avoir la classe avec les objets
Section Name: 19.6 Bonnes pratiques pour construire et manipuler ses classes
Subsection Name: 19.6.2 Note sur les attributs publics et non publics
Content:
class Citron(Fruit):
def __init__(self):
Fruit.__init__(self)
self.__mass = 200

def print_masse(self):
print(self._Fruit__mass)
print(self.__mass)

Chunk id: 2975
Number of Tokens: 38
Url: https://python.sdv.univ-paris-diderot.fr/09_fonctions/#97-principe-dry
File Name: 09_fonctions
Chapter Name: 9 Fonctions
Section Name: 9.7 Principe DRY
Content:
En effet, plus un code est dupliqué plusieurs fois dans un programme, plus il sera source d'erreurs, notamment lorsqu'il faudra le faire évoluer.

Chunk id: 1002
Number of Tokens: 47
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#1644-liste-des-proteines-humaines
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.4 Exercices
Subsection Name: 16.4.4 Liste des protéines humaines
Content:
On souhaite lister toutes ces protéines et les indexer avec un numéro croissant.  
Créez un script `liste_proteome.py` qui :  
- lit le fichier `human-proteome.fasta` ;

Chunk id: 3119
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/04_listes/#48-listes-de-listes
File Name: 04_listes
Chapter Name: 4 Listes
Section Name: 4.8 Listes de listes
Content:
>>> zoo
[['girafe', 4], ['tigre', 2], ['singe', 5]]
```  
Dans cet exemple, chaque sous-liste contient une catégorie d'animal et le nombre d'animaux pour chaque catégorie.

Chunk id: 4395
Number of Tokens: 63
Url: https://python.sdv.univ-paris-diderot.fr/03_affichage/#323-specification-de-format
File Name: 03_affichage
Chapter Name: 3 Affichage
Section Name: 3.2 Écriture formatée
Subsection Name: 3.2.3 Spécification de format
Content:
L'instruction `7.3f` signifie que l'on souhaite écrire un *float* avec 3 décimales et formaté sur 7 caractères (par défaut justifiés à droite). L'instruction `10.3f` fait la même chose sur 10

Chunk id: 2739
Number of Tokens: 66
Url: https://python.sdv.univ-paris-diderot.fr/05_boucles_comparaisons/#52-comparaisons
File Name: 05_boucles_comparaisons
Chapter Name: 5 Boucles et comparaisons
Section Name: 5.2 Comparaisons
Content:
Dans le cas des chaînes de caractères, *a priori* seuls les tests `==` et `!=` ont un sens. En fait, on peut aussi utiliser les opérateurs `<`, `>`, `<=` et `>=`. Dans ce cas, l'ordre alphabétique

Chunk id: 4072
Number of Tokens: 48
Url: https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#1751-prise-de-contact-avec-le-jeu-de-donnees
File Name: 17_modules_interet_bioinfo
Chapter Name: 17 Quelques modules d'intérêt en bioinformatique
Section Name: 17.5 Un exemple plus complet
Subsection Name: 17.5.1 Prise de contact avec le jeu de données
Content:
```  
Avant d'analyser un jeu de données, il est intéressant de l'explorer un peu.
Par exemple, connaître ses dimensions :  
```python
>>> df.shape
(41, 4)
```

Chunk id: 2424
Number of Tokens: 52
Url: https://python.sdv.univ-paris-diderot.fr/15_bonnes_pratiques/#154-organisation-du-code
File Name: 15_bonnes_pratiques
Chapter Name: 15 Bonnes pratiques en programmation Python
Section Name: 15.4 Organisation du code
Content:
Lignes 11 à 15. On définit ici un certain nombres de variables avec des doubles *underscores* donnant quelques informations sur la version du script, les auteurs, etc. Il s'agit de métadonnées que la

Chunk id: 3178
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/01_introduction/#123-editeur-de-texte
File Name: 01_introduction
Chapter Name: 1 Introduction
Section Name: 1.2 Conseils pour installer et configurer Python
Subsection Name: 1.2.3 Éditeur de texte
Content:
de ces éditeurs de texte est détaillée dans la rubrique *Installation de Python* disponible en [ligne](https://python.sdv.univ-paris-diderot.fr/livre-dunod). Bien sûr, si vous préférez d'autres

Chunk id: 1180
Number of Tokens: 56
Url: https://python.sdv.univ-paris-diderot.fr/11_plus_sur_les_listes/#1119-particularites-des-methodes-associees-aux-listes
File Name: 11_plus_sur_les_listes
Chapter Name: 11 Plus sur les listes
Section Name: 11.1 Méthodes associées aux listes
Subsection Name: 11.1.9 Particularités des méthodes associées aux listes
Content:
open-box-rem  
Pour exprimer la même idée, la documentation parle de modification de la liste « sur place » (*in place* en anglais) :  
```python
>>> liste = [1, 2, 3]
>>> help(liste.reverse)

Chunk id: 881
Number of Tokens: 57
Url: https://python.sdv.univ-paris-diderot.fr/16_expressions_regulieres/#161-definition-et-syntaxe
File Name: 16_expressions_regulieres
Chapter Name: 16 Expressions régulières et *parsing*
Section Name: 16.1 Définition et syntaxe
Content:
Exemple : la *regex* `A(CG)?T` est retrouvée dans `AT` ou `ACGT`.  
`{n}`  
:   *n* fois le caractère précédent ou l'expression entre parenthèses précédente.

